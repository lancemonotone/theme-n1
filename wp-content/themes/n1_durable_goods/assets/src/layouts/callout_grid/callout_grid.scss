@import "../../scss/mixins/themes";

.callout-grid {
  @include themes;

  .section-heading {
    color: $accent;
  }

  .callout-container {
    display: grid;
    gap: rem(13);
    justify-items: stretch;
    justify-content: center;

    @media screen and (min-width: 500px) {
      grid-template-columns: repeat(2, 1fr);
    }

    @media screen and (min-width: 900px) {
      grid-template-columns: repeat(3, 1fr);
    }

    @media screen and (min-width: 1030px) {
      grid-template-columns: repeat(4, 1fr);
    }

    & > a {
      display: block;
      border: none;
    }

    .callout {
      height: 100%;
      font-size: rem(14);
      line-height: rem(22);
      text-align: center;
      padding: clamp(rem(25), 4vw, rem(74)) clamp(rem(15), 4vw, rem(28));
      color: $white;
      background-color: $accent;

      &:has(p:only-child) {
        display: grid;
        justify-content: center;
      }

      .callout-heading,
      .callout-content {
        &:only-child {
          align-self: center;
        }
      }

      .uppercase {
        text-transform: uppercase;
      }

    }
  }

  $callout-background-colors: (
          'white': $white,
          'primary-dark': $primary-dark,
          'primary-medium': $primary-medium,
          'primary-light': $primary-light,
  );

  &.has-background:not(.has-light-gray-background-color) {
    .callout {
      background-color: $white;
      transition: var(--transition);
      outline: $white solid 1px;
    }

    @each $color, $value in $callout-background-colors {
      &.has-#{$color}-background-color {
        .callout * {
          color: $value !important;
        }

        a:hover .callout {
          background: $value;
          //background: darken($value, 10%);
          //outline: $white solid 1px;
          //box-shadow: 0 0 16px rgba(0, 0, 0, 0.3);

          & * {
            color: $white !important;
          }
        }
      }
    }
  }
}
