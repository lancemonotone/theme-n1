{"version":3,"file":"index.js","sources":["../../src/js/accordion.js"],"sourcesContent":["window.addEventListener('load', function() {\r\n  const containers = document.querySelectorAll('.accordion')\r\n\r\n  containers.forEach(container => {\r\n    new Accordion(container)\r\n  })\r\n})\r\n\r\n// transform toggleAriaExpanded into a class\r\nclass Accordion {\r\n  constructor(container, focus = false) {\r\n    this.focus = focus\r\n    this.container = container\r\n    this.toggle = container.querySelector('.toggle')\r\n    this.content = container.querySelector('.toggle-section')\r\n    this.button = container.querySelector('.toggle-label')\r\n    this.init()\r\n  }\r\n\r\n  findFirstFocusableElement(parentElement) {\r\n    const focusableElementsSelector = 'a[href], button:not([disabled]), textarea:not([disabled]), input:not([type=submit]):not([disabled]), select:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\r\n    const focusableElements = parentElement.querySelectorAll(focusableElementsSelector)\r\n    const visibleFocusableElements = Array.from(focusableElements).\r\n                                           filter(el => el.offsetWidth > 0 && el.offsetHeight > 0)\r\n    return visibleFocusableElements.length > 0 ? visibleFocusableElements[0] : null\r\n  }\r\n\r\n  init() {\r\n    this.toggle.addEventListener('change', () => {\r\n      if (this.toggle.checked) {\r\n        // if the accordion is expanded\r\n        this.toggle.setAttribute('aria-expanded', 'true')\r\n        // Find the first focusable element in the expanded content and focus it\r\n        if (this.focus) {\r\n          let firstFocusableElement = this.findFirstFocusableElement(this.content)\r\n          if (firstFocusableElement) {\r\n            firstFocusableElement.focus()\r\n          }\r\n        }\r\n      } else {\r\n        // if the accordion is collapsed\r\n        this.toggle.setAttribute('aria-expanded', 'false')\r\n        // Return focus back to the button\r\n        this.button.focus()\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"names":["window","addEventListener","document","querySelectorAll","forEach","container","Accordion","constructor","focus","this","toggle","querySelector","content","button","init","findFirstFocusableElement","parentElement","focusableElements","visibleFocusableElements","Array","from","filter","el","offsetWidth","offsetHeight","length","checked","setAttribute","firstFocusableElement"],"mappings":"2FAAOA,OAAAC,iBAAiB,QAAQ,WACXC,SAASC,iBAAiB,cAElCC,SAAqBC,IAC9B,IAAIC,EAAUD,EAAS,GAE3B,IAGA,MAAMC,EACJC,YAAYF,EAAWG,GAAQ,GAC7BC,KAAKD,MAAQA,EACbC,KAAKJ,UAAYA,EACZI,KAAAC,OAASL,EAAUM,cAAc,WACjCF,KAAAG,QAAUP,EAAUM,cAAc,mBAClCF,KAAAI,OAASR,EAAUM,cAAc,iBACtCF,KAAKK,MACN,CAEDC,0BAA0BC,GACxB,MACMC,EAAoBD,EAAcb,iBADN,gKAE5Be,EAA2BC,MAAMC,KAAKH,GACLI,QAAaC,GAAAA,EAAGC,YAAc,GAAKD,EAAGE,aAAe,IAC5F,OAAON,EAAyBO,OAAS,EAAIP,EAAyB,GAAK,IAC5E,CAEDJ,OACOL,KAAAC,OAAOT,iBAAiB,UAAU,KACjC,GAAAQ,KAAKC,OAAOgB,SAId,GAFKjB,KAAAC,OAAOiB,aAAa,gBAAiB,QAEtClB,KAAKD,MAAO,CACd,IAAIoB,EAAwBnB,KAAKM,0BAA0BN,KAAKG,SAC5DgB,GACFA,EAAsBpB,OAEzB,OAGIC,KAAAC,OAAOiB,aAAa,gBAAiB,SAE1ClB,KAAKI,OAAOL,OACb,GAEJ"}