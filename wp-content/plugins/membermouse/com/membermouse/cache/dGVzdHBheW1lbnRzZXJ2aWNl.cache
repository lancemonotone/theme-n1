/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_TestPaymentService is an implementation of the MM_PaymentService interface that simulates a gateway
 */

class MM_TestPaymentService extends MM_ScheduledPaymentService
{
	protected $token = "TEST"; 
	
	protected $mode = "";
	protected $testProcessorOverrideKey = "";
	protected $productionProcessorOverrideKey = "";
	
	public static $MODE_ALWAYS_OVERRIDE = "always-override";
	public static $MODE_OVERRIDE_WITH_KEY = "override-with-key";
	public static $MODE_PRODUCTION_OVERRIDE_WITH_KEY = "production-override-with-key";
	
	public static $KEY_PAYMENT_SERVICE_OVERRIDE = "payment-service-override";
	
	public function __construct($autoload=true)
	{
		$this->mode = self::$MODE_ALWAYS_OVERRIDE; //default
		parent::__construct($autoload);
	}
	
	
	public function loadDependencies() { }
	
	public function install()
	{
		parent::install();
	
		$sql = "CREATE TABLE ".MM_TABLE_TEST_CARDONFILE." (\n".
				"user_id bigint(20) NOT NULL,\n".
				"last_four varchar(4),\n".
				"expiration_date datetime NOT NULL,\n".
				"PRIMARY KEY  (user_id)\n".
				");\n";
	
		dbDelta($sql);
	}
	
	
	/**
	 * isSupportedCurrency overrides the base class implementation. Any valid currency is supported by the test processor
	 * @see MM_PaymentService::isSupportedCurrency
	 * 
	 * @param string $currencyCode
	 * @return bool true if currency is supported, false otherwise
	 */
	public function isSupportedCurrency($currencyCode) 
	{ 
		return MM_CurrencyUtil::isSupportedCurrency($currencyCode);
	}
	
	
	/**
	 * Report the features the Stripe service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		$supported[] = MM_PaymentServiceFeatures::TEST_MODE;
		$supported[] = MM_PaymentServiceFeatures::MODIFY_REBILL_DATE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Stripe
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{	
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/test_service_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = (isset($post['test_payment_service_enabled']) && ($post['test_payment_service_enabled'] == "true"));
		$this->setActive($active);
		
		if ($active == false)
		{
			//update the transient to reflect that test mode has been disabled
			self::setSiteInTestMode(false);
		}
		
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['test'])?$post['payment_service']['test']:array();
			
			$testProcessorMode = isset($config['test_processor_mode'])?$config['test_processor_mode']:"";
			$this->setMode($testProcessorMode);
			
			if ($testProcessorMode == self::$MODE_ALWAYS_OVERRIDE)
			{
				//if the mode is being switched to "always override", set the site into test mode
				$this->setSiteInTestMode(true);
			}	
			else if ($testProcessorMode == self::$MODE_OVERRIDE_WITH_KEY)
			{
				$this->setSiteInTestMode(false);
				$overrideKey = isset($config['test_processor_override_key'])?$config['test_processor_override_key']:"";
				//TODO: generate key if blank
				$this->testProcessorOverrideKey = $overrideKey;
			}
			else if ($testProcessorMode == self::$MODE_PRODUCTION_OVERRIDE_WITH_KEY)
			{
				$this->setSiteInTestMode(false);
				$productionOverrideKey = isset($config['production_processor_override_key'])?$config['production_processor_override_key']:"";
				//TODO: generate key if blank
				$this->productionProcessorOverrideKey = $productionOverrideKey;
			}
		}
		return new MM_Response();
	}
	
	
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb;
		
		$parentResponse = parent::chargeOrder($order,$cardInfo,$validate);
		if (!MM_PaymentServiceResponse::isSuccess($parentResponse))
		{
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $parentResponse;
		}
		
		$tryCardOnFile = is_null($cardInfo);
		if (!$tryCardOnFile) 
		{
			$cardValidation = $cardInfo->validate();
			if ($cardValidation !== true)
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
			}
		}			
		
		$testCardInfo = $this->lookupTestCardOnFile($order->getCustomer()->getId());
		$productItems = $order->getProducts();
		
		if ($testCardInfo === false)
		{
			if ($tryCardOnFile)
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR);
			}
			$ccResponse = $this->createTestCardOnFile($order->getCustomer(), $order->getBillingAddress(), $cardInfo, $order->id);
			if (MM_Response::isError($ccResponse))
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Error: {$ccResponse->message}",MM_PaymentServiceResponse::$ERROR);
			}
			$testCardInfo = $ccResponse->message;
		}
		else 
		{
			if (!$tryCardOnFile)
			{
				//there is a card on file, but credit card info was sent as well. Update the card on file to be the card that was sent
				$aProductItem = reset($productItems);
				$updateResponse = $this->updateSubscriptionInfo($aProductItem,$cardInfo,$order->getBillingAddress());
				if (MM_PaymentServiceResponse::isError($updateResponse))
				{
					$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
					return $updateResponse;
				}
			}
		}
		
		//now setup schedules for the recurring products
		$createScheduledResult = $this->createSchedulesFromProducts($productItems);
		
		if(MM_PaymentServiceResponse::isError($createScheduledResult))
		{
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $createScheduledResult;
		}
		
		if ($order->getTotal() > 0.00)
		{
			/*
			Here is where we would contact the gateway and create a charge if this wasnt a test processor:
			
			$chargeResponse = <create charge using gateway>
			
			if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
			{
				$createdSubscriptions = $createScheduledResult->message;
				if (is_array($createdSubscriptions) && (count($createdSubscriptions) > 0))
				{
					$this->cancelScheduledSubscriptions($createdSubscriptions);
				}
				return $chargeResponse;
			}
			*/
			
			//log to transactions tables
			$productItems = $order->getProducts();
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem = reset($productItems);
				$orderItemId = $orderItem->getId();
			}
			
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$paymentServiceDetailId = 0;
			
			//now log the payment in the transactions table
			$res = MM_TransactionLog::createTestTransactionEntry($order->getId(), $orderItemId,$order->getTotal(), $order->getCurrency(),$transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$paymentServiceDetailId,$transactionDate);
		}
		//errors or failures return early, so reaching this point means payment was successful or the initial payment is 0
		$order->saveOrderStatus(MM_Order::$PAID_COMPLETE);
		
		return new MM_PaymentServiceResponse();
	}
	
	
	protected function executeSubscriptionPayment(MM_OrderItem $orderItem, $currentRebillNumber,$updatedPaymentInfo=null,$idempotencyKey="" )
	{
		global $wpdb;
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		
		$testCardInfo = $this->lookupTestCardOnFile(MM_Order::getUserIdByOrderId($order->id));
		if ($testCardInfo === false)
		{
			return new MM_PaymentServiceResponse("Invalid card on file for user id {$paymentEvent->getUserId()}",MM_Response::$ERROR);
		}
		
		$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		
		/*
		 
		//Here is where we would send the charge to the gateway if this wasn't a test processor, Example
		 
		$chargeResponse = $this->sendStripeCharge($orderItem->getRecurringAmount(), $orderItem->getCurrency(), $description,$stripeCustomerId);
		
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			return $chargeResponse;
		}
		$chargeObject = $chargeResponse->getMessage();
		*/
		
		
		//log successful transaction
		$paymentServiceDetailId = 0;
		MM_TransactionLog::createTestTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$paymentServiceDetailId);

		
		// schedule another payment if necessary
		return $this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
	}
	
	
	/**
	 * Creates a test card-on-file and links it to a MemberMouse user
	 * 
	 * @param $user MM_User linked to card on file
	 * @param $billingAddress MM_CustomerAddress containing the billing address
	 * @param $cardInfo The payment information. Only credit card info is supported at this time
	 * @param $originalOrderId (optional)
	 * 
	 * @return MM_Response success if card was created successfully, error otherwise
	 */
	protected function createTestCardOnFile(MM_User $user, MM_CustomerAddress $billingAddress, MM_CardInfo $cardInfo, $originalOrderId=null)
	{
		global $wpdb;
		
		//check that all of the parameters are non-null
		$nullFields = array();
		foreach (array("user","billingAddress","cardInfo") as $testField)
		{
			if (is_null($$testField))
			{
				$nullFields[] = "\${$testField}";	
			}
		}
		
		if (count($nullFields))
		{
			return new MM_Response("Error creating test card on file. The following fields were missing:".implode(",",$nullFields), MM_Response::$ERROR);	
		}
		
		$testCardInfo = new stdClass();
		$testCardInfo->user_id = $user->getId();
		
		$cardNumber = $cardInfo->getCardNumber();
		$tailEnd = (strlen($cardNumber) >= 4)?"-4":(-1 * strlen($cardNumber));
		$testCardInfo->last_four = substr($cardInfo->getCardNumber(), $tailEnd);
		
		$expMonth = $cardInfo->getExpirationMonth();
		$expYear =  $cardInfo->getExpirationYear();
		$expDay = date("t",strtotime("{$expYear}-{$expMonth}-01"));
		$testCardInfo->expiration_date = "{$expYear}-{$expMonth}-{$expDay}";
		
		//test processor currently only supports 1 card on file, so replace any that already exists
		$result = $wpdb->replace(MM_TABLE_TEST_CARDONFILE,array("user_id"=>$testCardInfo->user_id, "last_four"=>$testCardInfo->last_four,"expiration_date"=>$testCardInfo->expiration_date));
		if($result === false)
		{
			return new MM_Response("Error creating test card on file. Database error:".$wpdb->last_error, MM_Response::$ERROR);
		}
		
		// Remove old entries from card on file table, test service returns failure in these cases
		$wpdb->delete(MM_TABLE_CARD_ON_FILE,array("user_id"=>$user->getId()));
		
		//create entry in global card on file table
		$cofData = array("user_id"=>$user->getId(), "payment_service_id"=>$this->getId(), "payment_service_identifier"=>$user->getId());
		if (!is_null($originalOrderId))
		{
			$cofData['original_order_id'] = $originalOrderId;
		}
		$result = $wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
		if(!$result)
		{
			return new MM_Response("Error creating test card on file. Database error:".$wpdb->last_error, MM_Response::$ERROR);
		}
			
		return new MM_Response($testCardInfo);
	}
	
	
	
	/**
	 * Looks up the test card on file linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return The (string) Stripe customer id if found, boolean false if not found or errored
	 */
	protected function lookupTestCardOnFile($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT * FROM ".MM_TABLE_TEST_CARDONFILE." WHERE user_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		return $row;
	}
	
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		//createTestCardOnFile replaces any existing cards, and uses the same logic we need here, so reuse this method
		$user = new MM_User($customerId);
		$response = $this->createTestCardOnFile($user, $billingAddress, $cardInfo);
		if(MM_Response::isError($response))
		{
			return new MM_PaymentServiceResponse($response->message,MM_PaymentServiceResponse::$ERROR);
		}
		parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			return $this->resumeSubscription($orderItem);
		}
		
		return new MM_PaymentServiceResponse();		
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId,true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Stripe and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Stripe api. If Stripe notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId,$shouldAttemptGatewayRefund=true) 
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists, (and for the test service, make sure it is a test transaction)
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s AND is_test=1",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$transactionAmount = abs($transactionRow->amount);
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				/*
				Here is where we would look up the records we should have stored when creating the charge that allow us to identify 
				the item being refunded to the remote gateway
				
				$stripeChargeQuery = "SELECT * from ".MM_TABLE_STRIPE_CHARGES." WHERE id = %s";
				$stripeChargeInfo = $wpdb->get_row($wpdb->prepare($stripeChargeQuery,$transactionRow->payment_service_detail_id));
				$stripeChargeId = $stripeChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				*/
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			/*
			 * For a real gateway, insert gateway-specific code to refund the transaction here
			 */
		}
		
		//log the refund in the transaction log
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$transactionId));
		if (!is_null($originalTransactionInfo))
		{
			$transactionDescription = "Refund for transaction# {$transactionId}";
			$transactionDate = MM_Utils::getCurrentTime();
				
			$response = MM_TransactionLog::createTestTransactionEntry($originalTransactionInfo->order_id,
					$originalTransactionInfo->order_item_id,
					$originalTransactionInfo->amount,
					$originalTransactionInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$transactionId);
			if (MM_Response::isSuccess($response))
			{
				$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$transactionId));
			}
			return new MM_PaymentServiceResponse(); //success
		}
		else 
		{
			return new MM_PaymentServiceResponse("Error refunding transaction# {$transactionId}: Unable to retrieve the original transaction",MM_PaymentServiceResponse::$ERROR); 
		}
	}
	
	
	/**
	 * Returns boolean indicating whether the payment service is in test mode or not
	 * 
	 * @return bool
	 */
	public function inTestMode()
	{
		return true;
	}
	
	
	/**
	 * Changes the configuration of the payment service to use the test mode settings, if available.
	 * If the configuration was able to be successfully changed to be a test mode configuration, true is returned, otherwise false
	 * 
	 *  @return bool
	 */
	public function switchToTestMode()
	{
		return true;
	}


	public function getMode()
	{
		return $this->mode;
	}


	public function setMode($mode)
	{
		$validModes = array(self::$MODE_ALWAYS_OVERRIDE, self::$MODE_OVERRIDE_WITH_KEY, self::$MODE_PRODUCTION_OVERRIDE_WITH_KEY);
		$this->mode = (in_array($mode,$validModes))?$mode:(self::$MODE_ALWAYS_OVERRIDE);
	}


	public function getTestProcessorOverrideKey()
	{
		return $this->testProcessorOverrideKey;
	}


	public function setTestProcessorOverrideKey($testProcessorOverrideKey)
	{
		$this->testProcessorOverrideKey = $testProcessorOverrideKey;
	}


	public function getProductionProcessorOverrideKey()
	{
		return $this->productionProcessorOverrideKey;
	}


	public function setProductionProcessorOverrideKey($productionProcessorOverrideKey)
	{
		$this->productionProcessorOverrideKey = $productionProcessorOverrideKey;
	}
	
	
	/**
	 * Determines if the site is in test mode (test processor is overriding the onsite service)
	 */
	public static function isSiteUsingTestService()
	{
		//use transients to take advantage of cache
		if (($testMode = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SITE_IN_TEST_MODE)) === false)
		{
			$tp = MM_PaymentServiceFactory::getPaymentService(MM_PaymentService::$TEST_SERVICE_TOKEN,false);
			$transMode = 0;
			if (is_null($tp) || !($tp instanceof MM_TestPaymentService))
			{
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Unable to retrieve test processor in MM_TestPaymentService::isSiteUsingTestService()");
			}
			else if ($tp->isActive()) 
			{
				//0 and 1 are used for transmode to differentiate from boolean "false", which is returned when the transient is not-set/expired.
				$transMode = ($tp->getMode() == MM_TestPaymentService::$MODE_ALWAYS_OVERRIDE)?1:0;
			}
			
			self::setSiteInTestMode(($transMode === 1));
			return (($transMode === 1)?true:false);
		}
		else 
		{
			return (($testMode === "1") || ($testMode === 1));
		}
	}
	
	
	public static function setSiteInTestMode($inTestMode)
	{
		$inTestMode = (bool)$inTestMode;
		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_SITE_IN_TEST_MODE,($inTestMode?1:0));
	}
	
	
	/**
	 * Generates working example link 
	 */
	public static function getExampleCheckoutLink()
	{
		global $wpdb;
		
		$validProductID = $wpdb->get_var("SELECT MIN(id) FROM ".MM_TABLE_PRODUCTS." WHERE status=1");
		$validProductID = empty($validProductID)?999999:$validProductID; //NOTE: relies on corepage engine returning a checkout link even when the product id is invalid
		return MM_CorePageEngine::getCheckoutPageStaticLink($validProductID);
	}
		
	
}