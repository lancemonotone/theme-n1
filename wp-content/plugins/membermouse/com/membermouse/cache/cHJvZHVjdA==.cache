/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_Product is an entity class representing a product in the MemberMouse system. This is conceptually a 
 * physical or virtual product purchased for consumption, or a product representing a membership or bundle.
 */

class MM_Product extends MM_Entity
{	
	public static $SAMPLE_PRODUCT_ID = -10;
	public static $DFLT_PURCHASE_CONFIRMATION_MSG = "[MM_Form type='1clickpurchase']
Are you sure you want to purchase [MM_Form_Data name='productName']?
<br/><br/>
Your card will be billed [MM_Form_Data name='totalPrice'].
[/MM_Form]";
	
	private $referenceKey = "";
	private $status = "1";
	private $name = "";
	private $sku = "";
	private $description = "";
	private $price = "";
	private $currency = "";
	private $isShippableFlag = "";
	private $hasTrialFlag = "";
	private $rebillPeriod = "";
	private $trialAmount = "";
	private $trialDuration = "";
	private $rebillFrequency = "";
	private $trialFrequency = "";
	private $limitTrialFlag = "0";
	private $limitTrialAltProductId = "0";
	private $limitPaymentsFlag = "0";
	private $numberOfPayments = "";
	private $purchaseConfirmationMsg = "";
	private $commissionProfileId = "-1";
	private $isHidden="0";
	
	public function __construct($id="", $getData=true)
	{
		if(!($id instanceof MM_Response))
		{
			if(isset($id) && (intval($id) > 0 || intval($id) == self::$SAMPLE_PRODUCT_ID))
			{
				$this->id = $id;
					
				if($getData == true)
				{
					$this->getData();
				}
			}
			else
			{
				$id = "";
			}
		}
	}
	
	public function getData() 
	{
		global $wpdb;

		if($this->id != self::$SAMPLE_PRODUCT_ID)
		{
			$sql = "SELECT * FROM ".MM_TABLE_PRODUCTS." WHERE id='".$this->id."'";
			$result = $wpdb->get_row($sql);
			
			if($result)
			{
				$this->setData($result);
			}
			else
			{
				parent::invalidate();
			}	
		}
		else
		{ 
			$this->id = self::$SAMPLE_PRODUCT_ID;
			$this->referenceKey = "p329gi";
			$this->status = 1;
			$this->name = "Test Product";
			$this->sku = "a123d";
			$this->description = "A test product";
			$this->price = 10.00;
			$this->currency = "USD";
			$this->isShippableFlag = 1;
			$this->hasTrialFlag = 1;
			$this->rebillPeriod = 1;
			$this->trialAmount = 7.99;
			$this->trialDuration = 1;
			$this->trialFrequency = "months";
			$this->rebillFrequency = "months";
			$this->limitTrialFlag = 1;
			$this->limitTrialAltProductId = 1;
			$this->limitPaymentsFlag = 1;
			$this->numberOfPayments = 5;
			$this->purchaseConfirmationMsg = MM_Product::$DFLT_PURCHASE_CONFIRMATION_MSG;
			$this->commissionProfileId = 0;
			$this->isHidden = 0;
			parent::validate();
		}
	}
	

	public static function getTotalHidden()
	{
		global $wpdb;
		$sql = "select count(*) as total from ".MM_TABLE_PRODUCTS." where is_hidden='1' ";
		$result = $wpdb->get_var($sql);
		if($result !== false && intval($result) > 0)
		{
			return intval($result);
		}
		return 0;
	}

	public static function findByReferenceKey($key)
	{
		$product = new MM_Product();
		
		if(!empty($key))
		{
			global $wpdb;
			$sql = "SELECT * FROM ".MM_TABLE_PRODUCTS." WHERE reference_key='".$key."'";
			$result = $wpdb->get_row($sql);
			
			if($result)
			{
				$product->setData($result);
			}
			else
			{
				$product->invalidate();
			}
		}
		
		return $product;
	}
	
	public function setData($data)
	{
		try 
		{	
			$this->id = $data->id;
			$this->referenceKey = $data->reference_key;
			$this->status = $data->status;
			$this->name = $data->name;
			$this->sku = $data->sku;
			$this->description = $data->description;
			$this->price = $data->price;
			$this->currency = $data->currency;
			$this->isShippableFlag = $data->is_shippable;
			$this->hasTrialFlag = $data->has_trial;
			$this->rebillPeriod = $data->rebill_period;
			$this->trialAmount = $data->trial_amount;
			$this->trialDuration = $data->trial_duration;
			$this->trialFrequency = $data->trial_frequency;
			$this->rebillFrequency = $data->rebill_frequency;
			$this->limitTrialFlag = $data->do_limit_trial;
			$this->limitTrialAltProductId = $data->limit_trial_alt_product_id;
			$this->limitPaymentsFlag = $data->do_limit_payments;
			$this->numberOfPayments = $data->number_of_payments;
			$this->purchaseConfirmationMsg = $data->purchase_confirmation_message;
			$this->commissionProfileId = $data->commission_profile_id; 
			$this->isHidden = (isset($data->is_hidden) && $data->is_hidden == 1)?true:false;
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	} 
	
	
	public function remove()
	{
		global $wpdb;
		
		if(!MM_Product::isBeingUsed($this->id) && !MM_Product::hasBeenPurchased($this->id))
		{
			$sql = "delete from ".MM_TABLE_PRODUCTS." where id='{$this->id}' limit 1";
			if($wpdb->query($sql))
			{
				$this->invalidate();
				if ($this->notifyServices)
				{
					$mediator = new MM_PaymentServiceMediator();
					$mediator->notifyProductRemoved($this);
				}
				return true;
			}
		}
		return false;
	}
	
	
	public function commitData()
	{	
		global $wpdb;
		
		$doUpdate = ($this->id>0);
		
		MM_Transaction::begin();
		try
		{	
			if(!$doUpdate) 
			{
				$sql = "insert into ".MM_TABLE_PRODUCTS." set " .
					"   reference_key='%s'," .
					"   status='%d'," .
		 			"	name='%s'," .
		 			"	sku='%s'," .
		 			"	description='%s'," .
		 			"	price='%s'," .
		 			"   currency='%s'," .
		 			"	rebill_frequency='%s'," .
		 			"	trial_frequency='%s'," .
		 			"	is_shippable='%d'," .
		 			"	is_hidden='%d'," .
		 			"	has_trial='%d'," .
		 			"	trial_amount='%f'," .
		 			"	trial_duration='%d'," .
		 			"	rebill_period='%d'," .
		 			"	do_limit_trial='%d', " .
		 			"	limit_trial_alt_product_id='%d', " .
		 			"	do_limit_payments='%d', " .
		 			"	number_of_payments='%d', " .
		 			"	purchase_confirmation_message='%s', " .
		 			"	commission_profile_id='%d'" .
		 			"";
			
			}
			else 
			{	
				$sql = "update ".MM_TABLE_PRODUCTS." set " .
					"   reference_key='%s'," .
					"   status='%d'," .
		 			"	name='%s'," .
		 			"	sku='%s'," .
		 			"	description='%s'," .
		 			"	price='%s'," .
		 			"   currency='%s'," .
		 			"	rebill_frequency='%s'," .
		 			"	trial_frequency='%s'," .
		 			"	is_shippable='%d'," .
		 			"	is_hidden='%d'," .
		 			"	has_trial='%d'," .
		 			"	trial_amount='%f'," .
		 			"	trial_duration='%d'," .
		 			"	rebill_period='%d'," .
		 			"	do_limit_trial='%d', " .
		 			"	limit_trial_alt_product_id='%d', " .
		 			"	do_limit_payments='%d', " .
		 			"	number_of_payments='%d', " .
		 			"	purchase_confirmation_message='%s', " .
		 			"	commission_profile_id='%d' " .
		 			"	where id='{$this->id}'" .
		 			"";
		 	}
		 	
		 	$preparedSql = $wpdb->prepare($sql, $this->getReferenceKey(), $this->status, $this->name, $this->sku, $this->description, $this->price, 
						MM_CurrencyUtil::getActiveCurrency(),$this->rebillFrequency,$this->trialFrequency, $this->isShippableFlag, $this->isHidden, $this->hasTrialFlag,
		 				$this->trialAmount, $this->trialDuration, $this->rebillPeriod, $this->limitTrialFlag, $this->limitTrialAltProductId, 
		 				$this->limitPaymentsFlag, $this->numberOfPayments, $this->purchaseConfirmationMsg, $this->commissionProfileId); 
		 	$result = $wpdb->query($preparedSql);
			
			if($result === false)
		 	{
				MM_Transaction::rollback();
		 		return new MM_Response("ERROR: unable to create product (".$preparedSql.")", MM_Response::$ERROR);
		 	}
		 	
		 	if (!$doUpdate)
		 	{
		 		$this->setId($wpdb->insert_id);
		 		$this->validate();
		 	}
		}
		catch(Exception $ex)
		{
		 	MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to create product", MM_Response::$ERROR);
		}
		 
		MM_Transaction::commit();
		
		if ($this->notifyServices)
		{
			$mediator = new MM_PaymentServiceMediator();
			if ($doUpdate)
			{
				$mediator->notifyProductUpdated($this);
			}
			else
			{
				$mediator->notifyProductAdded($this);
			}
		}
	
		return new MM_Response();
	}
	
	
	public function getAssociatedMembership()
	{
		global $wpdb;
		
		$sql = "SELECT mtp.membership_id as id from ".MM_TABLE_MEMBERSHIP_LEVELS." mt, ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mtp where mtp.product_id='{$this->id}' and mt.id = mtp.membership_id";
		$result = $wpdb->get_row($sql);
		
		if($result)
		{
			return new MM_MembershipLevel($result->id);
		}
		return new MM_MembershipLevel();
	}
	
	
	public function getAssociatedBundle() 
	{
		global $wpdb;
		$sql = "select at.id from ".MM_TABLE_BUNDLE_PRODUCTS." aat, ".MM_TABLE_BUNDLES." at where aat.product_id='{$this->id}' and aat.bundle_id=at.id LIMIT 1;";
		$result = $wpdb->get_row($sql);
		
		if($result)
		{
			return new MM_Bundle($result->id);
		}
		
		return new MM_Bundle();
	}
	
	
	public function getBillingDescription($includeTrialDescription=true, $adminDisplay=true)
	{
		$billingDescription = "";
		$trialDescription = "";
		
		if($adminDisplay)
		{
			$pricingDescription = "<span style='font-family:courier; font-size:12px;'>".$this->getPrice(true)."</span>";
		}
		else
		{
			$pricingDescription = $this->getPrice(true);
		}
		
		if($this->hasTrial() && $includeTrialDescription)
		{
			$trialDescription = $this->getTrialDuration()." ".substr($this->getTrialFrequency(), 0, -1)." ";
				
			if(floatval($this->getTrialAmount(false)) == 0.00)
			{
				$trialDescription .= "free trial";
			}
			else
			{
				$trialDescription .= "trial for ";
				
				if($adminDisplay)
				{
					$trialDescription .= "<span style='font-family:courier; font-size:12px;'>".$this->getTrialAmount(true)."</span>";
				}
				else
				{
					$trialDescription .= $this->getTrialAmount(true);
				}
			}
		}
		
		if($this->isRecurring())
		{
			if($this->doLimitPayments()) 
			{
				$tmpDescription = $this->getNumberOfPayments()." ";
				$tmpDescription .= ($this->getNumberOfPayments() == 1) ? "payment":"payments";
				$tmpDescription .= " of ".$pricingDescription;
				
				$pricingDescription = $tmpDescription;
			}
			else 
			{
				if(intval($this->getRebillPeriod()) == 1)
				{
					if($adminDisplay)
					{
						$pricingDescription .= " every ";
					}
					else
					{
						$pricingDescription .= "/";
					}
					
					$pricingDescription .= substr($this->getRebillFrequency(), 0, -1);
				}
				else 
				{
					$pricingDescription .= " every ".$this->getRebillPeriod()." ".$this->getRebillFrequency();
				}
			}
		}
		
		if(!empty($trialDescription) && $includeTrialDescription)
		{
			if($adminDisplay)
			{
				$billingDescription = $trialDescription." then ";
			}
			else	
			{
				$billingDescription = $trialDescription.", ";
			}
		}
		
		return $billingDescription.$pricingDescription;
	}
	
	
	public function getProductsAndAssociations($core_page_type_id, $page_id)
	{
		global $wpdb;
		
		$cpid_sql = "core_page_type_id='{$core_page_type_id}'";
		if($core_page_type_id == MM_CorePageType::$PAID_CONFIRMATION)
		{
			$cpid_sql = "core_page_type_id IN ('".MM_CorePageType::$FREE_CONFIRMATION."','".MM_CorePageType::$PAID_CONFIRMATION."')";	
		}
		
		$sql = "select 
					'member_type' as ref_type, mt.id as type_id,mt.name as type_name, p.id as product_id, p.name as product_name, mt.is_free as is_free 
				from 
					".MM_TABLE_MEMBERSHIP_LEVELS." mt
						LEFT JOIN ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mtp ON mtp.membership_id=mt.id  
						LEFT JOIN ".MM_TABLE_PRODUCTS." p ON mtp.product_id=p.id AND p.id NOT IN 
								(select ref_id from ".MM_TABLE_CORE_PAGES." cp where {$cpid_sql} and ref_type='product' and page_id!='{$page_id}' and ref_id>0)
				where
					mt.id NOT IN (select ref_id from ".MM_TABLE_CORE_PAGES." cp where {$cpid_sql} and ref_type='member_type' and page_id!='{$page_id}' and ref_id>0)
				
				UNION
				 
				select 
					'access_tag' as ref_type, at.id as type_id, at.name as type_name, p.id as product_id, p.name as product_name, at.is_free as is_free  
				from 
					".MM_TABLE_BUNDLES." at 
   						LEFT JOIN ".MM_TABLE_BUNDLE_PRODUCTS." atp on at.id=atp.bundle_id
   						LEFT JOIN ".MM_TABLE_PRODUCTS." p on atp.product_id=p.id AND p.id NOT IN 
   								(select ref_id from ".MM_TABLE_CORE_PAGES." cp where {$cpid_sql} and ref_type='product' and page_id!='{$page_id}' and ref_id>0)
				where
					at.id NOT IN (select ref_id from ".MM_TABLE_CORE_PAGES." cp where {$cpid_sql} and ref_type='access_tag' and page_id!='{$page_id}' and ref_id>0)
		 ";
		
		return $wpdb->get_results($sql);
	}
	
	
	/** UTILITIES **/
	public static function getProductsByIds($productIds)
	{
		global $wpdb;
		$products = array();
		if(is_array($productIds))
		{
			$sql = "select * from ".MM_TABLE_PRODUCTS." where id IN (".implode(",", $productIds).")";
			$products = $wpdb->get_results($sql);
		}
		return $products;

	}
	
	public static function isBeingUsed($productId)
	{
		global $wpdb;
	
		$sql = $wpdb->prepare("SELECT COUNT(*) AS total FROM ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mlp WHERE mlp.product_id=%s",$productId);
		$row = $wpdb->get_row($sql);
		
		if($row->total > 0)
		{
			return true;
		}
	
		$sql = $wpdb->prepare("SELECT COUNT(*) AS total FROM ".MM_TABLE_BUNDLE_PRODUCTS." mbp WHERE mbp.product_id=%s",$productId);
		$row = $wpdb->get_row($sql);
		
		if($row->total > 0)
		{
			return true;
		}
		
		$sql = $wpdb->prepare("SELECT COUNT(*) AS total FROM ".MM_TABLE_PRODUCTS." p WHERE (p.has_trial = 1) AND (p.do_limit_trial = 1) AND (p.limit_trial_alt_product_id=%s)",$productId);
		$row = $wpdb->get_row($sql);
		
		if($row->total > 0)
		{
			return true;
		}
		
		return false;
	}
	
	public static function hasBeenPurchased($productId)
	{
		global $wpdb;
		
		$sql = $wpdb->prepare("SELECT count(*) AS total FROM ".MM_TABLE_ORDER_ITEMS." WHERE item_id=%s and item_type=%s",$productId,MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT);
		$purchases = intval($wpdb->get_var($sql));
		return ($purchases > 0);
	}
	
	
	public static function getPurchaseInfo($pid)
	{
		$product = new MM_Product($pid);
		$bundle = $product->getAssociatedBundle();
		if($bundle->isValid())
		{
			return array('name'=>$bundle->getName(), 'price'=>$product->getPrice(true));
		}
		else
		{
			$membership = $product->getAssociatedMembership();
			if($membership->isValid())
			{
				global $current_user;
				$user = MM_User::getCurrentWPUser();
				$cMembership = new MM_MembershipLevel($user->getMembershipId());
				$cProduct = new MM_Product($cMembership->getDefaultProduct());
				return array('name'=>$membership->getName(), 'price'=>$product->getPrice(true),'current_membership_price'=>$cProduct->getPrice(true));
			}
		}
		return array('name'=>$product->getName(), 'price'=>$product->getPrice(true));
	}
	
	
	public static function getAll($excludeProductIds=null, $excludeArchived = false)
	{
		global $wpdb;
		$sql = "select id, name from ".MM_TABLE_PRODUCTS;
		if($excludeArchived)
		{
			$sql.= " where is_hidden!='1' ";
		} 
		$rows = $wpdb->get_results($sql);
		
		$products = array();
		if(is_array($rows) && count($rows)>0){
			foreach($rows as $row)
			{
				if(!is_null($excludeProductIds) && is_array($excludeProductIds) && in_array($row->id, $excludeProductIds))
				{
					continue;
				}
				
				$products[$row->id] = $row->name;
			}
		}
		return $products; 
	}
	
	
	public static function getMembershipProductList($membershipId, $excludeArchived=false) 
	{
		global $wpdb;

		$ext = "";
		if($excludeArchived)
		{
			$ext = " p.is_hidden!='1' and ";
		}
		
		$sql = "SELECT p.* from ".MM_TABLE_PRODUCTS." p 
					LEFT JOIN ".MM_TABLE_BUNDLE_PRODUCTS." atp ON (p.id = atp.product_id) where {$ext} atp.product_id IS NULL 
							order by product_id asc";
		$rows = $wpdb->get_results($sql);
		
		$products = array();
		
		foreach($rows as $row)
		{
			$product = new MM_Product($row->id, false);
			$associatedMembership = $product->getAssociatedMembership();
			
			if($associatedMembership->isValid()) 
			{				
				// if product is associated with the membership passed, then show it
				if(isset($membershipId) && ($membershipId == $associatedMembership->getId()))
				{
					$products[$row->id] = $row->name;
				}
			}
			else 
			{
				$products[$row->id] = $row->name;				
			}
		}	
		
		return $products;
	}
	
	
	public static function getBundleProductList($bundleId, $excludeArchived = false)
	{
		global $wpdb;

		$ext = "";
		if($excludeArchived)
		{
			$ext = " p.is_hidden!='1' and ";
		}
		$sql = "SELECT p.* from ".MM_TABLE_PRODUCTS." p LEFT JOIN ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mtp ON (p.id = mtp.product_id) where {$ext} mtp.product_id IS NULL";
		
		$rows = $wpdb->get_results($sql);
		$products = array();
		
		foreach($rows as $row)
		{
			$product = new MM_Product($row->id, false);
			$associatedBundle = $product->getAssociatedBundle();
			
			if($associatedBundle->isValid())
			{
				// if product is associated with the bundle passed, then show it
				if(isset($bundleId) && ($bundleId == $associatedBundle->getId())) 
				{
					$products[$row->id] = $row->name;
				}
			}
			else 
			{	
					$products[$row->id] = $row->name;	
			}
		}
		
		return $products;
	}
	
	
	/** PARTNER METHODS */
	
	public function addPartner($affiliateId, $commissionProfileId)
	{
		global $wpdb;
	
		if(intval($this->id) > 0)
		{
			$data = array("product_id" => $this->getId(), "affiliate_id" => $affiliateId, "commission_profile_id" => $commissionProfileId);
			$result = $wpdb->insert(MM_TABLE_AFFILIATE_PARTNER_PAYOUTS, $data);
	
			if($result === false)
			{
				return new MM_Response("Could not add partner due to SQL error.", MM_Response::$ERROR);
			}
		}
	
		return new MM_Response("Unable to add partner. Product is invalid.", MM_Response::$ERROR);
	}
	
	public function deletePartners()
	{
		if(intval($this->id) > 0)
		{
			global $wpdb;
				
			$sql = "delete from ".MM_TABLE_AFFILIATE_PARTNER_PAYOUTS." where product_id='{$this->getId()}';";
			$result = $wpdb->query($sql);
	
			if($result === false)
			{
				return new MM_Response("Could not remove partners due to SQL error.", MM_Response::$ERROR);
			}
			else
			{
				return new MM_Response();
			}
		}
	}
	
	public function getPartners()
	{
		global $wpdb;
	
		$data = array();
		$sql = "select * from ".MM_TABLE_AFFILIATE_PARTNER_PAYOUTS." where product_id='{$this->getId()}' order by affiliate_id asc;";
		$result = $wpdb->get_results($sql);
	
		if(!$result || is_null($result))
		{
			return $data;
		}
	
		foreach($result as $item)
		{
			$partner = new stdClass();
			$partner->affiliateId = $item->affiliate_id;
			$partner->commissionProfileId = $item->commission_profile_id;
			$data[] = $partner;
		}
	
		return $data;
	}
	
	
	/** GETTERS/SETTERS **/
	
	public function getReferenceKey()
	{
		global $wpdb;
		
		if(empty($this->referenceKey))
		{
			// generate a random 6 alphnumeric string
			do {
				$newKey = "p";
				for ($i=0; $i<5; $i++)
				{
					$type = rand(1,3);
					switch ($type) {
						case 1: //numeric
							$newKey.=chr(rand(48,57));
							break;
						case 2: //upper alpha
							$newKey.=chr(rand(65,90));
							break;
						case 3: //lower alpha
						default:
							$newKey.=chr(rand(97,122));
							break;
					}
				}
					
				$results = $wpdb->get_results($wpdb->prepare("select * from ".MM_TABLE_PRODUCTS." where reference_key='%s'", $newKey));
			} while (count($results) > 0); //iterate while key is not unique.
			
			$this->referenceKey = $newKey;
			
			// save reference key
			if($this->id > 0)
			{
				$whereClause = array("id" => $this->id);
				$data = array("reference_key"=>$this->referenceKey);
				$result = $wpdb->update(MM_TABLE_PRODUCTS, $data, $whereClause);
					
				if($result === false)
				{
					return new MM_Response("Error saving product reference key: ".$wpdb->last_error, MM_Response::$ERROR);
				}
			}
		}
		
		return $this->referenceKey;
	}
 	
	public function setName($str) 
	{
		$this->name = $str;
	}
	
	public function getName()
	{
		return $this->name;
	}
	
	public function setStatus($str) 
	{
		$this->status = $str;
	}
	
	public function getStatus()
	{
		return $this->status;
	}
	
	public function isActive()
	{
		return ($this->status == "1") ? true : false;
	}
	
	public function setSku($str) 
	{
		$this->sku = $str;
	}
	
	public function getSku()
	{
		return $this->sku;
	}
	
	public function setDescription($str) 
	{
		$this->description = $str;
	}
	
	public function getDescription()
	{
		return $this->description;
	}
	
	public function setPrice($str) 
	{
		$this->price = $str;
	}
	
	public function getPrice($doFormat=true)
	{
		if($doFormat) 
		{
			return _mmf($this->price,$this->currency);
		}
		else 
		{
			return number_format(floatval($this->price),MM_CurrencyUtil::getPrecisionForCurrency($this->currency),'.','');
		}
	}
	
	public function setIsShippableFlag($str) 
	{
		$this->isShippableFlag = $str;
	}
	
	public function isShippable()
	{
		return (intval($this->isShippableFlag) == 1) ? true : false;
	}
	
	public function setHasTrialFlag($str) 
	{
		$this->hasTrialFlag = $str;
	}
	
	public function hasTrial()
	{
		return (intval($this->hasTrialFlag) == 1) ? true : false;
	}
	
	public function setTrialAmount($str)
	{

		$this->trialAmount = $str;
	}
	
	public function getTrialAmount($doFormat=true)
	{
		if($doFormat) 
		{
			return _mmf($this->trialAmount, $this->currency);
		}
		else 
		{
			return number_format(floatval($this->trialAmount),MM_CurrencyUtil::getPrecisionForCurrency($this->currency),'.','');
		}
	}
	
	public function setTrialDuration($str)
	{
		$this->trialDuration = $str;
	}
	
	public function getTrialDuration()
	{
		return $this->trialDuration;
	}
	
	public function setRebillPeriod($str) 
	{
		$this->rebillPeriod = $str;
	}
	
	public function getRebillPeriod()
	{
		return $this->rebillPeriod;
	}
	
	public function setRebillFrequency($str) 
	{
		$this->rebillFrequency = $str;
	}
	
	public function getRebillFrequency()
	{
		return $this->rebillFrequency;
	}
	
	public function setTrialFrequency($str) 
	{
		$this->trialFrequency = $str;
	}
	
	public function getTrialFrequency()
	{
		return $this->trialFrequency;
	}
	
	public function setLimitTrialFlag($str) 
	{
		$this->limitTrialFlag = $str;
	}
	
	public function doLimitTrial()
	{
		return (intval($this->limitTrialFlag) == 1) ? true : false;
	}
	
	public function setLimitTrialAltProductId($productId) 
	{
		$this->limitTrialAltProductId = $productId;
	}
	
	public function getLimitTrialAltProductId()
	{
		return (intval($this->limitTrialAltProductId) != "0") ? intval($this->limitTrialAltProductId) : "";
	}
	
	public function setNumberOfPayments($str) 
	{
		$this->numberOfPayments = $str;
	}
	
	public function getNumberOfPayments()
	{
		return $this->numberOfPayments;
	}
	
	public function setLimitPaymentsFlag($str) 
	{
		$this->limitPaymentsFlag = $str;
	}
	
	public function doLimitPayments()
	{
		return (intval($this->limitPaymentsFlag) == 1) ? true : false;
	}
	
	public function isRecurring() 
	{
		return intval($this->rebillPeriod) > 0;
	}
	
	public function getPurchaseConfirmationMessage()
	{
		if(!empty($this->purchaseConfirmationMsg))
		{
			return $this->purchaseConfirmationMsg;
		}
		else
		{
			return self::$DFLT_PURCHASE_CONFIRMATION_MSG;
		}
	}
	
	public function setPurchaseConfirmationMessage($str)
	{
		$this->purchaseConfirmationMsg = $str;
	}
	
	public function getCurrency()
	{
		return $this->currency;
	}

	public function setCurrency($currency)
	{
		$this->currency = $currency;
	}
	
	public function getCommissionProfileId()
	{
		return $this->commissionProfileId;
	}
	
	public function setCommissionProfileId($id)
	{
		$this->commissionProfileId = $id;
	}
	 
	public function setIsHidden($isHidden)
	{
		$this->isHidden = (bool)$isHidden; 
	}
	
	public function isHidden()
	{
		return $this->isHidden;
	}

	public function getCommissionProfile()
	{
		if($this->commissionProfileId != MM_CommissionProfile::$DFLT_COMMISSION_PROFILE_ID)
		{
			$commissionProfile = new MM_CommissionProfile($this->commissionProfileId);

			if($commissionProfile->isValid())
			{
				return $commissionProfile;
			}
		}
		
		return MM_CommissionProfile::getDefaultCommissionProfile();
	}
}
