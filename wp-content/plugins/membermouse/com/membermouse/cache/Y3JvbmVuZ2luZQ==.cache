/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_CronEngine
{
	public static $MM_CRON_HOOK = "mm_cron_hook";
	public static $MM_CHECK_SCHEDULED_EVENT_QUEUE = "mm_check_scheduled_event_queue";
	public static $MM_SESSION_REAP = "mm_session_reap";
	
	public static function setup()
	{
		if(!wp_next_scheduled(self::$MM_CRON_HOOK))
		{
			wp_schedule_event(time(), 'twicedaily', self::$MM_CRON_HOOK);
		}
		
		if(!wp_next_scheduled(self::$MM_SESSION_REAP))
		{
			wp_schedule_event(time(), 'session_reap_interval', self::$MM_SESSION_REAP);
		} 
		
		$ce = new MM_CronEngine();
		add_action(self::$MM_CRON_HOOK, array($ce, 'performDailyTasks'));
		
		if(class_exists("MM_MemberMouseService") && class_exists("MM_License"))
		{
    		$license = new MM_License("",false);
    		MM_MemberMouseService::getLicense($license);
    
    		if (!method_exists($license,"isStaging") || (!$license->isStaging()))
    		{ 
    		    //only handle scheduled events on non-staging sites
    		    if(!wp_next_scheduled(self::$MM_CHECK_SCHEDULED_EVENT_QUEUE))
    		    {
    		        wp_schedule_event(time(), 'queue_check_interval', self::$MM_CHECK_SCHEDULED_EVENT_QUEUE);
    		    }
    			add_action(self::$MM_CHECK_SCHEDULED_EVENT_QUEUE,array('MM_ScheduledEvent','callSynchronizationHandler'));
    			
    			//only search for orphaned schedules on non-staging sites
    			if( !wp_next_scheduled('register_orphaned_schedules'))
    			{
    			    wp_schedule_event( time(), 'daily', 'register_orphaned_schedules' );
    			}
    			add_action('register_orphaned_schedules',array('MM_MemberMouseService','registerOrphanedSchedules'));
    		} 
		}
		
		add_action(self::$MM_SESSION_REAP,array($ce,'reapSessions'));
	}
	
	public static function cleanup()
	{
		wp_clear_scheduled_hook( self::$MM_CRON_HOOK );
	}
	
	public function performDailyTasks()
	{
		$this->checkForExpiredAccess();
		$this->checkForCanceledAccess();
		$this->checkForOverdueAccess();
		MM_ActivityLog::performCleanup();
		MM_CaptchaUtils::performCleanup();
	}
	
	public function reapSessions()
	{
  		MM_Session::sessionReap();
	}
	
	private function checkForExpiredAccess()
	{
		global $wpdb;
		
		// check memberships
		$sql = "SELECT wp_user_id FROM ".MM_TABLE_USER_DATA." WHERE status != ".MM_Status::$EXPIRED;
		$sql .= " AND expiration_date < '".MM_Utils::getCurrentTime()."' AND expiration_date != '0000-00-00 00:00:00'";
		
		$result = $wpdb->get_results($sql);
		
		foreach($result as $row)
		{
			$crntUser = new MM_User($row->wp_user_id);
		
			if($crntUser->isValid())
			{
				// get status method updates status approprirately
				$crntUser->getStatus();
			}
		}
		
		// check bundles
		$sql = "SELECT * FROM ".MM_TABLE_APPLIED_BUNDLES." WHERE ";
		$sql .= "access_type = '".MM_AppliedBundle::$ACCESS_TYPE_USER."' AND status != ".MM_Status::$EXPIRED;
		$sql .= " AND expiration_date < '".MM_Utils::getCurrentTime()."' AND expiration_date != '0000-00-00 00:00:00'";
		
		$result = $wpdb->get_results($sql);
		
		foreach($result as $row)
		{
			$crntBundle = MM_AppliedBundle::getAppliedBundle($row->access_type_id, $row->bundle_id);
		
			if($crntBundle->isValid())
			{
				// get status method updates status approprirately
				$crntBundle->getStatus();
			}
		}
	}
	
	private function checkForCanceledAccess()
	{
		global $wpdb;
		
		// check memberships
		$sql = "SELECT wp_user_id FROM ".MM_TABLE_USER_DATA." WHERE status = ".MM_Status::$PENDING_CANCELLATION;
		$sql .= " AND cancellation_date < '".MM_Utils::getCurrentTime()."' AND cancellation_date != '0000-00-00 00:00:00'";
		
		$result = $wpdb->get_results($sql);
		
		foreach($result as $row)
		{
			$crntUser = new MM_User($row->wp_user_id);
		
			if($crntUser->isValid())
			{
				// get status method updates status approprirately
				$crntUser->getStatus();
			}
		}
		
		// check bundles
		$sql = "SELECT * FROM ".MM_TABLE_APPLIED_BUNDLES." WHERE ";
		$sql .= "access_type = '".MM_AppliedBundle::$ACCESS_TYPE_USER."' AND status = ".MM_Status::$PENDING_CANCELLATION;
		$sql .= " AND cancellation_date < '".MM_Utils::getCurrentTime()."' AND cancellation_date != '0000-00-00 00:00:00'";
		
		$result = $wpdb->get_results($sql);
		
		foreach($result as $row)
		{
			$crntBundle = MM_AppliedBundle::getAppliedBundle($row->access_type_id, $row->bundle_id);
		
			if($crntBundle->isValid())
			{
				// get status method updates status approprirately
				$crntBundle->getStatus();
			}
		}
	}
	
	private function checkForOverdueAccess()
	{
		global $wpdb;
		
		$pendingOverdueSubscriptionsTable = MM_TABLE_AUTHNET_PENDING_OVERDUE_SUBSCRIPTIONS;
		//run the check only if the authnet pending subscription table was generated at some point, otherwise this will generate an error
		if ($wpdb->get_var("SHOW TABLES LIKE '{$pendingOverdueSubscriptionsTable}'") == $pendingOverdueSubscriptionsTable)
		{
			$sql = "SELECT id, order_item_id FROM {$pendingOverdueSubscriptionsTable} WHERE is_processed = 0 AND ";
			$sql .= "overdue_date < '".MM_Utils::getCurrentTime()."' AND overdue_date != '0000-00-00 00:00:00'";
			
			$result = $wpdb->get_results($sql);
			
			foreach($result as $row)
			{
				$orderItem = new MM_OrderItem($row->order_item_id);
			
				if($orderItem->isValid())
				{
					$userId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
					$user = new MM_User($userId);
					
					if($user->isValid())
					{
						$user->setStatus(MM_Status::$OVERDUE);
						$result = $user->commitStatusOnly();
						
						if(MM_Response::isSuccess($result))
						{
							MM_PaymentUtils::cancelSubscriptionForOrderItem($orderItem);
							
							$wpdb->update($pendingOverdueSubscriptionsTable,
								array('is_processed' => 1),
								array( 'ID' => $row->id ),
								array('%d'), array('%d'));
						}
					}
				}
			}
			
			// clean up any pending overdue subscriptions that are over 3 months old
			$date = date('Y-m-d', strtotime(MM_Utils::getCurrentTime().' -3 month'));
			$sql = "delete from {$pendingOverdueSubscriptionsTable} where overdue_date < '{$date}'";
			$wpdb->query($sql);
		}
	}
	
	
	public function schedulerWatchdog()
	{
	    global $wpdb;
	    
	    $locatorSQL = "SELECT sp.order_item_id,COUNT(*) AS freq FROM mm_scheduled_events se INNER JOIN ".
	                  "mm_scheduled_payments sp ON (se.id = sp.id) WHERE se.processed_date is null ".
	                  "GROUP BY sp.order_item_id HAVING freq > 1";
	    $results = $wpdb->get_results($locatorSQL);
	    foreach ($results as $reductionTarget)
	    {
	        $reductionTargetsSQL = "SELECT se.*,sp.* FROM ".MM_TABLE_SCHEDULED_EVENTS." se INNER JOIN ".MM_TABLE_SCHEDULED_PAYMENTS." sp ".
	                              "ON (se.id = sp.id) WHERE (sp.order_item_id=%s) AND (se.processed_date IS NULL) ORDER BY se.id DESC";
	        $reductionTargetData = $wpdb->get_results($wpdb->prepare($reductionTargetsSQL,$reductionTarget->order_item_id));
	        if (is_array($reductionTargetData) && (count($reductionTargetData)>1))
	        {
	            $numToReduce = (count($reductionTargetData)-1);
	            for ($i=0; $i<$numToReduce; $i++)
	            {
	                $spToReduce = new MM_ScheduledPaymentEvent($reductionTargetData[$i]->id,false);
	                $spToReduce->setData($reductionTargetData[$i]);
	                $spToReduce->setAdditionalData($reductionTargetData[$i]);
	                $spToReduce->delete(true);
	            }
	        }
	    }
	}
	
	public static function addCustomIntervalRecurrenceOptions($schedules)
	{
		// Adds the queue check interval specified below to the existing schedules.
		$schedules['queue_check_interval'] = array(
			'interval' => 1800,
			'display' => __( 'Every 30 mins' )
		);
		$schedules['session_reap_interval'] = array(
			'interval' => 300,
			'display' => __( 'Every 5 minutes' )
		);
		return $schedules;
	}
}