/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_PaymentUtils
{

	/**
	 * Adjust date for end-of-month in 'months' or 'years' context.
	 * 
	 * @dateStr (string) is the current date
	 * @interval is the period by which the recurrence occurs
	 * @frequency is either month or year 
	 * @return new date occurring $interval $frequency from the originating date.  This should account for 
	 * leap year and $frequency without the same number of days.  ex. Jan 31st monthly to Feb 28th or Annually Feb 29th 2020 to Feb 28th 2021 etc.
	 */
	public static function adjustForExceedingLastDay($dateStr, $interval=1, $frequency="month")
	{ 
		$date = new DateTime($dateStr); 
		$start = $date->format('j'); 
		$date->modify("+{$interval} {$frequency}"); 
		$end = $date->format('j');

		/// If the day of the month previous to incrementing
		/// is not the same as the day after incrementing this means
		/// that we may have exceeded the last day of the current month i.e. 31st of February would go to 3rd 
		/// of March.  Now we have to adjust.	
		if ($start != $end)
		{ 
			$date->modify('last day of last month');
		} 
		else
		{
			//// If the date of today (current scheduled date) is, in fact, the last
			//// day of the month, the next scheduled date should also reflect last day.
			if(Date('t', strtotime($dateStr)) == Date("d", strtotime($dateStr)))
			{
				$date->modify('last day of this month');
			}
		}

		return $date; 
	} 
    
    /**
     * This method is responsible for checking if duplicate subscriptions are on and if the given product is one.
     *
     * @param MM_User $user the user making the purchase
     * @param $productId is the product related to the subscription
     * @return true if dup subscriptions are on and this is one, false otherwise.
     */
    public static function isProductADuplicateSubscription(MM_User $user, $productId)
    {
        $allowDuplicateSubscriptions = (MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ALLOW_DUPLICATE_SUBSCRIPTIONS) == "1") ? true : false;
        if($allowDuplicateSubscriptions)
        {
            $product = new MM_Product($productId);
            if($product->isRecurring())
            {
                $userProductIds = $user->getProductsPurchased(array(0));
                if(in_array(intval($productId),$userProductIds))
                {
                    return true;
                }
            }
        }
        return false;
    }
    
	/**
	 * This method is responsible for calculating the unused amount on a member's membership level subscription
	 * 
	 * @param MM_User $user the user making the purchase
	 * @return number the proration amount
	 */
	public static function calculateMembershipSubscriptionCredit(MM_User $user)
	{
	    
		if($user->isValid() && MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ENABLE_MEMBERSHIP_PRORATION) == "1")
		{
			// get member's active subscriptions
			$membershipSubscriptions = $user->getActiveMembershipSubscriptions();
			
			foreach($membershipSubscriptions as $membershipSubscription)
			{
				$orderItem = new MM_OrderItem($membershipSubscription["orderItemId"]);
				
				if($orderItem->isValid())
				{
					global $wpdb;
					
					// lookup the last transaction associated with the active subscription
					$transTypePayment = MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT;
					$transTypeRecurringPayment = MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT;
					$sql = "SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE order_item_id = {$orderItem->getId()} AND ";
					$sql .= "transaction_type IN ({$transTypePayment}, {$transTypeRecurringPayment}) ";
					$sql .= "ORDER BY transaction_date DESC LIMIT 1;";
						
					$result = $wpdb->get_row($sql);
					if($result)
					{
						$lastBillDate = $result->transaction_date;
						$lastBillAmount = abs($result->amount);
						$subscriptionLength = $orderItem->getRebillPeriod();
						$rebillFrequency = $orderItem->getRebillFrequency();
						
						switch($rebillFrequency)
						{		
							case "weeks":
								$subscriptionLength = $subscriptionLength * 7;
								break;
								
							case "months":
								$subscriptionLength = $subscriptionLength * 30;
								break;
								
							case "years":
								$subscriptionLength = $subscriptionLength * 365;
								break;				
						}
						
						// calculate the credit available based on the number of days the member has used so far
						$daysUsed = floor((time() - strtotime($lastBillDate)) / (60*60*24));
						$dailyPrice = $lastBillAmount / $subscriptionLength;
						$totalCredit = ($subscriptionLength - $daysUsed) * $dailyPrice;
						
						if($totalCredit > 0)
						{
							return $totalCredit;
						}
					}
				}
				
				break; // assume one membership subscription only
			}
		}
		
		return 0;
	} 
	
	/**
	 * This method is resonsible for determining if a proration should be applied to the order, calculates it and 
	 * applies it to the order
	 * 
	 * @param MM_Order $order the order to apply a proration to
	 */
	public static function applyProration(MM_Order $order,$virtual=false)
	{
		if(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ENABLE_MEMBERSHIP_PRORATION) == "1")
		{
			$user = $order->getCustomer();
			$orderProductItems = $order->getProducts();
			
			$product = null;
			foreach ($orderProductItems as $orderProductItem)
			{
				$product = new MM_Product($orderProductItem->getItemId());
				break;
			}
			
			if($user->isValid() && ($product instanceof MM_Product) && $product->isValid())
			{
				// check if product is associated with a membership level and is a subscription
				$newMembershipLevel = $product->getAssociatedMembership();
				
				// check if customer is on same membership level but is now 
				// obtaining a new product id.  If so, proration should still occur. 
				$customersProducts = $user->getProductsPurchased(array(0));
 
				if($newMembershipLevel->isValid() 
							&& ($newMembershipLevel->getId() != $user->getMembershipId() 
											|| !in_array($product->getId(),$customersProducts)) 
							&& $product->isRecurring())
				{
					$prorationAmount = MM_PaymentUtils::calculateMembershipSubscriptionCredit($user);
					
					if($prorationAmount > 0)
					{ 
						// add proration item to the order
						$item = new MM_OrderItem();
						$item->setItemType(MM_OrderItem::$ORDER_ITEM_TYPE_PRORATION);
						$item->setItemId(null);
						$item->setDescription($newMembershipLevel->getName());
						$item->setQuantity(1);
						$item->setAmount($prorationAmount);
						$order->addProration($item);
						if (!$virtual)
						{
						  $order->commitData();
						}
					}
				}
			}
		}
	}
	
	/**
	 * This method is responsible for looking up the order item associated with the user and access 
	 * information passed and cancelling the associated subscription if there is one.
	 * 
	 * @param MM_User $user the user to cancel the subscription for
	 * @param Object $accessObject this will either be an instance of MM_MembershipLevel or MM_Bundle and represents the access right to cancel
	 * @return MM_Response a response object indicating if the operation went through successfully or not. If there is no subscription attached to $accessObject, success is returned
	 */
	public static function cancelSubscription(MM_User $user, $accessObject)
	{
		$accessType = "";
		$accessTypeId = 0;
		$canceledOrderItems = array();
		$executionStatus = new MM_Response();
	
		if($user->isValid())
		{
			if($accessObject instanceof MM_MembershipLevel)
			{
				$accessType = MM_AccessControlEngine::$ACCESS_TYPE_MEMBERSHIP;
				$accessTypeId = $accessObject->getId();
			}
			else if($accessObject instanceof MM_Bundle)
			{
				$accessType = MM_AccessControlEngine::$ACCESS_TYPE_BUNDLE;
				$accessTypeId = $accessObject->getId();
			}
			else
			{
				$executionStatus = new MM_Response("Error cancelling subscription. Invalid access object.", MM_Response::$ERROR);
			}
			
			if(MM_Response::isSuccess($executionStatus))
			{
				$items = MM_OrderItemAccess::getOrderItemByAccess($user->getId(), $accessType, $accessTypeId);
				
				foreach($items as $orderItemAccess)
				{
					if($orderItemAccess->isValid())
					{
						$orderItem = new MM_OrderItem($orderItemAccess->getOrderItemId());
						
						if($orderItem->isValid())
						{
							$order = new MM_Order($orderItem->getOrderId());
							
							if($order->isValid())
							{
								$paymentService = $order->getPaymentMethod();
								
								if(!is_null($paymentService))
								{
									if($orderItem->isRecurring() && ($orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING_CANCELLED))
									{
										$paymentResponse = $paymentService->cancelSubscription($orderItem);
										
										if(MM_PaymentServiceResponse::isSuccess($paymentResponse))
										{
											do_action(MM_Event::$BILLING_SUBSCRIPTION_CANCELED, MM_Event::packageOrderData($order->getCustomer()->getId(), $order->getId(), $orderItem->getId()));
											
											$canceledOrderItems[] = $orderItem->getId();
											$executionStatus = new MM_Response($paymentResponse->getMessage(), MM_Response::$SUCCESS);
											$executionStatus->addData("orderItems", $canceledOrderItems);
										}
										else
										{
											$executionStatus = new MM_Response($paymentResponse->getMessage(), MM_Response::$ERROR);
										}
									}
									else
									{
										// no subscription to cancel
										$executionStatus = new MM_Response();
									}
								}
								else
								{
									$executionStatus = new MM_Response("Error cancelling subscription. Invalid payment service.", MM_Response::$ERROR);
								}
							}
							else
							{
								$executionStatus = new MM_Response("Error cancelling subscription. Invalid order.", MM_Response::$ERROR);
							}
						}
						else
						{
							$executionStatus = new MM_Response("Error cancelling subscription. Invalid order item.", MM_Response::$ERROR);
						}
					}
					else
					{
						// no subscription to cancel
						$executionStatus = new MM_Response();
					}
				}
				
				return $executionStatus;
			}
			else
			{
				return $executionStatus;
			}
		}
		else
		{
			return new MM_Response("Error cancelling subscription. Invalid user.", MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * This method is responsible for cancelling a subscription associated with a particular order item.
	 *
	 * @param MM_OrderItem $orderItem the order item to cancel subscription for
	 * @return MM_Response a response object indicating if the operation went through successfully or not
	 */
	public static function cancelSubscriptionForOrderItem(MM_OrderItem $orderItem, $hardCancel=false)
	{
		$executionStatus = new MM_Response();
	
		if($orderItem->isValid())
		{
			$order = new MM_Order($orderItem->getOrderId());

			if($order->isValid())
			{
				$paymentService = $order->getPaymentMethod();
					
				if(!is_null($paymentService))
				{
					if($orderItem->isRecurring() && ($orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING_CANCELLED))
					{
						$paymentResponse = null;
						if($hardCancel)
						{
							$paymentResponse = $paymentService->forceCancelSubscription($orderItem);
						}
						else
						{
							$paymentResponse = $paymentService->cancelSubscription($orderItem);
						}
						
						if(MM_PaymentServiceResponse::isSuccess($paymentResponse))
						{	
							do_action(MM_Event::$BILLING_SUBSCRIPTION_CANCELED, MM_Event::packageOrderData($order->getCustomer()->getId(), $order->getId(), $orderItem->getId()));
							
							$executionStatus = new MM_Response($paymentResponse->getMessage(), MM_Response::$SUCCESS);
						}
						else
						{
							$executionStatus = new MM_Response($paymentResponse->getMessage(), MM_Response::$ERROR);
						}
					}
					else
					{
						// no subscription to cancel
						$executionStatus = new MM_Response();
					}
				}
				else
				{
					$executionStatus = new MM_Response("Error cancelling subscription. Invalid payment service.", MM_Response::$ERROR);
				}
			}
			else
			{
				$executionStatus = new MM_Response("Error cancelling subscription. Invalid order.", MM_Response::$ERROR);
			}
			
			return $executionStatus;
		}
		else
		{
			$executionStatus = new MM_Response("Error cancelling subscription. Invalid order item.", MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * This method is responsible for updating the the billing details associated with a particular order item.
	 *
	 * @param MM_OrderItem $orderItem the order item to update the billing details for
	 * @param MM_CardInfo $cardInfo the credit card info to use on the subscription
	 * @param MM_CustomerAddress $billingAddress the billing address to use on the subscription
	 * @return MM_Response a response object indicating if the operation went through successfully or not
	 */
	public static function updateSubscriptionBillingInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null)
	{
		$executionStatus = new MM_Response();
	
		if($orderItem->isValid())
		{
			//create utilizes the object cache
			$order = MM_Order::create($orderItem->getOrderId());

			if($order->isValid())
			{
				$paymentService = $order->getPaymentMethod();
					
				if(!is_null($paymentService))
				{
					if($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING
						|| $orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
					{
						$paymentResponse = $paymentService->updateSubscriptionInfo($orderItem, $cardInfo, $billingAddress);
						
						if(MM_PaymentServiceResponse::isSuccess($paymentResponse))
						{
								$order = new MM_Order($orderItem->getOrderId());
								
								if($order->isValid())
								{
									do_action(MM_Event::$BILLING_SUBSCRIPTION_UPDATED, MM_Event::packageOrderData($order->getCustomer()->getId(), $order->getId(), $orderItem->getId()));
								}
								
								$executionStatus = new MM_Response($paymentResponse->getMessage(), MM_Response::$SUCCESS);
						}
						else
						{
							$executionStatus = new MM_Response($paymentResponse->getMessage(), MM_Response::$ERROR);
						}
					}
					else
					{
						// no subscription to update
						$executionStatus = new MM_Response();
					}
				}
				else
				{
					$executionStatus = new MM_Response("Error updating billing information. Invalid payment service.", MM_Response::$ERROR);
				}
			}
			else
			{
				$executionStatus = new MM_Response("Error updating billing information. Invalid order.", MM_Response::$ERROR);
			}
			
			return $executionStatus;
		}
		else
		{
			$executionStatus = new MM_Response("Error updating subscription. Invalid order item.", MM_Response::$ERROR);
		}
	}
}
