/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_CaptchaUtils
{
    public static $CAPTCHA_VERSION_3 = "3";
    public static $CAPTCHA_VERSION_2 = "2";
    public static $CAPTCHA_RESPONSE_CHECKOUT_FORM_ID = "mm_grtoken";
    public static $CAPTCHA_SESSION_KEY = "mm_grsession";
    public static $CAPTCHA_ACTION_NAME_FORM_ID = "mm_graction";
    public static $CAPTCHA_DEFAULT_THRESHOLD = 0.5;
    public static $CAPTCHA_DEFAULT_ACTION_NAME = "mmcheckout";
    public static $CAPTCHA_DEFAULT_CLEANUP_INTERVAL = "30";
    public static $CAPTCHA_DEFAULT_ERROR_MESSAGE = "reCAPTCHA check failed. Try again.";
    
    /**
     * This function verifies the reCaptcha response 
     * 
     * @param Array $requestData the data received from the form
     * @param boolean $useSession if true, will use the session to store results and prevent the same captcha from attempting to validate twice
     * 
     * @return Bool return false if verification failed. true is verification succeeded 
     */
    public static function verify(Array $requestData, $useSession=false):Bool
    {
        switch(self::getCaptchaVersion())
        {
            case MM_CaptchaUtils::$CAPTCHA_VERSION_3:
                if(isset($requestData[self::$CAPTCHA_RESPONSE_CHECKOUT_FORM_ID]))
                {
                    $sessionKey = self::$CAPTCHA_SESSION_KEY."_".$requestData[self::$CAPTCHA_RESPONSE_CHECKOUT_FORM_ID];
                    $privateKey = self::getSecretKey();
                    $isSuccess = false;
                    
                    //check session, if configured to do so
                    if ($useSession)
                    {    
                        if (MM_Session::value($sessionKey) == true)
                        {
                            return true;
                        }
                    }
                    
                    // prepare data for logging
                    $logData = [];
                    $logData["score"] = 0;
                    $logData["actionName"] = "";
                    $logData["ipAddress"] = null;
                    $logData["membershipLevelId"] = (isset($requestData["mm_membership_level_id"])) ? $requestData["mm_membership_level_id"]:0;
                    $logData["isFree"] = (isset($requestData["mm_is_free"])) ? $requestData["mm_is_free"]:0;
                    $logData["productId"] = (isset($requestData["mm_product_id"])) ? $requestData["mm_product_id"]:0;
                    $logData["firstName"] = (isset($requestData["mm_field_first_name"])) ? $requestData["mm_field_first_name"]:null;
                    $logData["lastName"] = (isset($requestData["mm_field_last_name"])) ? $requestData["mm_field_last_name"]:null;
                    $logData["email"] = (isset($requestData["mm_field_email"])) ? $requestData["mm_field_email"]:null;
                    $logData["checkoutUrl"] = (isset($requestData["mm_checkout_url"])) ? $requestData["mm_checkout_url"]:null;
                    
                    // prepare parameters to pass to Google reCAPTCHA
                    $params = [];
                    $params["secret"] = self::getSecretKey();
                    $params["response"] = $requestData[MM_CaptchaUtils::$CAPTCHA_RESPONSE_CHECKOUT_FORM_ID];
                    $params["remoteip"] = MM_Utils::getClientIPAddress();
                    
                    // perform verification
                    $rawResponse = MM_Utils::sendRequest("https://www.google.com/recaptcha/api/siteverify", $params, 1);
                    $jsonResponse = json_decode($rawResponse);
                    
                    if(isset($jsonResponse) && isset($jsonResponse->{"success"}) && isset($jsonResponse->{"score"}) && isset($jsonResponse->{"action"}))
                    {
                        $logData["score"] = floatval($jsonResponse->{"score"});
                        $logData["actionName"] = $jsonResponse->{"action"};
                        $logData["ipAddress"] = $params["remoteip"];
                        
                        // verify score is greater than the threshold and action name in result is the same as the 
                        // one sent in the request
                        if(($jsonResponse->{"success"} == true) 
                            && (floatval($jsonResponse->{"score"}) >= MM_CaptchaUtils::getScoreThreshold()) 
                            && ($jsonResponse->{"action"} == MM_CaptchaUtils::getActionName()))
                        {
                            $isSuccess = true;
                            if ($useSession)
                            {
                                MM_Session::value($sessionKey,true);
                            }
                        }
                    }
                    
                    // log results
                    $logData["isAccepted"] = ($isSuccess == true) ? 1:0;
                    self::logResult($rawResponse, $logData);
                    
                    return $isSuccess;
                }
                else
                {
                    return false;
                }
                break;
                
            case MM_CaptchaUtils::$CAPTCHA_VERSION_2:
                if(isset($requestData["g-recaptcha-response"]))
                {
                    $sessionKey = self::$CAPTCHA_SESSION_KEY."_".$requestData["g-recaptcha-response"];
                    if ($useSession)
                    {
                        
                        $validated = MM_Session::value($sessionKey);
                        if ($validated == true)
                        {
                            return true;
                        }
                    }
                    require_once MM_PLUGIN_ABSPATH . '/lib/recaptcha/autoload.php';
                    
                    $privateKey = self::getSecretKey();
                    $recaptcha = new \ReCaptcha\ReCaptcha($privateKey);
                    
                    $resp = $recaptcha->verify($requestData["g-recaptcha-response"], MM_Utils::getClientIPAddress());
                    
                    if(!$resp->isSuccess())
                    {
                        return false;
                    }
                    else 
                    {
                        if ($useSession)
                        {
                            MM_Session::value($sessionKey,true);
                        }
                        return true;
                    }
                }
                else 
                {
                    return false;
                }
                break;
        }
        
        return false;
    }
    
    
    /**
     * This function outputs the javascript library to appear before the form
     *
     * @return String
     */
    public static function outputPreFormHtml():String
    {
        $outputStr = "";
        $siteKey = self::getSiteKey();
        $privateKey = self::getSecretKey();
        $captchaVersion = MM_CaptchaUtils::getCaptchaVersion();
        
        if(!empty($siteKey) && !empty($privateKey) && !empty($captchaVersion))
        {
            switch($captchaVersion)
            {
                case MM_CaptchaUtils::$CAPTCHA_VERSION_3:
                    
                    $outputStr .= "
                                        <script src=\"https://www.google.com/recaptcha/api.js?render={$siteKey}\"></script>
                                  ";
                    
                    if(self::hideCaptchaBadge())
                    {
                        $outputStr .= "
                                        <style>
                                            .grecaptcha-badge { visibility: hidden; }
                                        </style>
                                  ";
                    }
                    
                    break;
                    
                case MM_CaptchaUtils::$CAPTCHA_VERSION_2:
                    
                    $outputStr .= "
        								<script type=\"text/javascript\" src=\"https://www.google.com/recaptcha/api.js\"></script>
        						  ";
                    break;
                    
                default:
                    $outputStr .= "Invalid Captcha Configuration. Check settings (checkout settings > captcha) or remove the captcha SmartTag from the form.";
                    break;
            }
        }
        else
        {
            $outputStr .= "Invalid Captcha Configuration. Check settings (checkout settings > captcha) or remove the captcha SmartTag from the form.";
        }
        
        return $outputStr;
    }
    
    
    /**
     * This function outputs the hidden fields necessary for passing data to javascript and server side
     *
     * @return String
     */
    public static function outputFormHiddenFields():String
    {
        $outputStr = "";
        $siteKey = self::getSiteKey();
        $captchaVersion = MM_CaptchaUtils::getCaptchaVersion();
        
        if(!empty($siteKey) && !empty($captchaVersion))
        {
            switch($captchaVersion)
            {
                case MM_CaptchaUtils::$CAPTCHA_VERSION_3:
                    
                    $outputStr .= "<input type='hidden' id='mm_grsk' value='".$siteKey."' />";
                    $outputStr .= "<input type='hidden' id='mm_grtok' name='".self::$CAPTCHA_RESPONSE_CHECKOUT_FORM_ID."' value='' />";
                    $outputStr .= "<input type='hidden' id='mm_graction' name='".self::$CAPTCHA_ACTION_NAME_FORM_ID."' value='".self::getActionName()."' />";
                    
                    break;
            }
        }
        
        return $outputStr;
    }
    
    
    /**
     * This function outputs the HTML for the captcha field
     * 
     * @return String
     */
    public static function outputCaptchaFieldHtml():String
    {
        $outputStr = "";
        $siteKey = self::getSiteKey();
        $privateKey = self::getSecretKey();
        $captchaVersion = MM_CaptchaUtils::getCaptchaVersion();
        
        if(!empty($siteKey) && !empty($privateKey) && !empty($captchaVersion))
        {
            switch($captchaVersion)
            {
                case MM_CaptchaUtils::$CAPTCHA_VERSION_2:
            
                    $outputStr .= "
        								<div class=\"g-recaptcha\" data-sitekey=\"{$siteKey}\"></div>
        						  ";
                    break;
                    
                default:   
                    $outputStr = "";
                    break;
            }
        }
        else
        {
            $outputStr .= "Invalid Captcha Configuration. Check settings (checkout settings > captcha) or remove the captcha SmartTag from the form.";
        }
        
        return $outputStr;
    }
    
    
    /**
     * Logs a captcha result. 
     *
     * @param object $rawResponse This is the raw JSON response received from the reCAPTCHA service
     * @param array $request This is an array containing the variables to insert into the table
     *
     * @return MM_Response containing the id of the row in the IPN log table if successful, or an error message if failed
     */
    protected static function logResult($rawResponse, $data)
    {
        global $wpdb;
        
        $insertData = array(
            "score"=>$data["score"],
            "action_name" => $data["actionName"],
            "first_name" => $data["firstName"],
            "last_name" => $data["lastName"],
            "email" => $data["email"],
            "checkout_url" => $data["checkoutUrl"],
            "ip_address" => $data["ipAddress"],
            "is_accepted" => $data["isAccepted"],
            "is_free" => $data["isFree"],
            "membership_level_id" => $data["membershipLevelId"],
            "product_id" => $data["productId"],
            "raw_response"=>serialize($rawResponse)
        );
        
        $res = $wpdb->insert(MM_TABLE_CAPTCHA_LOG, $insertData);
        if ($res == false)
        {
            return new MM_Response("Error logging captcha result in database",MM_Response::$ERROR);
        }
        return new MM_Response($wpdb->insert_id);
    }
    
    
    /**
     * This method cleans up the captcha log according to the options set by the user.
     */
    public static function performCleanup()
    {
        if(self::isCaptchaEnabled())
        {
            $cleanupInterval = self::getCaptchaLogCleanupInterval();
            
            global $wpdb;
            $sql = "DELETE FROM ".MM_TABLE_CAPTCHA_LOG." WHERE date_added < (now() - INTERVAL {$cleanupInterval} day);";
            $wpdb->query($sql);
        }
    }
    
    
    /**
     * This function searches the content and determines if a captcha form field SmartTag is present.
     *
     * @param String $content
     * @return boolean true if $content passed has a captcha SmartTag in it. false otherwise.
     */
    public static function hasCaptchaSmartTag(String $content):Bool
    {
        $hasCaptcha = false;
        
        if(!empty($content))
        {
            $hasCaptcha = preg_match("/\[\s*mm_form_field\s+(.*)(type=['\"]input['\"]){0,1}(name=['\"]captcha['\"])(.*)(type=['\"]input['\"]){0,1}(.*)\]/i",$content)?true:false;
        }
        
        return $hasCaptcha;
    }
    
    
    /**
     * This function sets the captcha enabled option in the database appropriately based on the boolean passed.
     *
     * @param Bool $doEnable indicates if captcha should be enabled or not
     */
    public static function enableCaptcha(Bool $doEnable)
    {
        if($doEnable)
        {
            MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ENABLED,1);
        }
        else
        {
            MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ENABLED,0);
        }
    }
    
    /**
     * This funtion returns true if the captcha enabled option is set to true in the database
     *
     * @return bool
     */
    public static function isCaptchaEnabled():Bool
    {
        return MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ENABLED) == "1";
    }
    
    
    /**
     * This function sets the option for indicating if the captcha badge should be hidden
     *
     * @param Bool $doHide indicates if captcha badge should be hidden or not
     */
    public static function setHideCaptchaBadge(Bool $doHide)
    {
        if($doHide)
        {
            MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_HIDE_CAPTCHA_BADGE,1);
        }
        else
        {
            MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_HIDE_CAPTCHA_BADGE,0);
        }
    }
    
    /**
     * This funtion returns true if the captcha badge should be hidden
     *
     * @return bool
     */
    public static function hideCaptchaBadge():Bool
    {
        return MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_HIDE_CAPTCHA_BADGE) == "1";
    }
    
    
    /**
     * This function sets the error message
     *
     * @param msg the error message
     */
    public static function setErrorMessage(String $msg)
    {
        MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ERROR_MESSAGE, $msg);
    }
    
    
    /**
     * This function returns the error message to use based on the setting from checkout settings > captcha
     * @return String
     */
    public static function getErrorMessage():String
    {
        $errorMessage = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ERROR_MESSAGE);
        
        if(empty($errorMessage))
        {
            $errorMessage = MM_CaptchaUtils::$CAPTCHA_DEFAULT_ERROR_MESSAGE;
            self::setErrorMessage($errorMessage);
        }
        
        return $errorMessage;
    }
    
    
    /**
     * This function sets the captcha version
     *
     * @param ver the captcha version
     */
    public static function setCaptchaVersion(String $ver)
    {
        MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_VERSION, $ver);
    }
    
    
    /**
     * This function returns the version of captcha running based on the setting from checkout settings > captcha
     * @return String
     */
    public static function getCaptchaVersion():String
    {
        return MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_VERSION);
    }
    
    
    /**
     * This function sets the signup thresholdS for captcha
     *
     * @param val the threshold value
     */
    public static function setScoreThreshold(float $val)
    {
        // $val must be a float between 0 and 1
        if(is_float($val) && floatval($val) >= 0 && floatval($val) <= 1)
        {
            MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_SCORE_THRESHOLD, $val);
        }
    }
    
    
    /**
     * This function returns the score threshold for captcha based on the setting from checkout settings > captcha
     *
     * @return float
     */
    public static function getScoreThreshold():float
    {
        $threshold = floatval(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_SCORE_THRESHOLD));
        
        if(!empty($threshold) && is_float($threshold) && floatval($threshold) >= 0 && floatval($threshold) <= 1)
        {
            // threshold is valid, do nothing
        }
        else
        {
            $threshold = MM_CaptchaUtils::$CAPTCHA_DEFAULT_THRESHOLD;
            self::setScoreThreshold($threshold);
        }
        
        return $threshold;
    }
    
    
    /**
     * This function sets the action name for captcha
     *
     * @param name the action name
     */
    public static function setActionName(String $name)
    {
        // $name must only contain alphanumeric or slashes
        if(preg_match("/^[a-zA-Z0-9\\/]+$/", $name))
        {
            MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ACTION_NAME, $name);
        }
    }
    
    
    /**
     * This function returns the action name for captcha based on the setting from checkout settings > captcha
     *
     * @return String
     */
    public static function getActionName():String
    {
        $actionName = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ACTION_NAME);
        
        if(empty($actionName))
        {
            $actionName = MM_CaptchaUtils::$CAPTCHA_DEFAULT_ACTION_NAME;
            self::setActionName($actionName);
        }
        
        return $actionName;
    }
    
    
    /**
     * This function sets the captcha version
     *
     * @param ver the captcha version
     */
    public static function setCaptchaLogCleanupInterval(int $val)
    {
        MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_LOG_CLEANUP_INTERVAL, $val);
    }
    
    
    /**
     * This function returns the captcha log cleanup interval based on the setting from checkout settings > captcha
     * @return int
     */
    public static function getCaptchaLogCleanupInterval():int
    {
        $cleanupInterval = intval(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_LOG_CLEANUP_INTERVAL));
        
        if($cleanupInterval === false || $cleanupInterval === "" || $cleanupInterval <= 0)
        {
            $cleanupInterval = intval(MM_CaptchaUtils::$CAPTCHA_DEFAULT_CLEANUP_INTERVAL);
            self::setCaptchaLogCleanupInterval($cleanupInterval);
        }
        
        return $cleanupInterval;
    }
    
    
    /**
     * This function sets the captcha site key
     *
     * @param key the site key
     */
    public static function setSiteKey(String $key)
    {
        MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_KEY, $key);
    }
    
    
    /**
     * This function returns the captcha site key based on the setting from checkout settings > captcha
     * @return String
     */
    public static function getSiteKey():String
    {
        return MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_KEY);
    }
    
    
    /**
     * This function sets the captcha secret key
     *
     * @param key the site key
     */
    public static function setSecretKey(String $key)
    {
        MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_PRIVATE_KEY, $key);
    }
    
    
    /**
     * This function returns the captcha secret key based on the setting from checkout settings > captcha
     * @return String
     */
    public static function getSecretKey():String
    {
        return MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_PRIVATE_KEY);
    }
}
