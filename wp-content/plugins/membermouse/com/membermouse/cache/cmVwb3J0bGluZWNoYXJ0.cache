/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ReportLineChart extends MM_ReportVisualElement
{
	//the name of the field in the source data that will be charted against the category axis (x-axis)
	protected $categoryField = "category";
	
	//the name of the field in the source data that will be charted against the value axis (y-axis)
	protected $valueField = "value";
	
	//the title of the chart (displayed)
	protected $title = "";
	
	//must be set to true if the category axis (x-axis) uses date values. 
	protected $categoryAxisIsDates = false;
	
	//if the the category axis uses dates for the source data, Dateformat must be set to match the format of the dates in the source data
	protected $dateFormat = "YYYY-MM-DD";
	
	//describes the scale of the data being supplied to the graph, so it can be rendered correctly. See the resolution constants below
	protected $resolution = "";
	
	//the threshold after which a scrollbar is added to the line chart
	protected $scrollThreshold = 25;

	//indicates whether the value axis is currency
	protected $currencyValues = false;
	
	//if the value axis is a currency value, this field denotes which
	protected $currencyType = "";
	
	//the title for the value axis (optional)
	protected $valueAxisTitle = "";
	
	
	//resolution constants
	public static $HOURS  = "hours";
	public static $DAYS   = "days";
	public static $WEEKS  = "weeks";
	public static $MONTHS = "months";	
	public static $YEARS  = "years";
	
	public function __construct($container = "", $directives = "") 
	{
		$this->model = array();
		$this->setResolution(self::$MONTHS);
		parent::__construct($container,$directives);
	}

	
	public static function getJavascriptDependencies()
	{
		return array (
				MM_PLUGIN_URL."/resources/js/amcharts/amcharts/amcharts.js",
				MM_PLUGIN_URL."/resources/js/amcharts/amcharts/serial.js" 
		);
	}


	public function render(MM_ReportCategoryValueModel $model = null)
	{
		if (!is_null($model))
		{
			$this->addModel($model);
		}
		
		$output = "";
		if (!empty($this->container) && is_array($this->model) && (count($this->model) > 0))
		{
			//first generate the graph code for the lines
			$lc = 0; //line counter (as in # of lines on the chart)
			$chartData = array();
			$graphArray = array();
			foreach ($this->model as $lineModel)
			{
				$lc++;
				$lineColor = $this->getColorForPosition($lc);
				$graphCode   = "{\n";
				if ($this->currencyValues)
				{
					$graphCode  .= "	'balloonText': '<b>[[formatted_value_{$lc}]]</b>',\n";
				}
				$graphCode  .= "	'bullet': 'round',\n";
				$graphCode  .= "	'type':'smoothedLine',\n";
				$graphCode  .= "	'id': '{$this->container}_graph{$lc}',\n";
				$graphCode  .= "    'lineColor':'{$lineColor}',\n";
				if ($lineModel->getTitle() != "")
				{
				    $title = addslashes($lineModel->getTitle());
					$graphCode  .= "	'title': '{$title}',\n";
				}
				if ($this->currencyValues)
				{
					$graphCode  .= "	'legendValueText': '[[formatted_value_{$lc}]]',\n";
				}
				$graphCode  .= "	'valueField': '{$this->valueField}{$lc}'\n";
				$graphCode .= "}\n";
				$graphArray[] = $graphCode;
			
				$tmpValues = $lineModel->getValues();
				$metaOverride = array('postfix_iso'=>false); //in case its needed in the currency formatting below
				foreach ($tmpValues as $tmpPair)
				{
					//$chartData[] = array("{$this->categoryField}"=>$tmpPair['category'], "{$this->valueField}{$lc}"=>$tmpPair['value']);
					$chartData[$tmpPair['category']]["{$this->categoryField}"] = $tmpPair['category'];
					$chartData[$tmpPair['category']]["{$this->valueField}{$lc}"] = $tmpPair['value'];
					if ($this->currencyValues)
					{
						$chartData[$tmpPair['category']]["formatted_value_{$lc}"] = html_entity_decode(_mmof($tmpPair['value'],$this->currencyType,$metaOverride),ENT_COMPAT,"UTF-8");
					}
				}
			}
			$graphCode = implode(",",$graphArray);
			
			$jsonData = json_encode(array_values($chartData));
			$output .= "<script type='text/javascript'>\n";
			$output .= "jQuery(function() {\n";
			$output .= "var {$this->container}_chart = AmCharts.makeChart('{$this->container}', {\n";
			$output .= "'type': 'serial',\n";
			//$output .= "'startDuration': 0.3,\n";
			$output .= "'pathToImages': '".MM_PLUGIN_URL."/resources/js/amcharts/amcharts/images/',\n";
			$output .= "'categoryField': '{$this->categoryField}',\n";
			$parseDates = "false";
			if ($this->categoryAxisIsDates)
			{
				$parseDates = "true";
				$output .= "'dataDateFormat': '{$this->dateFormat}',\n";
			}
			$output .= "'categoryAxis': {\n";
			if (empty($this->resolution))
			{
				$output .= "'minPeriod': '{$this->resolution}',\n";
			}
			$output .= "'parseDates': {$parseDates}\n";
			$output .= "},\n";
			$output .= "'chartCursor': {oneBalloonOnly:true},\n";
			$output .= "'chartScrollbar': {},\n";
			$output .= "'trendLines': [],\n";
			$output .= "'graphs': [\n";
			$output .= $graphCode;
			$output .= "],\n";
			$output .= "'guides': [],\n";
			$output .= "'valueAxes': [\n";
			$output .= "{\n";
			$output .= "	'id': 'ValueAxis-1',\n";
			if (!empty($this->valueAxisTitle))
			{
				$output .= "	'title': '{$this->valueAxisTitle}'\n";
			}
			$output .= "}\n";
			$output .= "],\n";
			$output .= "'allLabels': [],\n";
			$output .= "'balloon': {},\n";
			$output .= "'legend': {\n";
			//$output .= "'useGraphSettings': true\n";
			$output .= "},\n";
			if (!empty($this->title)) 
			{
				$output .= "'titles': [\n";
				$output .= "{\n";
				$output .= "	'id': 'Title-1',\n";
				$output .= "	'size': 15,\n";
				$output .= "	'text': '{$this->title}'\n";
				$output .= "}\n";
				$output .= "],\n";
			}
			$output .= "'dataProvider': {$jsonData}\n";
			$output .= "});\n";
			$output .= "});\n";
			$output .= "</script>\n";
		}
		return $output;
	}


	public function getCategoryField()
	{
		return $this->categoryField;
	}


	public function setCategoryField($categoryField)
	{
		$this->categoryField = $categoryField;
	}


	public function getValueField()
	{
		return $this->valueField;
	}


	public function setValueField($valueField)
	{
		$this->valueField = $valueField;
		return $this;
	}


	public function getTitle()
	{
		return $this->title;
	}


	public function setTitle($title)
	{
		$this->title = $title;
		return $this;
	}
	
	
	/**
	 * This function sets the model that will be used for one of the lines on the graph
	 * @override
	 */
	public function setModel($model)
	{
		if ($model instanceof MM_ReportCategoryValueModel)
		{
			$this->model = array($model);
		}
	}
	
	
	public function addModel($model)
	{
		if ($model instanceof MM_ReportCategoryValueModel)
		{
			$this->model[] = $model;
		}
	}
	
	
	public function getCategoriesAreDates() 
	{
		return $this->categoryAxisIsDates;
	}
	
	
	public function setCategoriesAreDates($categoriesAreDates) 
	{
		$this->categoryAxisIsDates = $categoriesAreDates;
	}
	
	
	public function getDateFormat() 
	{
		return $this->dateFormat;
	}
	
	
	public function setDateFormat($dateFormat) 
	{
		$this->dateFormat = $dateFormat;
	}
	
	
	public function getResolution() 
	{
		return $this->resolution;
	}
	
	
	public function setResolution($resolutionUnit,$interval=1) 
	{
		switch ($resolutionUnit) 
		{
			case self::$HOURS:
				$tmpUnit = "hh";
				break;
			case self::$DAYS:
				$tmpUnit = "DD";
				break;
			case self::$WEEKS:
				$interval *= 7;
				$tmpUnit = "DD";
				break;
			case self::$MONTHS:
				$tmpUnit = "MM";
				break;
			case self::$YEARS:
				$tmpUnit = "YYYY";
				break;
			case self::$MONTHS:
			default:
				$tmpUnit = "MM";
				break;	
		}
		$this->resolution = (intval($interval) > 1)?"{$interval}{$tmpUnit}":$tmpUnit;
	}
	
	
	public function getScrollThreshold() 
	{
		return $this->scrollThreshold;
	}
	
	
	public function setScrollThreshold($scrollThreshold) 
	{
		$this->scrollThreshold = $scrollThreshold;
	}


	public function getCurrencyValues()
	{
		return $this->currencyValues;
	}


	public function setCurrencyValues($currencyValues)
	{
		$this->currencyValues = $currencyValues;
	}


	public function getCurrencyType()
	{
		return $this->currencyType;
	}


	public function setCurrencyType($currencyType)
	{
		$this->currencyType = $currencyType;
	}


	public function getValueAxisTitle()
	{
		return $this->valueAxisTitle;
	}


	public function setValueAxisTitle($valueAxisTitle)
	{
		$this->valueAxisTitle = $valueAxisTitle;
	}	
}
