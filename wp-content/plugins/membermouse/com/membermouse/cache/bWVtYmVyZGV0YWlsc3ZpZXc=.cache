/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MemberDetailsView extends MM_RBACGeneralEmployeeView
{	
	public static $MM_JSACTION_UPDATE_MEMBER = "updateMember";
	public static $MM_JSACTION_DELETE_MEMBER = "deleteMember";
	public static $MM_JSACTION_SEND_PASSWORD = "sendPasswordEmail";
	public static $MM_JSACTION_SEND_WELCOME_EMAIL = "sendWelcomeEmail";
	public static $MM_JSACTION_LOGIN_AS_MEMBER = "loginAsMember";
	public static $MM_JSACTION_CHANGE_MEMBERSHIP_STATUS = "changeMembershipStatus";
	public static $MM_JSACTION_CHANGE_MEMBERSHIP = "changeMembership";
	public static $MM_JSACTION_CHANGE_BUNDLE_STATUS = "changeBundleStatus";
	public static $MM_JSACTION_UPDATE_SUBSCRIPTION_BILLING = "updateSubscriptionBilling";
	public static $MM_JSACTION_SAVE_BUNDLE_CONFIG = "saveBundleConfiguration";
	public static $MM_JSACTION_FORGET_MEMBER = "forgetMember";
	public static $MM_JSACTION_MERGE_SHOW_DIALOG = "showMergeAccountsDialog";
	public static $MM_JSACTION_MERGE_SEARCH = "findMembersToMerge";
	public static $MM_JSACTION_MERGE_GET_USER_DATA = "getMergeUserData"; 
	public static $MM_JSACTION_MERGE_SAVE = "executeMerge";
	public static $MM_JSACTION_LOAD_STATES = "loadStates";


	public function __construct()
	{
		parent::__construct();
	}
	
 	public function performAction($post) 
	{	
		$response = parent::performAction($post); 
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_UPDATE_MEMBER:
					return $this->updateMember($post);
					
				case self::$MM_JSACTION_DELETE_MEMBER:
					return $this->deleteMember($post);
				
				case self::$MM_JSACTION_SEND_PASSWORD:
					return $this->sendPasswordReminder($post);
				
				case self::$MM_JSACTION_SEND_WELCOME_EMAIL:
					return $this->sendWelcomeEmail($post);
				
				case self::$MM_JSACTION_LOGIN_AS_MEMBER:
				    return $this->loginAsMember($post);
				    
				case self::$MM_JSACTION_FORGET_MEMBER:
				    return $this->forgetMember($post);
				    
				case self::$MM_JSACTION_CHANGE_MEMBERSHIP_STATUS:
					return $this->changeMembershipStatus($post);
					
				case self::$MM_JSACTION_CHANGE_MEMBERSHIP:
					return $this->changeMembership($post);
				
				case self::$MM_JSACTION_CHANGE_BUNDLE_STATUS:
					return $this->changeBundleStatus($post);
				
				case self::$MM_JSACTION_UPDATE_SUBSCRIPTION_BILLING:
					return $this->updateSubscriptionBillingInfo($post);
					
				case self::$MM_JSACTION_SAVE_BUNDLE_CONFIG:
				    return $this->saveBundleConfiguration($post);
				    
				case self::$MM_JSACTION_LOAD_STATES:
				    return $this->loadStates($post);
				    
				case self::$MM_JSACTION_MERGE_SHOW_DIALOG:
				    return $this->showMergeAccountsDialog($post);
				    
				case self::$MM_JSACTION_MERGE_SEARCH:
				    return $this->findMembersToMerge($post);
				    
				case self::$MM_JSACTION_MERGE_GET_USER_DATA:
				    return $this->getMergeUserData($post);
				    
				case self::$MM_JSACTION_MERGE_SAVE:
				    return $this->executeMerge($post);
				    
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	private function updateMember($post)
	{	
		if(isset($post["mm_id"])) 
		{
			$user = new MM_User($post["mm_id"]);
			
			if($user->isValid()) 
			{
				$enableUsernameChange = (MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ENABLE_USERNAME_CHANGE) == "1") ? true : false;
				
				$user->setFirstName($post["mm_first_name"]);
				$user->setLastName($post["mm_last_name"]);
				$user->setEmail($post["mm_email"]);
				
				if($enableUsernameChange)
				{
					$user->setUsername($post["mm_username"]);
				}
				
				$user->setPhone($post["mm_phone"]);
				$user->setNotes($post["mm_notes"]);
				
				// billing info
				$user->setBillingAddress($post["mm_billing_address"]);
				$user->setBillingAddress2($post["mm_billing_address2"]);
				$user->setBillingCity($post["mm_billing_city"]);
				$user->setBillingState($post["mm_field_billing_state"]);
				$user->setBillingZipCode($post["mm_billing_zip_code"]);
				$user->setBillingCountry($post["mm_field_billing_country"]);
				
				// shipping info
				$user->setShippingAddress($post["mm_shipping_address"]);
				$user->setShippingAddress2($post["mm_shipping_address2"]);
				$user->setShippingCity($post["mm_shipping_city"]);
				$user->setShippingState($post["mm_field_shipping_state"]);
				$user->setShippingZipCode($post["mm_shipping_zip_code"]);
				$user->setShippingCountry($post["mm_field_shipping_country"]);
				
				if(isset($post["mm_new_password"]) && $post["mm_new_password"] != "") 
				{
					$user->setPassword($post["mm_new_password"]);
				}
				
				$result = $user->commitData();
				
				if($result->type == MM_Response::$SUCCESS) 
				{
					return new MM_Response("Member '".$user->getEmail()."' updated successfully");
				}
				else 
				{
					return $result;
				}
			}
			else 
			{
				return new MM_Response("Error updating member with ID '".$post["mm_id"]."'", MM_Response::$ERROR);
			}
		}
		else 
		{
			return new MM_Response("Error updating member. ID is required.", MM_Response::$ERROR);
		}
	}
	
	private function sendPasswordReminder($post)
	{
		if(!isset($post["user_id"]))
		{
			return new MM_Response("Member ID is required.", MM_Response::$ERROR);
		}
		
		$user = new MM_User($post["user_id"]);
		
		if(!$user->isValid())
		{
			return new MM_Response("Invalid member ID '{$post["user_id"]}'.", MM_Response::$ERROR);
		}
		
		//set a new password for the user
		MM_User::generateAndStoreForgotPasswordHash($user);
		
		$email = new MM_Email();
		$employee = MM_Employee::getDefault();
		$context = new MM_Context($user, $employee);
		
		$email->setContext($context);
		$email->setSubject(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_SUBJECT));
		$email->setBody(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_BODY));
		
		$firstName = $user->getFirstName();
		$name = (!empty($firstName)) ? $firstName : $user->getUsername();
		$email->setToName($name);
		$email->setToAddress($user->getEmail());
		$email->setFromName($employee->getDisplayName());
		$email->setFromAddress($employee->getEmail());
		$response = $email->send();
		
		return $response;
	}
	
	private function sendWelcomeEmail($post)
	{
		if(!isset($post["user_id"]))
		{
			return new MM_Response("Member ID is required.", MM_Response::$ERROR);
		}
	
		$user = new MM_User($post["user_id"]);
	
		if(!$user->isValid())
		{
			return new MM_Response("Invalid member ID '{$post["user_id"]}'.", MM_Response::$ERROR);
		}
	
		$user->sendWelcomeEmail();
	
		return new MM_Response();
	}
	
	private function loginAsMember($post)
	{
		if(!isset($post["user_id"]))
		{
			return new MM_Response("Member ID is required.", MM_Response::$ERROR);
		}
	
		$user = new MM_User($post["user_id"]);
	
		if(!$user->isValid())
		{
			return new MM_Response("Invalid member ID '{$post["user_id"]}'.", MM_Response::$ERROR);
		}
		
		// check if an administrator is logged in
		global $current_user;
		$employee = MM_Employee::findByUserId($current_user->ID);
		if(is_user_logged_in() && $employee->canLoginAsMember())
		{
			wp_set_current_user($user->getId(), $user->getUsername());
			wp_set_auth_cookie($user->getId());
			do_action('wp_login', $user->getUsername(), new WP_User($user->getId())); 
 
			// Start of determination of home page url 
			$redirect_to = null;
			if($user->getStatus() == MM_Status::$EXPIRED)
			{ 
				$redirect_to = MM_CorePageEngine::getUrl(MM_CorePageType::$ERROR, MM_Error::$ACCOUNT_EXPIRED, $user);
			}
			else if($user->getStatus() == MM_Status::$CANCELED)
			{ 
				$redirect_to = MM_CorePageEngine::getUrl(MM_CorePageType::$ERROR, MM_Error::$ACCOUNT_CANCELED, $user);
			}
			else if($user->getStatus() == MM_Status::$LOCKED)
			{ 
				$redirect_to = MM_CorePageEngine::getUrl(MM_CorePageType::$ERROR, MM_Error::$ACCOUNT_LOCKED, $user);
			}
			else if($user->getStatus() == MM_Status::$OVERDUE)
			{
				$redirect_to = MM_CorePageEngine::getUrl(MM_CorePageType::$MY_ACCOUNT, "", $user);
			} 
			else
			{ 
				$setting = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ON_LOGIN_USE_WP_FRONTPAGE);
				if($setting == "1")
				{
					$redirect_to = MM_OptionUtils::getOption("siteurl");
				}
				else
				{
					$redirect_to = MM_CorePageEngine::getUrl(MM_CorePageType::$MEMBER_HOME_PAGE, "", $user);
				}  
			}  
			
			if(is_null($redirect_to) || empty($redirect_to))
			{
				$redirect_to = admin_url('/home'); 
			} 
			// end of home page url determination
			
			return new MM_Response($redirect_to);
		}
		else 
		{
			return new MM_Response("You don't have the appropriate permissions to login as this member", MM_Response::$ERROR);
		}
	}
	
	public function changeMembershipStatus($post)
	{
		if(isset($post["mm_id"]) && isset($post["mm_new_status"]))
		{
			$user = new MM_User($post["mm_id"]);
			
			return MM_AccessControlEngine::changeMembershipStatus($user, $post["mm_new_status"]);
		}
		else
		{
			return new MM_Response("Error changing membership status. Member ID and new status are required.", MM_Response::$ERROR);
		}
	}
	
	public function changeMembership($post)
	{
		if(isset($post["mm_id"]) && isset($post["mm_new_membership"]))
		{
			$user = new MM_User($post["mm_id"]);
			$ignorePaymentServiceErrors = (isset($post["mm_ignore_payment_service_errors"]) && ($post["mm_ignore_payment_service_errors"] == "true"))?true:false;
			return MM_AccessControlEngine::changeMembership($user, $post["mm_new_membership"],$ignorePaymentServiceErrors);
		}
		else
		{
			return new MM_Response("Error changing membership. Member ID and new membership are required.", MM_Response::$ERROR);
		}
	}
	
	public function changeBundleStatus($post)
	{
		if(isset($post["mm_id"]) && isset($post["mm_bundle_id"]) && isset($post["mm_new_status"]))
		{
			$user = new MM_User($post["mm_id"]);
			$bundle = new MM_Bundle($post["mm_bundle_id"]);
			$newStatus = intval($post["mm_new_status"]);
			
			return MM_AccessControlEngine::changeBundleStatus($user, $bundle, $newStatus);
		}
		else
		{
			return new MM_Response("Error changing bundle status. Member ID, bundle ID and new bundle status are required.", MM_Response::$ERROR);
		}
	}
	
	public function cancelSubscriptionForOrderItem($orderItem, $hardCancel = false)
	{
		if($orderItem->isValid())
		{
			$result = MM_PaymentUtils::cancelSubscriptionForOrderItem($orderItem, $hardCancel);
				
			if(MM_Response::isError($result))
			{
				return $result;
			}
				
			$result = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
			
			if(MM_Response::isError($result))
			{
				return $result;
			}
			
			return new MM_Response("Subscription canceled successfully.");
		}
		else
		{
			return new MM_Response("Error cancelling subscription. Order Item {$post["mm_order_item_id"]} is invalid.", MM_Response::$ERROR);
		}
	} 
	
	public function updateSubscriptionBillingInfo($post)
	{
		if(isset($post["mm_order_item_id"]))
		{
			$orderItem = new MM_OrderItem($post["mm_order_item_id"]); 

			$billingAddress = new MM_CustomerAddress();

			$order = MM_Order::create($orderItem->getOrderId());
			$paymentService = $order->getPaymentMethod();
			
			if (($paymentService instanceof MM_PaymentService) && ($paymentService->tokenExchangeEnabled())) 
			{
			    if (empty($post['mm_field_payment_token']))
			    {
			        return new MM_Response(_mmt("Error updating subscription billing details. Invalid Payment Token."), MM_Response::$ERROR);
			    }
				$cardInfo = new MM_PaymentToken($post["mm_field_payment_token"]);
				if (isset($post["mm_field_cc_cvv"]))
				{
				    $cardInfo->setCVV($post["mm_field_cc_cvv"]);
				}
			}
			else 
			{
				$cardInfo = new MM_CardInfo();
				$cardInfo->setCardNumber($post["mm_field_cc_number"]);
				$cardInfo->setExpirationMonth($post["mm_field_cc_exp_month"]);
				$cardInfo->setExpirationYear($post["mm_field_cc_exp_year"]);
				$cardInfo->setCVV($post["mm_field_cc_cvv"]);
			}
			
			$billingAddress->setAddressLine1($post["mm_field_billing_address"]);
			$billingAddress->setCity($post["mm_field_billing_city"]);
			$billingAddress->setState($post["mm_field_billing_state"]);
			$billingAddress->setPostalCode($post["mm_field_billing_zip"]);
			$billingAddress->setCountry($post["mm_field_billing_country"]);
			 
			$result = MM_PaymentUtils::updateSubscriptionBillingInfo($orderItem, $cardInfo, $billingAddress);
			
			if(MM_Response::isSuccess($result)) 
			{
				// change status of membership or bundle to active
				$orderItemAccess = MM_OrderItemAccess::getAccessByOrderItem($orderItem->getId());
		
				if($orderItemAccess->isValid())
				{
					$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
						
					if($user->isValid())
					{
						if($orderItemAccess->getAccessType() == MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP)
						{
							$result = MM_AccessControlEngine::changeMembershipStatus($user, MM_Status::$ACTIVE);
						}
						else if($orderItemAccess->getAccessType() == MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE)
						{
							$bundle = new MM_Bundle($orderItemAccess->getAccessTypeId());
								
							if($bundle->isValid())
							{
								$result = MM_AccessControlEngine::changeBundleStatus($user, $bundle, MM_Status::$ACTIVE);
							}
						}
					}
				}
				
				$result->type = MM_Response::$SUCCESS;
				$result->message = _mmt("Billing details updated successfully");
			}
			
			return $result;
		}
		else
		{
			return new MM_Response(_mmt("Error updating subscription billing details. Order item ID are required."), MM_Response::$ERROR);
		}
	}
	
	public function editBundleConfiguration($post)
	{
		if(isset($post["member_id"]) && isset($post["bundle_id"]))
		{
			$info = new stdClass();
			$info->memberId = $post["member_id"];
			$info->bundleId = $post["bundle_id"];
			
			$data = MM_TEMPLATE::generate(MM_MODULES."/".MM_MODULE_MEMBER_DETAILS_ACCESS_RIGHTS.".dialog.php", $info);
			
			return new MM_Response($data);
		}
		else
		{
			return new MM_Response("Error editing calculation method. Member ID and bundle ID are required.", MM_Response::$ERROR);
		}
	}
	
	public function saveBundleConfiguration($post)
	{
		if(isset($post["member_id"]) && isset($post["bundle_id"]))
		{
			$appliedBundle = MM_AppliedBundle::getAppliedBundle($post["member_id"], $post["bundle_id"]);
			
			if($appliedBundle->isValid())
			{
				if(isset($post["mm_calc_method"]))
				{
					$appliedBundle->setDaysCalcMethod($post["mm_calc_method"]);
					
					switch($post["mm_calc_method"])
					{
						case MM_DaysCalculationTypes::$CUSTOM_DATE:
							$calcMethodCustomDate = MM_Utils::dateToUTC($post['mm_custom_date'], "Y-m-d H:i", "00:00:00");
							$appliedBundle->setDaysCalcValue($calcMethodCustomDate);
							break;
							
						case MM_DaysCalculationTypes::$FIXED:
							$appliedBundle->setDaysCalcValue($post["mm_fixed"]);
							break;
					}
				}
				
				if($appliedBundle->doesExpire() && isset($post["mm_expiration_date"]))
				{
					$expirationDate = MM_Utils::dateToUTC($post['mm_expiration_date'], "Y-m-d H:i", "00:00:00");
					$appliedBundle->setExpirationDate($expirationDate);
				}
				
				if($appliedBundle->isPendingCancellation() && isset($post["mm_cancellation_date"]))
				{
					$cancellationDate = MM_Utils::dateToUTC($post['mm_cancellation_date'], "Y-m-d H:i", "00:00:00");
					$appliedBundle->setCancellationDate($cancellationDate);
				}
				
				$appliedBundle->commitData();
				
				return new MM_Response("Bundle configuration saved successfully");
			}
		}
		else
		{
			return new MM_Response("Unable to update bundle configuration. User ID and bundle ID are required.", MM_Response::$ERROR);	
		}
	}
	
	private function deleteMember($post) 
	{
		$user = new MM_User($post["id"]);
		
		if($user->isValid()) 
		{
			$result = $user->delete();
			
			return $result;
		}
		
		return new MM_Response("Unable to delete member. No ID specified.", MM_Response::$ERROR);
	}
	
	/**
	 * This method is called when an rebill payment delclined event is dispatched. This method is registerd 
	 * as a listener for that event in the MM plugin index.php
	 */
	public function handleRebillPaymentDeclinedEvent($params)
	{
		$result = new MM_Response();
		
		if(isset($params["order_item_id"]))
		{
			$orderItem = new MM_OrderItem($params["order_item_id"]);
			
			if($orderItem->isValid())
			{
				$orderItemAccess = MM_OrderItemAccess::getAccessByOrderItem($orderItem->getId());
				
				if($orderItemAccess->isValid())
				{
					$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
					
					if($user->isValid())
					{
						if($orderItemAccess->getAccessType() == MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP)
						{
							if($user->getStatus() == MM_Status::$ACTIVE)
							{
								$result = MM_AccessControlEngine::changeMembershipStatus($user, MM_Status::$OVERDUE);
							}
							else 
							{
								$result = new MM_Response();
							}
						}
						else if($orderItemAccess->getAccessType() == MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE)
						{
							$bundle = new MM_Bundle($orderItemAccess->getAccessTypeId());
							
							if($bundle->isValid())
							{
								if($bundle->getStatus() == MM_Status::$ACTIVE)
								{
									$result = MM_AccessControlEngine::changeBundleStatus($user, $bundle, MM_Status::$OVERDUE);
								}
								else 
								{
									$result = new MM_Response();
								}
							}
							else
							{
								$result = new MM_Response("Error handling rebill payment declined event. Invalid bundle ID '{$orderItemAccess->getAccessTypeId()}'.", MM_Response::$ERROR);
							}
						}
					}
					else 
					{
						$result = new MM_Response("Error handling rebill payment declined event. Unable to locate valid member associatd with order item ID '{$params["order_item_id"]}'.", MM_Response::$ERROR);
					}
				}
				else 
				{
					$result = new MM_Response("Error handling rebill payment declined event. Unable to locate access associated with order item ID '{$params["order_item_id"]}'.", MM_Response::$ERROR);
				}
			}
			else
			{
				$result = new MM_Response("Error handling rebill payment declined event. Order item ID '{$params["order_item_id"]}' is invalid.", MM_Response::$ERROR);
			}
		}
		else 
		{
			$result = new MM_Response("Error handling rebill payment declined event. Order item ID is required", MM_Response::$ERROR);
		}
		
		return $result;
	}
	
	
	/**
	 * This method is called when a rebill payment event is dispatched. It ensures that a customers access is set to 
	 * active when this event is receieved.
	 */
	public function handleRebillPaymentReceivedEvent($params)
	{
		$result = new MM_Response();
	
		if(isset($params["order_item_id"]))
		{
			$orderItem = new MM_OrderItem($params["order_item_id"]);
				
			if($orderItem->isValid())
			{
				$orderItemAccess = MM_OrderItemAccess::getAccessByOrderItem($orderItem->getId());
	
				if($orderItemAccess->isValid())
				{
					$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
						
					if($user->isValid())
					{
						if($orderItemAccess->getAccessType() == MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP)
						{
							if($user->getStatus() != MM_Status::$ACTIVE && $user->getStatus() != MM_Status::$LOCKED)
							{
								$result = MM_AccessControlEngine::changeMembershipStatus($user, MM_Status::$ACTIVE);
							}
						}
						else if($orderItemAccess->getAccessType() == MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE)
						{
							$bundle = new MM_Bundle($orderItemAccess->getAccessTypeId());
								
							if($bundle->isValid())
							{
								if($bundle->getStatus() != MM_Status::$ACTIVE)
								{
									$result = MM_AccessControlEngine::changeBundleStatus($user, $bundle, MM_Status::$ACTIVE);
								}
							}
							else
							{
								$result = new MM_Response("Error handling rebill payment received event. Invalid bundle ID '{$orderItemAccess->getAccessTypeId()}'.", MM_Response::$ERROR);
							}
						}
					}
					else
					{
						$result = new MM_Response("Error handling rebill payment received event. Unable to locate valid member associatd with order item ID '{$params["order_item_id"]}'.", MM_Response::$ERROR);
					}
				}
				else
				{
					$result = new MM_Response("Error handling rebill payment received event. Unable to locate access associated with order item ID '{$params["order_item_id"]}'.", MM_Response::$ERROR);
				}
			}
			else
			{
				$result = new MM_Response("Error handling rebill payment received event. Order item ID '{$params["order_item_id"]}' is invalid.", MM_Response::$ERROR);
			}
		}
		else
		{
			$result = new MM_Response("Error handling rebill payment received event. Order item ID is required", MM_Response::$ERROR);
		}
	
		return $result;
	} 

	/**
	 * MERGE ACCOUNTS FUNCTIONS
	 */
	
	/**
	 * This function displays the merge accounts dialog
	 * 
	 * @param $post data containing user ID of the primary user in the merge
	 * @return MM_Response
	 */
	public function showMergeAccountsDialog($post)
	{
	    if(isset($post["user_id"]))
	    {
	        $info = new stdClass();
	        $info->user_id = $post["user_id"];
	        $data = MM_TEMPLATE::generate(MM_MODULES."/merge_member.dialog.php", $info);
	        return new MM_Response($data);
	    }
	    else
	    {
	        return new MM_Response(_mmt("Error showing merge accounts dialog, user ID required."), MM_Response::$ERROR);
	    }
	}
	
	/**
	 * This function retrieves a list of users that match a search string passed from an autocomplete field.
	 * @param $post array contains the forms value including the user ID and search string
	 * @return MM_Response pass back an array of users in the response data
	 */
	public function findMembersToMerge($post)
	{
	    if(isset($post["searchString"]))
	    {
	        $userId = (isset($post["user_id"])) ? intval($post["user_id"]):null;
	        $users = MM_MergeAccountUtils::findUsersBySearchString($post["searchString"], $userId);
	        
	        if($users !== false && is_array($users) && count($users) > 0)
	        {
	           return new MM_Response($users);
	        }
	        else 
	        {
	            $errorMsg = sprintf(_mmt("Unable to find users with name, email or username name matching '%s'"), $post["searchString"]);
	            return new MM_Response($errorMsg, MM_Response::$ERROR);
	        }
	    }
	    
	    $errorMsg = sprintf(_mmt("Error searching for users with name, email or username name matching '%s'"), $post["searchString"]);
	    return new MM_Response($errorMsg, MM_Response::$ERROR);
	}
	
	/**
	 * This function grabs the data for both user accounts being merged.
	 *
	 * @param $post - an associative array of posted values
	 * @return MM_Response
	 */
	public function getMergeUserData($post)
	{
	    // get data for primary user
	    $primaryUserData = MM_MergeAccountUtils::getUserData(new MM_User($post["user_id"]));
	    
	    // get data for secondary user
	    if(isset($post["secondary_user_id"]))
	    {
	        $secondaryUserData = MM_MergeAccountUtils::getUserData(new MM_User($post["secondary_user_id"]));
	    }
	    else 
	    {
	        return new MM_Response(_mmt("Error retrieving data for members involved in the merge. Missing secondary member ID."), MM_Response::$ERROR);
	    }
	    
	    $info = new stdClass();
	    $info->user_id = $primaryUserData;
	    $info->secondary_user_id = $secondaryUserData;
	    
	    return new MM_Response($info);
	}

	/*
	 * This function execute the merge operation based on the configuration parameters passed in the $post data
	 * 
	 * @param $userChoices associative array of configuration data which will guide the account merge process
	 * @param MM_Response
	 */
	public function executeMerge($userChoices)
	{ 
	   $result = new MM_Response();
	   $primaryUser = null;
	   $secondaryUser = null;
	   
	    if(isset($userChoices["user_id"]) && intval($userChoices["user_id"]) > 0)
	    {
	       $primaryUser = new MM_User(intval($userChoices["user_id"]));
	       
	       if(!$primaryUser->isValid())
	       {
	           $errorMsg = sprintf(_mmt("Unable to merge accounts. Primary member ID '%s' is invalid."), $userChoices["user_id"]);
	           return new MM_Response($errorMsg, MM_Response::$ERROR);
	       }
	    }
	    else
	    {
	       return new MM_Response(_mmt("Unable to merge accounts. Primary member is required."), MM_Response::$ERROR);
	    }
	   
	    if(isset($userChoices["secondary_user_id"]) && intval($userChoices["secondary_user_id"]) > 0)
	    {
	       $secondaryUser = new MM_User(intval($userChoices["secondary_user_id"]));
	       
	       if(!$secondaryUser->isValid())
	       {
	           $errorMsg = sprintf(_mmt("Unable to merge accounts. Secondary member ID '%s' is invalid."), $userChoices["secondary_user_id"]);
	           return new MM_Response($errorMsg, MM_Response::$ERROR);
	       }
	    }
	    else 
	    {
	       return new MM_Response(_mmt("Unable to merge accounts. Seconrdary member is required."), MM_Response::$ERROR);
        }
	     
        // package up data for the activity log
        $activityLogData = array();
	    $activityLogData = MM_Event::packageMemberData($primaryUser->getId());
	    $activityLogData["secondary_user"] = MM_Event::packageMemberData($secondaryUser->getId());
	    
	    $progressStr = "";
	    
		// merge general account information
		$doUpdatePrimaryUser = false;
		$newEmail = "";
		$newUsername = "";
		if(isset($userChoices["general"]) && count($userChoices["general"]) > 0)
		{
		    foreach($userChoices["general"] as $generalItem)
		    {
		        // if the secondary user value was chosen, overwrite that value on the primary user
		        if($generalItem["choice"] == MM_MergeAccountUtils::$CHOICE_SECONDARY)
		        {
		            $doUpdatePrimaryUser = true;
		            
		            switch(strtolower($generalItem["fieldName"]))
		            {
		                case "first_name":
		                    $primaryUser->setFirstName($secondaryUser->getFirstName());
		                    break;
		                case "last_name":
		                    $primaryUser->setLastName($secondaryUser->getLastName());
		                    break;
		                case "phone":
		                    $primaryUser->setPhone($secondaryUser->getPhone());
		                    break;
		                case "email":
		                    // store email address to be updated on the primary user later.
		                    // this must be done only after the secondary user has been deleted.
		                    $newEmail = $secondaryUser->getEmail();
		                    break;
		                case "username":
		                    // store username to be updated on the primary user later.
		                    // this must be done only after the secondary user has been deleted.
		                    $newUsername = $secondaryUser->getUsername();
		                    break;
		                case "address":
		                    $primaryUser->setShippingAddress($secondaryUser->getShippingAddress());
		                    break;
		                case "address2":
		                    $primaryUser->setShippingAddress2($secondaryUser->getShippingAddress2());
		                    break;
		                case "city":
		                    $primaryUser->setShippingCity($secondaryUser->getShippingCity());
		                    break;
		                case "state":
		                    $primaryUser->setShippingState($secondaryUser->getShippingState());
		                    break;
		                case "zip":
		                    $primaryUser->setShippingZipCode($secondaryUser->getShippingZipCode());
		                    break;
		                case "country":
		                    $primaryUser->setShippingCountry($secondaryUser->getShippingCountry());
		                    break;
		                case "billing-address":
		                    $primaryUser->setBillingAddress($secondaryUser->getBillingAddress());
		                    break;
		                case "billing-address2":
		                    $primaryUser->setBillingAddress2($secondaryUser->getBillingAddress2());
		                    break;
		                case "billing-city":
		                    $primaryUser->setBillingCity($secondaryUser->getBillingCity());
		                    break;
		                case "billing-state":
		                    $primaryUser->setBillingState($secondaryUser->getBillingState());
		                    break;
		                case "billing-zip":
		                    $primaryUser->setBillingZipCode($secondaryUser->getBillingZipCode());
		                    break;
		                case "billing-country":
		                    $primaryUser->setBillingCountry($secondaryUser->getBillingCountry());
		                    break;
		            }
		        }
		    }
		}
		
		// commit changes to primary user account
		if($doUpdatePrimaryUser)
		{
		    $result = $primaryUser->commitData();
		    
		    if(MM_Response::isError($result))
		    {
		        return new MM_Response(_mmt("Unable to complete merging accounts. There was an error updating the account information on the current account."), MM_Response::$ERROR);
		    }
		    else
		    {
		        $progressStr .= _mmt("General account information transferred successfully\n");
		    }
		}
		
	    // merge custom fields
	    $customFieldsUpdated = false;
		if(isset($userChoices["custom_fields"]) && count($userChoices["custom_fields"]) > 0)
	    {
	        foreach($userChoices["custom_fields"] as $fieldId=>$choice)
    	    {
    	        // if the secondary user value was chosen, overwrite that custom field value on the primary user
	            if($choice == MM_MergeAccountUtils::$CHOICE_SECONDARY)
	            {
	                $customFieldsUpdated = true;
	                $customFieldValueObj = $secondaryUser->getCustomDataByFieldId($fieldId);
	                $primaryUser->setCustomData($fieldId, $customFieldValueObj->getValue());
	            }
    	    }
	    }
	    
	    if($customFieldsUpdated == true)
	    {
	        $progressStr .= _mmt("Custom fields data transferred successfully\n");
	    }
	    
	    // transfer membership
	    if($userChoices["membership"] == MM_MergeAccountUtils::$CHOICE_SECONDARY)
	    {
	        $result = MM_MergeAccountUtils::transferMembership($primaryUser, $secondaryUser);
	        
	        if(MM_Response::isError($result))
	        {
	            return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	        }
	        else 
	        {
	            $progressStr .= _mmt("Membership level transferred successfully\n");
	        }
	    }
	    
	    // transfer bundles
	    $result = MM_MergeAccountUtils::transferBundles($primaryUser, $secondaryUser, $userChoices["bundles"]); 
	    
	    if(MM_Response::isError($result))
	    {
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Bundles transferred successfully\n");
	    }
	    
	    // transfer standalone products
	    $result = MM_MergeAccountUtils::transferOrderItems($primaryUser->getId(), $secondaryUser->getId(), $userChoices["orderItems"]);
	    
	    if(MM_Response::isError($result))
	    {
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Standalone products transferred successfully\n");
	    }
	    
	    // transfer gifts. this must be run after all order items have been transferred from the secondary user to the primary user
	    $result = MM_MergeAccountUtils::transferGifts($primaryUser, $secondaryUser);
	    
	    if(MM_Response::isError($result))
	    {
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Gifts transferred successfully\n");
	    }
	    
	    // transfer coupons used by the secondary user
	    $result = MM_MergeAccountUtils::transferCoupons($primaryUser, $secondaryUser);
	    
	    if(MM_Response::isError($result))
	    {
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Coupons transferred successfully\n");
	    }
	    
	    // transfer card on file
	    if($userChoices["credit-card-on-file"] == MM_MergeAccountUtils::$CHOICE_SECONDARY)
	    {
	        $activePaymentService = MM_PaymentServiceFactory::getOnsitePaymentService();
	        $result = $activePaymentService->transferPaymentInfo($secondaryUser->getId(), $primaryUser->getId());
	        
	        if(MM_Response::isError($result))
	        {
	            return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	        }
	        else
	        {
	            $progressStr .= _mmt("Card on file transferred successfully\n");
	        }
	    }
	    
	    // clean up items on secondary user in preparation for deletion
	    // remove any bundles from secondary user that weren't transferred
	    $result = MM_MergeAccountUtils::removeBundlesFromUser($secondaryUser);
	    
	    if(MM_Response::isError($result))
	    {
	        $result = new MM_Response(_mmt("There was an error removing bundles from the secondary member account."), MM_Response::$ERROR);
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Bundles removed from secondary member successfully\n");
	    }
	    
	    // cancel any remaining subscriptions on the secondary user
	    $result = MM_MergeAccountUtils::cancelSubscriptionsOnUser($secondaryUser);
        
	    if(MM_Response::isError($result))
	    {
	        $result = new MM_Response(_mmt("There was an error cancelling the secondary member subscriptions."), MM_Response::$ERROR);
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Subscriptions cancelled on secondary member successfully\n");
	    }
	    
	    // cancel membership on secondary user account
	    $result = MM_AccessControlEngine::changeMembershipStatus($secondaryUser, MM_Status::$CANCELED);
	    
	    if(MM_Response::isError($result))
	    {
	        $result = new MM_Response(_mmt("There was an error cancelling the secondary member's membership."), MM_Response::$ERROR);
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Membership cancelled on secondary member successfully\n");
	    }
	    
	    // delete secondary user account
	    $result = $secondaryUser->delete();
	    
	    if(MM_Response::isError($result))
	    {
	        $result = new MM_Response(_mmt("There was an error deleting the secondary member."), MM_Response::$ERROR);
	        return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	    }
	    else
	    {
	        $progressStr .= _mmt("Secondary member deleted successfully\n");
	    }
	    
	    // now that the secondary account has been deleted, check if the email address or username was changed and update the primary user now
	    if(!empty($newEmail) || !empty($newUsername))
	    {
	        if(!empty($newEmail))
	        {
	            $primaryUser->setEmail($newEmail);
	        }
	        
	        if(!empty($newUsername))
	        {
	            $primaryUser->setUsername($newUsername);
	        }
	        
	        $result = $primaryUser->commitData();
	        
	        if(MM_Response::isError($result))
	        {
	            return MM_MergeAccountUtils::prepareErrorMessage($result, $progressStr);
	        }
	    }
        
        do_action(MM_Event::$MEMBER_MERGED, $activityLogData);
        return new MM_Response(_mmt("Member accounts merged successfully"));
	}
	
	/**
	 * Override base showDialog method to allow certain dialogs to be displayed
	 * {@inheritDoc}
	 * @see MM_View::showDialog()
	 */
	protected function showDialog($post)
	{
		$info = $this->createValueObjectFromRequest($post);
		$allowedModules = array(MM_MODULE_MEMBER_DETAILS_ACCESS_RIGHTS);
		$requestedModule = (isset($post[self::$MM_JSMODULE]))?$post[self::$MM_JSMODULE]:"";
		;
		if (!empty($requestedModule) && in_array($requestedModule,$allowedModules))
		{ 
			return MM_TEMPLATE::generate(MM_MODULES."/{$requestedModule}.dialog.php", $info);
		}
		else
		{
			return parent::showDialog($post);
		}
	}

    /**
	 * This method is for creating the response with the states based on the country iso code that was posted via ajax.
	 *
	 * @param $post
	 * @return MM_Response
	 */
	public function loadStates($post)
	{
		global $current_user;

		try
		{
			if(!isset($post['country']) || !$post['country'])
			{
				throw new Exception("Missing country ISO code");
			}

			if(!is_array($states = MM_CountrySubdivisionUtils::getCountrySubdivsionList(array($post['country']))))
			{
				throw new Exception("No states found for ISO code: {$post['country']}");
			}

			$defaultState 	 = null;
			$defaultCountry = null;

			if(is_user_logged_in())
			{
				$stateFunction   = $post['type'] == "billing" ? "getBillingState" : "getShippingState";
				$countryFunction = $post['type'] == "billing" ? "getBillingCountry" : "getShippingCountry";
				$user 			  = MM_User::getCurrentWPUser();
				$defaultState 	  = $user->$stateFunction() ? $user->$stateFunction() : null;
				$defaultCountry  = $user->$countryFunction() ? $user->$countryFunction() : null;
			}

			$options = "";
			$count   = 0;
			foreach($states[$post['country']] as $state_iso => $state_name)
			{
				if(is_user_logged_in())
				{
					if(isset($states[$defaultCountry][$defaultState]))
					{
						$selected = $defaultState == $state_iso;
					}
					else
					{
						$selected = $count === 0;
					}
				}
				else
				{
					$selected = $count === 0;
				}

				$options .= "<option value='{$state_iso}'" . ($selected ? " selected='selected'" : "") . ">{$state_name}</option>\n";
				$count++;
			}
			$options .= "<option value='-1'>Other...</option>\n";

			$MM_Response = new MM_Response();
			$MM_Response->data['html'] = $options;
			$MM_Response->data['type'] = $post['type'] ? $post['type'] : 'billing';

			return $MM_Response;
		}
		catch(Exception $e)
		{
			$MM_Response = new MM_Response($e->getMessage(), MM_Response::$ERROR);
			return $MM_Response;
		}
	}

	protected function forgetMember($post)
	{
	    if(!isset($post["user_id"]))
	    {
	        return new MM_Response(_mmt("Member ID is required"), MM_Response::$ERROR);
	    }
	    
	    $user = new MM_User($post["user_id"]);
	    
	    if(!$user->isValid())
	    {
	        return new MM_Response(sprintf(_mmt("Invalid Member ID %s"),$post["user_id"]), MM_Response::$ERROR);
	    }
	    
	    //TODO: check if there are other security concerns based on employee permissions
	    return $user->forget();
	}
 }
 