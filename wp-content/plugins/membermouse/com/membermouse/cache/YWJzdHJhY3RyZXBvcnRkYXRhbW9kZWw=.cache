/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
abstract class MM_AbstractReportDataModel
{
	public static $SORT_ASC = "sort_asc";
	public static $SORT_DESC = "sort_desc";
	
	/**
	 * Sorts the supplied results according to the given column and direction
	 * If an invalid column is supplied, or there is no data, nothing happens.
	 * If direction is invalid, it defaults to the php constant SORT_DESC
	 * All sorting is 'natural sorting' using PHP's internal functionality
	 *
	 * @param string $sortColumn
	 * @param string $sortDirection
	 */
	public static function sortResults(&$results, $sortColumn, $sortDirection, $gridFormat=false)
	{
		if (count($results) == 0)
		{
			return; //no data, nothing to do
		}
		if (!empty($sortColumn) && !empty($sortDirection))
		{
			$firstRow = reset($results);
			if (($gridFormat && isset($firstRow['data'][$sortColumn])) || isset($firstRow[$sortColumn])) //make sure the column to be sorted exists
			{
				switch ($sortDirection)
				{
					case self::$SORT_ASC:
						$sortDirection = SORT_ASC;
						break;
					default:
						$sortDirection = SORT_DESC;
				}
					
				$tmpColumnData = array();
				foreach ($results as $row)
				{
					$tmpColumnData[] = $gridFormat?$row['data'][$sortColumn]:$row[$sortColumn];
				}
				array_multisort($tmpColumnData,$sortDirection,SORT_NATURAL,$results);
			}	
		}
	}
}