/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ManageTransactionsView extends MM_RBACGeneralEmployeeView
{	
	public static $MM_JSACTION_SEARCH = "search";
	public static $MM_JSACTION_RESET_FORM = "resetForm";
	public static $MM_JSACTION_STORE_SEARCH_STATE = "storeSearchState";
	
	use MM_EnhancedDatagridView; 
	
	protected $defaultSortCol = "t.transaction_date DESC";
	
	public function performAction($post)
	{
		$response = parent::performAction($post);
	
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION])
			{
				case self::$MM_JSACTION_RESET_FORM:
					return $this->generateSearchForm($post);
						
				case self::$MM_JSACTION_STORE_SEARCH_STATE:
					return $this->storeSearchState($post);
					
				case self::$MM_JSACTION_SEARCH:
				    return $this->search($post);
						
				default:
					return new MM_Response($response);
			}
		}
		else
		{
			return $response;
		}
	}
	
	
	public function generateSearchForm($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/manage_transactions.form.php", $post);
	}
	
	
	public function generateDataGrid($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/manage_transactions.datagrid.php", $post);
	}
	
	
	public function oldSearch($post, MM_DataGrid $dg)
	{
		global $wpdb;
	
		$optimizedQuery = $this->constructQuery($post, $dg);
		$optimizedQuery .= $dg->getLimitSql();
		
		$rows = $wpdb->get_results($optimizedQuery, OBJECT_K);
		return array_values($rows);
	}
	
	
	public function preprocessSearch($queryMeta)
	{
	    //add prefixes for fields not in the primary table
	    $sortInstructions = $queryMeta->sortCol ?? "";
	    $sortComponents = explode(" ",strtolower($sortInstructions));
	    $sortCol = $sortComponents[0] ?? "";
	    if (!empty($sortCol))
	    {
	        if ($sortCol == "description")
	        {
	            $queryMeta->sortCol = "oi.description";
	        }
	    }
	    
	    if (isset($queryMeta->query->conditions))
	    {
    	    foreach ($queryMeta->query->conditions as $aCondition)
    	    {
    	        if (isset($aCondition->name))
    	        {
    	            switch ($aCondition->name)
    	            {
    	                case "t.transaction_date": //TODO: does this fire? where is alias added?
    	                    $aCondition->value = MM_utils::dateToUTC($aCondition->value,"Y-m-d H:i:s");
    	                    break;
    	                default:
    	                    break;
    	            }
    	        }
    	    }
	    }
	}
	
	/**
	 * Query the database and return the unprocessed results in object format
	 */
	protected function getRawData($criteria=array())
	{
	    global $wpdb;
	    
	    $transactionsTable = MM_TABLE_TRANSACTION_LOG;
	    $paymentServicesTable = MM_TABLE_PAYMENT_SERVICES;
	    $ordersTable = MM_TABLE_ORDERS;
	    $userDataTable = MM_TABLE_USER_DATA;
	    $orderItemsTable = MM_TABLE_ORDER_ITEMS;
	    
	    $dataset = $this->processQueryMeta($criteria);
	    $whereString = $dataset->whereString;
	    $orderString = $dataset->orderString;
	    $limitString = $dataset->limitString;
	    
	    $sql = 	"SELECT t.id, t.transaction_date,-(t.amount) as transaction_amount,t.currency, t.transaction_type, o.order_number, o.affiliate_id, o.sub_affiliate_id, ".
	   	    "mud.first_name, mud.last_name, mud.wp_user_id as user_id, u.user_email, oi.description, p.name as payment_service, t.is_test ";
	    
	    $sqlFrom =  "FROM {$transactionsTable} t ".
	   	    "INNER JOIN {$paymentServicesTable} p ON (t.payment_service_id = p.id) ".
	   	    "INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
	   	    "INNER JOIN {$userDataTable} mud ON (o.user_id = mud.wp_user_id) ".
	   	    "INNER JOIN {$wpdb->users} u ON (o.user_id = u.ID) ".
	   	    "LEFT JOIN {$orderItemsTable} oi ON (t.order_item_id = oi.id) ";
	    
	    //filter by products
	    if (isset($dataset->query->products) && is_array($dataset->query->products))
	    {
	        foreach ($dataset->query->products as $k=>$v)
	        {
	            if (!is_numeric($v))
	            {
	                unset($dataset->query->products[$k]); //integers only, discard all non-integers
	            }
	        }
	        
	        if(count($dataset->query->products))
	        {
	            $itemIdString = implode(",",$dataset->query->products);
	            $whereString = empty($whereString) ? "WHERE " : "{$whereString} AND ";
	            $whereString .= $wpdb->prepare("((oi.item_type = %s) AND (oi.item_id IN ({$itemIdString})))",MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT);
	        }
	    }
	    
	    //filter by coupons
	    if (isset($dataset->query->coupons) && is_array($dataset->query->coupons))
	    {
	        foreach ($dataset->query->coupons as $k=>$v)
	        {
	            if (!is_numeric($v))
	            {
	                unset($dataset->query->coupons[$k]); //integers only, discard all non-integers
	            }
	        }
	        
	        if (count($dataset->query->coupons))
	        {
	            //coupon filtering is a special case, because coupons are special order items in the same order as the item the transaction is tied to...
	            //to filter correctly, we will conditionally join again the order items table, using the coupon type
	            $couponIdString = implode(",",$dataset->query->coupons);
	            $sqlFrom .= "INNER JOIN {$orderItemsTable} coupon_items ON ((coupon_items.item_type='".MM_OrderItem::$ORDER_ITEM_TYPE_COUPON."') ".
	   	            "AND (t.order_id = coupon_items.order_id)) ";
	            $whereString = empty($whereString) ? "WHERE " : "{$whereString} AND ";
	            $whereString .= $wpdb->prepare("(coupon_items.item_id IN ({$couponIdString}))",MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT);
	        }
	    }
	    
	    $sqlResultCount = "select count(*) as total {$sqlFrom} {$whereString}";
	    $dataset->total = $wpdb->get_var($sqlResultCount);
	    
	    $sqlQuery = "{$sql} {$sqlFrom} {$whereString}{$orderString}{$limitString}";
	    $sqlQuery = trim($sqlQuery);
	    $rows = $wpdb->get_results($sqlQuery);
	    
	    foreach($rows as $row)
	    {
	        $row->transaction_date = MM_Utils::dateToLocal($row->transaction_date,"Y-m-d H:i");
	        $row->formatted_amount = _mmf($row->transaction_amount,$row->currency);
	    }
	    
	    $pageCounter = ($dataset->pageNum == -1) ? 1 : $dataset->pageNum; //TODO: implement -1 as a marker for unpaginated
	    $dataset->data[$pageCounter] = [];
	    $prefetchSize = ($dataset->prefetchSize < 0)?0:$dataset->prefetchSize;
	    $pfCount = -1;
	    
	    foreach (array_chunk($rows, $dataset->pageSize) as $k=>$page)
	    {
	        if ($pfCount >= $prefetchSize)
	        {
	            break;
	        }
	        $pageCounter = $dataset->pageNum + $k; //by default array_chunk will use numeric keys starting wih 0
	        $dataset->data[$pageCounter] = $page;
	        $pfCount++;
	    }
	    
	    return $dataset;
	}
	
	
	public function constructQuery($post, MM_DataGrid $dg)
	{
		global $wpdb;
		
		//trim all the whitespace from the parameters
		foreach ($post as $k=>&$v)
		{
			if ((!is_array($v)) && (strpos($v,"mm_") == 0))
			{
				$v = trim($v);
			}
		}
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$paymentServicesTable = MM_TABLE_PAYMENT_SERVICES;
		$ordersTable = MM_TABLE_ORDERS;
		$userDataTable = MM_TABLE_USER_DATA;
		$orderItemsTable = MM_TABLE_ORDER_ITEMS;
		
		$sql = 	"SELECT t.id, t.transaction_date,-(t.amount) as transaction_amount,t.currency, t.transaction_type, o.order_number, o.affiliate_id, o.sub_affiliate_id, ".
				"mud.first_name, mud.last_name, mud.wp_user_id as user_id, u.user_email, oi.description, p.name as payment_service, t.is_test ";
		
		$sqlFrom =  "FROM {$transactionsTable} t ".
		  		    "INNER JOIN {$paymentServicesTable} p ON (t.payment_service_id = p.id) ".
					"INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
					"INNER JOIN {$userDataTable} mud ON (o.user_id = mud.wp_user_id) ".
					"INNER JOIN {$wpdb->users} u ON (o.user_id = u.ID) ".
					"LEFT JOIN {$orderItemsTable} oi ON (t.order_item_id = oi.id) ";
		
		$whereSQL = array();
		
		$sqlWhere = "";
		$sqlOrderBy = "";
		
		if (!empty($post['mm_from_date']))
		{
			$startDate = MM_Utils::dateToUTC($post['mm_from_date'], "Y-m-d H:i", "00:00:00");
			$whereSQL[]  = $wpdb->prepare("t.transaction_date >= %s",$startDate);
		}
		
		if (!empty($post['mm_to_date']))
		{
			$endDate = MM_Utils::dateToUTC($post['mm_to_date'], "Y-m-d H:i", "23:59:59");
			$whereSQL[]  = $wpdb->prepare("t.transaction_date <= %s",$endDate);
		}
		
		$possibleTransactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_REFUND);
		$transactionTypes = (isset($post['mm_transaction_types']) && is_array($post['mm_transaction_types']))?$post['mm_transaction_types']:array();
		
		foreach ($transactionTypes as $k=>$type)
		{
			//filter by the list of types we are allowing to be searched, which eliminates injection possibilities
			if (!in_array($type,$possibleTransactionTypes))
			{
				unset($transactionTypes[$k]);
			}
		}
		
		if (count($transactionTypes) > 0)
		{
			$whereSQL[] = "t.transaction_type IN (".implode(",",$transactionTypes).")";
		}
		else
		{
			//no specific types were sent, so search on everything
			$whereSQL[] = "t.transaction_type IN (".implode(",",$possibleTransactionTypes).")";
		}
		
		//order number
		if (!empty($post['mm_order_number']))
		{
			$whereSQL[] = $wpdb->prepare("o.order_number = %s",$post['mm_order_number']);
		}
		
		//products and coupons
		$itemTypeFilter = function($postVar,$itemTypeId) use ($post,$wpdb)
		{
		    if (!empty($post[$postVar]) && is_array($post[$postVar]))
			{
				foreach ($post[$postVar] as $k=>$v)
				{
					if (!is_numeric($v))
					{
						unset($post[$k]); //integers only, discard all non-integers
					}
				}
				$itemIdString = implode(",",$post[$postVar]);
				if(!empty($itemIdString))
				{
				    $whereString = $wpdb->prepare("((oi.item_type = %s) AND (oi.item_id IN ({$itemIdString})))",$itemTypeId);  
				    return $whereString;
				}
			}
			return null;
		};
		$productIdFilterString = $itemTypeFilter("mm_product_ids",MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT);
		if ($productIdFilterString !== null)
		{
			$whereSQL[] = $productIdFilterString;
		}
		
		
		if (!empty($post['mm_coupon_ids']) && is_array($post['mm_coupon_ids']))
		{
			$validNumericIds = array();
			foreach ($post['mm_coupon_ids'] as $potentialId)
			{
				if (is_numeric($potentialId))
				{
					$validNumericIds[] = $potentialId;
				}
			}
				
			if (count($validNumericIds))
			{
				//coupon filtering is a special case, because coupons are special order items in the same order as the item the transaction is tied to...
				//to filter correctly, we will conditionally join again the order items table, using the coupon type
				$sqlFrom .= "INNER JOIN {$orderItemsTable} coupon_items ON ((coupon_items.item_type='".MM_OrderItem::$ORDER_ITEM_TYPE_COUPON."') ".
						"AND (t.order_id = coupon_items.order_id)) ";
				$whereSQL[] = "coupon_items.item_id IN (".implode(",",$validNumericIds).")";
			}
		}
		
		// First Name
		if(!empty($post['mm_first_name']))
		{
			$whereSQL[] = $wpdb->prepare("mud.first_name LIKE %s",'%'.$wpdb->esc_like($post['mm_first_name']).'%');
		}
		
		// Last Name
		if(!empty($post['mm_last_name']))
		{
			$whereSQL[] = $wpdb->prepare("mud.last_name LIKE %s",'%'.$wpdb->esc_like($post['mm_last_name']).'%');
		}
		
		// Email
		if(!empty($post['mm_email']))
		{
			$whereSQL[] = $wpdb->prepare("u.user_email LIKE %s",'%'.$wpdb->esc_like($post['mm_email']).'%');
		}
		
		// user id
		if (!empty($post['mm_member_id']))
		{
			$whereSQL[] = $wpdb->prepare("mud.wp_user_id = %s",$post['mm_member_id']);
		}
		
		// affiliate IDs
		if (!empty($post['mm_affiliate_id']))
		{
			$whereSQL[] = $wpdb->prepare("o.affiliate_id LIKE %s",'%'.$wpdb->esc_like($post['mm_affiliate_id']).'%');
		}
		
		if (!empty($post['mm_sub_affiliate_id']))
		{
		    $whereSQL[] = $wpdb->prepare("o.sub_affiliate_id LIKE %s",'%'.$wpdb->esc_like($post['mm_sub_affiliate_id']).'%');
		}
		
		if (!empty($post['mm_payment_service']))
		{
		    $whereSQL[] = $wpdb->prepare("p.name LIKE %s",'%'.$wpdb->esc_like($post['mm_payment_service']).'%');
		} 
		
		
		if(isset($dg->sortBy) && !is_null($dg->sortBy) && !empty($dg->sortBy))
		{
			$sortBy = ($dg->sortBy == "last_name")?"last_name, first_name":$dg->sortBy;
			$sqlOrderBy = str_replace("'","",$wpdb->prepare("ORDER BY %s %s",$sortBy,$dg->sortDir));
		}
		
		if (count($whereSQL))
		{
			$sqlWhere .= "WHERE ".implode(" AND ",$whereSQL);
		}

		// updated to be mysql 5.6 compliant
		$sqlResultCount = "select count(t.id) as total ";
		$sqlResultCount .= $sqlFrom;
		$sqlResultCount .= $sqlWhere; 
		$totalResults = $wpdb->get_var($sqlResultCount);

		$masterQuery = "{$sql},{$totalResults} as total {$sqlFrom} {$sqlWhere} {$sqlOrderBy}";
 		return $masterQuery;
	}
	
	
	protected function storeSearchState($post)
	{
		if(isset($post["mm_show_search"]))
		{
			if(isset($post["mm_admin_id"]))
			{
				$optionName = MM_OptionUtils::$OPTION_KEY_SHOW_TRANSACTIONS_SEARCH."-".$post["mm_admin_id"];
				MM_OptionUtils::setOption($optionName, $post["mm_show_search"]);
				return new MM_Response();
			}
			else
			{
				return new MM_Response("Unable to store search state. Couldn't find current user ID.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Unable to store search state. Missing current state value.", MM_Response::$ERROR);
		}
	}
	
	
	public function getGridHeaders()
	{
		// define datagrid headers
		$headers = array
		(
				'type'					=> array('content' => 'Type', 'label'=>'Type', "attr" => "style='width:40px;'"),
				'transaction_date'		=> array('content' => '<a onclick="mmjs.sort(\'transaction_date\');" href="#">'._mmt("Date").'</a>', 'label'=>'Date'),
				'order_number'			=> array('content' => '<a onclick="mmjs.sort(\'order_number\');" href="#">'._mmt("Order #").'</a>', 'label'=>'Order#', "attr" => "style='width:65px;'"),
				'transaction_amount'	=> array('content' => '<a onclick="mmjs.sort(\'transaction_amount\');" href="#">'._mmt("Amount").'</a>', 'label'=>'Amount'),
				'last_name'				=> array('content' => '<a onclick="mmjs.sort(\'last_name\');" href="#">'._mmt("Name").'</a>', 'label'=>'Name'),
				'user_email'			=> array('content' => '<a onclick="mmjs.sort(\'user_email\');" href="#">'._mmt("Email").'</a>', 'label'=>'Email'),
				'affiliate_id'			=> array('content' => '<a onclick="mmjs.sort(\'affiliate_id\');" href="#">'._mmt("Affiliate").'</a>', 'label'=>'Affiliate'),
				'sub_affiliate_id'		=> array('content' => '<a onclick="mmjs.sort(\'sub_affiliate_id\');" href="#">'._mmt("Sub-Affiliate").'</a>', 'label'=>'Sub-Affiliate'),
				'description'			=> array('content' => '<a onclick="mmjs.sort(\'description\');" href="#">'._mmt("Description").'</a>', 'label'=>'Description'),
		        'payment_service'		=> array('content' => '<a onclick="mmjs.sort(\'payment_service\');" href="#">'._mmt("Service Provider").'</a>', 'label'=>'Service Provider')
		);
		return $headers;
	}
	
	
	public function getCSVHeaders()
	{
		$headers = $this->getGridHeaders();
		
		$csvHeaders = array();
		foreach ($headers as $k=>$v)
		{
			if (isset($v['label']))
			{
				$csvHeaders[] = $v['label'];
				
				if(strtolower($v['label']) == "amount")
				{
					$csvHeaders[] = "Currency";
				}
			}
			else
			{
				//derive the title from the key of the headers array
				$split = explode("_",$k);
				foreach ($split as &$word)
				{
					$word = ucfirst($word);
				}
				$csvHeaders[] = implode(" ",$split);
			}
		}
		
		return $csvHeaders;
	}
}
