use Stripe\Token;

/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_StripeService is an implementation of the MM_PaymentService interface using Stripe (www.stripe.com)
 */

class MM_StripeService extends MM_ScheduledPaymentService
{
    use MM_LinkedCustomerIdentifier;
    
	protected $token = "STRIPE"; 
	
	protected $testAPIKey = "";
	protected $liveAPIKey = "";
	
	protected $testPublishableKey = "";
	protected $livePublishableKey = "";
	
	protected $testMode = false;	
	
	protected $stripeJSEnabled = false;
	protected $stripeElementsEnabled = true;
	
	protected $supportedCurrencies = array("AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", 
			"BAM", "BBD", "BDT", "BGN", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BZD", "CAD", "CDF", "CHF", 
			"CNY", "COP", "CRC", "CVE", "CZK", "DKK", "DOP", "DZD", "EEK", "EGP", "ETB", "EUR", "FJD", 
			"FKP", "GBP", "GEL", "GIP", "GMD", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", 
			"INR", "ISK", "JMD", "KES", "KGS", "KHR", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", 
			"LSL", "LTL", "LVL", "MAD", "MDL", "MKD", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", 
			"MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "QAR", 
			"RON", "RSD", "RUB", "SAR", "SBD", "SCR", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", 
			"SZL", "THB", "TJS", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", 
			"WST", "XCD", "YER", "ZAR", "ZMW", //end of decimal based currencies
			
			//the following currencies are zero-decimal currencies
			"BIF", "CLP", "DJF", "GNF", "JPY", "KMF", "KRW", "MGA", "PYG", "RWF", "VND", "VUV", "XAF", "XOF", "XPF");
    
	protected const INTENT_PAYMENT_METHOD = "intent_payment_method";
	protected const INTENT_FOR_FORM_SESSION_PREFIX = "intent_for_form_";
	protected const INTENT_PAYMENT_AMOUNT = "intent_payment_amount";
	
	public function __construct($autoload=true)
	{
		parent::__construct($autoload);
		
		if($autoload)
		{
			$this->setupStripe();
		}
	}
	
	
	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/stripe/init.php");
	}
	
	
	public function setData($data)
	{
	    parent::setData($data);
	    
	    // handle data repair for upgrading to MM 2.4.0 - in versions of MM prior to Stripe Elements existing configuration data for Elements 
	    // was not present in the serialized settings. As of 2.4.0 this setting has been set to enabled by default. 
	    // When this setting isn't present in the serialized data, a situation can arise where both Stripe JS and Elements 
	    // are marked as active. This leads to issues on the checkout form. The following code detects this scenario and sets 
	    // the Stripe Elements setting.
	    if (($data->settings != null) && ($data->settings !=""))
	    {
    	    $unserialized_settings = unserialize($data->settings);
    	    
    	    if (is_array($unserialized_settings) && !isset($unserialized_settings["stripeElementsEnabled"]))
            {
                $this->stripeElementsEnabled = false;
                $this->commitData();
    	    }
	    }
	}
	
	
	/**
	 * Initializes the Stripe libraries
	 */
	private function setupStripe()
	{
		if ($this->testMode && !empty($this->testAPIKey))
		{
			\Stripe\Stripe::setApiKey($this->testAPIKey);
		}
		else if (!empty($this->liveAPIKey))
		{
			\Stripe\Stripe::setApiKey($this->liveAPIKey);
		}
		\Stripe\Stripe::setApiVersion("2022-08-01");
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_STRIPE_CUSTOMER_LINKS." (\n".
		  		"stripe_customer_id VARCHAR(255) COLLATE utf8_bin NOT NULL,\n".
		  		"stripe_payment_method VARCHAR(255) NULL,\n".
				"membermouse_customer_id bigint(20) NOT NULL,\n".
				"UNIQUE KEY stripe_customer_id (stripe_customer_id),\n".
				"UNIQUE KEY membermouse_customer_id (membermouse_customer_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_STRIPE_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id varchar(255) COLLATE utf8_bin,\n".
				"last_four varchar(4) NULL,\n".
				"amount decimal(10,2) NOT NULL,\n".
				"currency char(3) NOT NULL DEFAULT 'usd',\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_stripe_charge_charge_id_idx (charge_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_STRIPE_WEBHOOKS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"webhook_id varchar(255),\n".
				"date_received datetime NOT NULL,\n".
				"PRIMARY KEY  (id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Stripe service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		$supported[] = MM_PaymentServiceFeatures::TOKEN_EXCHANGE;
		$supported[] = MM_PaymentServiceFeatures::TEST_MODE;
		$supported[] = MM_PaymentServiceFeatures::MODIFY_REBILL_DATE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Stripe
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/stripe_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post array containing the data posted from the payment methods settings screen
	 * @return MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{
	    $active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
	    $this->setActive($active);
	    
	    if ($active)
	    {
	        $this->install();
	        $config = isset($post['payment_service']['stripe'])?$post['payment_service']['stripe']:array();
	        $emptyErrors = "";
	        $config['test_mode'] = isset($config['test_mode'])?(bool)$config['test_mode']:false;
	        $config['stripe_js_enabled'] = isset($config['stripe_js_enabled'])?(bool)$config['stripe_js_enabled']:false;
	        $config['stripe_elements_enabled'] = isset($config['stripe_elements_enabled'])?(bool)$config['stripe_elements_enabled']:false;
	        
	        if ($config['test_mode'])
	        {
	            if (empty($config['test_api_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Test Secret API Key";
	            }
	            
	            if (($config['stripe_js_enabled'] || $config['stripe_elements_enabled']) && empty($config['test_publishable_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Test Publishable Key";
	            }
	        }
	        else
	        {
	            if (empty($config['live_api_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Live Secret API Key";
	            }
	            
	            if (($config['stripe_js_enabled'] || $config['stripe_elements_enabled']) && empty($config['live_publishable_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Live Publishable Key";
	            }
	        }
	        
	        if ($emptyErrors != "")
	        {
	            return new MM_Response($emptyErrors,MM_Response::$ERROR);
	        }
	        //if here, that means they are all ok
	        
	        $this->setTestMode($config['test_mode']);
	        $this->setStripeJSEnabled($config['stripe_js_enabled']);
	        $this->setStripeElementsEnabled($config["stripe_elements_enabled"]);
	        if ($this->testMode)
	        {
	            $this->setTestAPIKey($config['test_api_key']);
	            if ($this->stripeJSEnabled || $this->stripeElementsEnabled)
	            {
	                $config['test_publishable_key'] = trim($config['test_publishable_key']); //remove whitespace
	                $this->setTestPublishableKey($config['test_publishable_key']);
	            }
	        }
	        else
	        {
	            $this->setLiveAPIKey($config['live_api_key']);
	            if ($this->stripeJSEnabled || $this->stripeElementsEnabled)
	            {
	                $config['live_publishable_key'] = trim($config['live_publishable_key']); //remove whitespace
	                $this->setLivePublishableKey($config['live_publishable_key']);
	            }
	        }
	    } 
	    
	    return new MM_Response();
	}		

	
	private function isTokenSCA($token)
	{
	    if(is_string($token))
	       return preg_match("/^(pi\_|pm\_)/", $token);
	    
	    return false;
	}
	
	/**
	 * Creates a customer in the Stripe System
	 * 
	 * @param MM_User $user The MemberMouse user
	 * @param MM_CustomerAddress $billingAddress The billing address of the customer credit card
	 * @param MM_CardInfo $cardInfo The customer's credit card information, or a payment token if $cardInfo is of type MM_PaymentToken
	 * @param $originalOrderId (optional) The order id to link the local card on file information to
	 * 
	 * @return MM_Response indicating whether the customer was created in the Stripe system successfully
	 */
	public function createCustomer(MM_User $user, MM_CustomerAddress $billingAddress, MM_CardInfo $cardInfo, $originalOrderId=null)
	{
		global $wpdb;
		
		try 
		{
			if ($cardInfo instanceof MM_PaymentToken)
			{ 
		        $sourceParameter = $cardInfo->getToken(); 
			}
			else 
			{
				$sourceParameter = array(
								 "object"			=> "card",
								 "name"				=> $user->getFullName(),
								 "number"    		=> $cardInfo->getCardNumber(),
								 "exp_month" 		=> $cardInfo->getExpirationMonth(),
								 "exp_year"  		=> $cardInfo->getExpirationYear(),
								 "cvc"       		=> $cardInfo->getCVV(),
								 "address_line1"    => $billingAddress->getAddressLine1(),
								 "address_line2"    => $billingAddress->getAddressLine2(),
								 "address_zip"	    => $billingAddress->getPostalCode(),
								 "address_state"    => $billingAddress->getState(),
								 "address_city"     => $billingAddress->getCity(),
								 "address_country"  => $billingAddress->getCountry()
						   );
			}
			$customerData = array(
			    "name" => $user->getFullName(),
				"description" => get_bloginfo()." Customer ID# {$user->getId()} ({$user->getEmail()})",
				"email" => $user->getEmail(),
				"source" => $sourceParameter,
				"metadata" => array(
					"name" => $user->getFullName(),
				),
				);  
			
			//attach billing address to customer if present, for regulatory compliance in India (see https://stripe.com/docs/india-exports)
			if ($billingAddress !== null)
			{
			    $customerData['address'] = ['line1' => $billingAddress->getAddressLine1(),	
			                                'line2' => $billingAddress->getAddressLine2(),
                        			        'city' => $billingAddress->getCity(),
                        			        'state' => $billingAddress->getState(),
                        			        'postal_code' => $billingAddress->getPostalCode(),
                        			        'country' => $billingAddress->getCountry()
			    ];
			}
			
			$stripeCustomer = null;
			if($this->isTokenSCA($sourceParameter))
			{
			    unset($customerData["source"]);  
			     
			    $stripeCustomer = \Stripe\Customer::create($customerData);
			    if(isset($stripeCustomer->id))
		        {    
    		        $paymentMethod = \Stripe\PaymentMethod::retrieve($sourceParameter);
    		        $paymentMethod->attach(['customer' => $stripeCustomer->id]);   
		        }
		        else
		        { 
		            return new MM_Response("Unable to create customer account.", MM_Response::$ERROR);
		        }
			}
			else
			{ 
			    $stripeCustomer = \Stripe\Customer::create($customerData);
			}
			
			
			$linkData = array(
			    "stripe_customer_id"=>$stripeCustomer->id,
			    "membermouse_customer_id"=>$user->getId()
			    );
			
			if($this->isTokenSCA($sourceParameter))
			{
			    $linkData["stripe_payment_method"] = $sourceParameter;
			}
			
			//create link to stripe customer
			$result = $wpdb->insert(MM_TABLE_STRIPE_CUSTOMER_LINKS,$linkData);
			if(!$result)
			{
				//TODO: do something if this fails in the future, ie log. Not a critical enough error to stop the process, but we would be interested to know it happened
			}
			
			//create entry in card on file table
			$cofData = array("user_id"=>$user->getId(), "payment_service_id"=>$this->getId(), "payment_service_identifier"=>$stripeCustomer->id);
			if (!is_null($originalOrderId))
			{
				$cofData['original_order_id'] = $originalOrderId;
			}
			$result = $wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
			if(!$result)
			{
				//TODO: same deal as above: do something if this fails in the future, ie log. Not critical enough error to stop 
			}
			return new MM_Response($stripeCustomer->id);
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(), MM_Response::$ERROR);
		}
	}
	
	/**
	 * Transfer customer link from one user to another
	 * 
	 * @param $fromUserId - ID of the user to transfer the customer link from
	 * @param $toUserId - ID of the user to transfer the customer link to
	 * @return MM_Response
	 */
	public function transferPaymentInfo($fromUserId, $toUserId)
	{
	    $result = $this->transferCardOnFile($fromUserId, $toUserId);
	    
	    if(MM_Response::isSuccess($result))
	    {
	        $result = $this->transferCustomerIdentifier($fromUserId, $toUserId, MM_TABLE_STRIPE_CUSTOMER_LINKS, "stripe_customer_id");
	    }
	    
	    return $result;
	}
	
	/**
	 * Takes a product's trial definition and converts it into days
	 * 
	 * @param MM_Product $product The product to convert the trial of
	 * @return integer representing the number of days, 0 on error
	 */
	private function convertTrialToDays(MM_Product $product)
	{
		if (!$product->hasTrial())
		{
			return 0;
		}
		
		$numUnits = $product->getTrialDuration();
		$unitType = $product->getTrialFrequency();
		switch ($unitType)
		{
			case 'days':
				return $numUnits;
				break;
			case 'weeks':
				return ($numUnits*7);
				break;
			case 'years':
				return ($numUnits*365);
				break;
			default:
				return 0;
		}
	}
	
	
	/**
	 * Respond to Stripe webhooks. Used to detect refunds issued by the other side
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param array $request The $_POST superglobal if it exists, a blank array if not. Ignored in this implementation in favor of php://input
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request) 
	{
		global $wpdb;
		
		$rawRequest = file_get_contents("php://input");
		$webhook = json_decode($rawRequest);
		
		if ($webhook === false)
		{
			return new MM_PaymentServiceResponse("Invalid webhook format: Could not decode JSON",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (isset($webhook->id) && $this->isDuplicateWebhook($webhook->id))
		{
			return new MM_PaymentServiceResponse("Duplicate webhook");
		}
		
		//log the webhook
		$wpdb->insert(MM_TABLE_STRIPE_WEBHOOKS,array("webhook_id"=>$webhook->id,"date_received"=>MM_Utils::getCurrentTime()));
		
		if (!isset($webhook->type))
		{
			//we don't recognize this webhook, so just ignore it
			return new MM_PaymentServiceResponse();
		}
		
		switch ($webhook->type)
		{
			case 'charge.refunded':
				if (!isset($webhook->data) || !isset($webhook->data->object) || !isset($webhook->data->object->id) || 
					!isset($webhook->data->object->refunded) || ($webhook->data->object->refunded != true))
				{
					//not recognizing the object format, or this is a partial refund, ignore
					return new MM_PaymentServiceResponse();
				}
				$transactionLookupSQL = "SELECT t.id as transaction_id FROM ".MM_TABLE_TRANSACTION_LOG." t, ".MM_TABLE_STRIPE_CHARGES." c ".
										"WHERE t.payment_service_id=%s AND ((t.transaction_type=%s) OR (t.transaction_type=%s)) AND t.payment_service_detail_id=c.id AND c.charge_id=%s AND t.refund_id IS NULL";
				$chargeInfo = $wpdb->get_row($wpdb->prepare($transactionLookupSQL,$this->getId(),MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,$webhook->data->object->id));
				if ($chargeInfo != null)
				{
					//found the charge
					$refundResponse = $this->_refundTransaction($chargeInfo->transaction_id,false);
					//doesnt really matter what the response is, we are out of moves if the refund fails
				}
				return new MM_PaymentServiceResponse();
				break;
			default:
				//we don't recognize this webhook, so just ignore it
				return new MM_PaymentServiceResponse();
		}
		
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Detects if the webhook with the supplied id has been processed before
	 * 
	 * @param string $webhookId
	 * @return boolean true if this is a duplicate id, false otherwise
	 */
	protected function isDuplicateWebhook($webhookId)
	{
		global $wpdb;
		
		$count = $wpdb->get_var($wpdb->prepare("SELECT count(*) FROM ".MM_TABLE_STRIPE_WEBHOOKS." WHERE webhook_id=%s",$webhookId));
		return (!is_null($count) && ($count>0));
	} 
	
	
	/**
	 * Utilized to determine the descriptor of a transaction as it would show up in your bank or credit card account.
	 * If needed you can modify the descriptor at the specific service level.
	 * 
	 * @param MM_Order $order object by which the descriptor will refer to
	 * @param string of optional default text that you would want shown.
	 * @return string of resulting descriptor
	 */
	protected function getOrderDescriptor(MM_Order $order, $defaultText=null)
	{   
		return parent::getOrderDescriptor($order, $defaultText);
	}
	
	
	protected function getPaymentIntentDescription(MM_Order $order, $defaultDescription=null)
	{
	    if(is_null($defaultDescription))
	    {
	        $siteName = get_bloginfo('name');
	        $defaultDescription= "Purchase from {$siteName}";
	    }
	    $filteredDescription = apply_filters('mm_stripe_paymentintent_description',$defaultDescription, $order->getDataAsStdClass());
	    return substr($filteredDescription,0,350); //maximum description length set by Stripe is 350 chars
	}
	 
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb; 
		
	    $parentResponse = parent::chargeOrder($order,$cardInfo,$validate);
	    if (!MM_PaymentServiceResponse::isSuccess($parentResponse))
	    {
	        $order->saveOrderStatus(MM_Order::$ERROR_FAILED);
	        return $parentResponse;
	    }  
	    
	    $tryCardOnFile = is_null($cardInfo);
	    if (!$tryCardOnFile)
	    {
	        $cardValidation = $cardInfo->validate();
	        if ($cardValidation !== true)
	        {
	            $order->saveOrderStatus(MM_Order::$ERROR_FAILED);
	            return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
	        }
	    } 
	    
	    //The usage of PaymentIntents on the frontend means that the card may have already been charged, convert this to a PaymentServiceResponse object and extract the payment method
	    $skipPayment = false;
	    $paymentResponse = false;
	    if ($this->stripeElementsEnabled && ($cardInfo instanceof MM_PaymentToken))
	    {
	        $token = $cardInfo->getToken();
	        if ((strpos($token,"pi||") === 0) || (strpos($token,"si||") === 0))
	        {
	            $skipPayment = true;
	            //this is a paymentintent/setupintent and not a payment method, determine the status and extract the payment method
	            $paymentResponse = $this->translateIntentToResponse($token);
	            //verify that the payment matches what is owed
	            if (MM_PaymentServiceResponse::isSuccess($paymentResponse))
	            {
	                $amountOwed = $order->calculateTotal();
	                $amountOwed = $this->convertAmountToInt($amountOwed, $order->getCurrency());
	                $amountPaid = $paymentResponse->data[self::INTENT_PAYMENT_AMOUNT] ?? 0;
	                if ($amountPaid < $amountOwed)
	                {
	                    $paymentResponse->message = "Incorrect payment amount, please contact an administrator";
	                    $paymentResponse->status = MM_PaymentServiceResponse::$ERROR;
	                    MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR,"Amount paid ({$amountPaid}) was less than the order total ({$amountOwed})");
	                }
	            }
	            $cardInfo->setToken($paymentResponse->data[self::INTENT_PAYMENT_METHOD]);
	        }
	    }
	    
		//This next section looks up the customer on Stripe and does the following
		//1. if card on file is supposed to be used, but no customer was found, it exits with an error
		//2. if a card was supplied, and no customer was found, create a new customer on Stripe and attach the card to it
		//3. if a card was supplied AND the customer already exists in Stripe, that customer is updated with the new card information
		//	 and then reused. This means any previous subscriptions get updated to use the new card. Not sure if this is the desired behavior
		
		$productItems = $order->getProducts(); 
		$stripeCustomerId = $this->lookupCustomer($order->getCustomer()->getId());
		
		if ($stripeCustomerId === false)
		{
			if ($tryCardOnFile)
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR);  
			}
			$ccResponse = $this->createCustomer($order->getCustomer(), $order->getBillingAddress(), $cardInfo, $order->id);
			if (MM_Response::isError($ccResponse))
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Error: {$ccResponse->message}",MM_PaymentServiceResponse::$ERROR);   
			}
			$stripeCustomerId = $ccResponse->message;
		}
		else 
		{
			if (!$tryCardOnFile)
			{
				//there is a card on file, but credit card info was sent as well. Update the card on file to be the card that was sent
				$aProductItem = reset($productItems);
				$updateResponse = $this->updateSubscriptionInfo($aProductItem,$cardInfo,$order->getBillingAddress());
				if (MM_PaymentServiceResponse::isError($updateResponse))
				{ 
					$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
					return $updateResponse;   
				}
			}
		} 
    		
		//now setup schedules for the recurring products
		$createScheduledResult = $this->createSchedulesFromProducts($productItems);
		
		if(MM_PaymentServiceResponse::isError($createScheduledResult))
		{
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $createScheduledResult;    
		}
		
		if ($order->getTotal() > 0.00)
		{   
            if ($skipPayment && ($paymentResponse instanceof MM_PaymentServiceResponse))
		    {
		        $chargeResponse = $paymentResponse;
		    }
		    else 
		    {
		        $chargeResponse = $this->sendStripeCharge($order->getTotal(), $order->getCurrency(), $this->getOrderDescriptor($order),$stripeCustomerId,null,null,$order,$this->generateIdempotencyKey($order));
		    }
		    
            if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
            {
                $createdSubscriptions = $createScheduledResult->message;
                if (is_array($createdSubscriptions) && (count($createdSubscriptions) > 0))
                {
                    $this->cancelScheduledSubscriptions($createdSubscriptions);
                }
                $order->saveOrderStatus(MM_Order::$ERROR_FAILED);
                return $chargeResponse;
            } 
		     
			//log to transactions tables
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem = reset($productItems);
				$orderItemId = $orderItem->getId();
			}  
			
			$chargeObject = $chargeResponse->getMessage();
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$chargeId = $chargeObject->id;
			$insertData = array( "order_id"          => $order->getId(),
								 "order_item_id"     => $orderItemId,
								 "charge_id"     	 => $chargeId,
			                     "last_four"         => (isset($chargeObject->card->last4) && !empty($chargeObject->card->last4))?substr($chargeObject->card->last4,-4):"",
								 "amount"            => $order->getTotal(),
								 "currency"          => $order->getCurrency(),
								 "transaction_date"  => $transactionDate
			);
			$wpdb->insert(MM_TABLE_STRIPE_CHARGES,$insertData);
			$stripeChargeId = $wpdb->insert_id;
			 
			
			//now log the payment in the transactions table
			if ($this->testMode)
			{ 
				$res = MM_TransactionLog::createTestTransactionEntry($order->getId(), $orderItemId,$order->getTotal(), $order->getCurrency(),$transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$stripeChargeId,$transactionDate);
			}
			else
			{ 
				$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId,$order->getTotal(), $order->getCurrency(),$transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$stripeChargeId,$transactionDate);
			}
		}
		 
		//errors or failures return early, so reaching this point means payment was successful or the initial payment is 0
		$order->saveOrderStatus(MM_Order::$PAID_COMPLETE);
		 
		//reaching this point means the subscriptions were scheduled and the initial charge was successful
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Send a charge to Stripe, and returns an object containing the unfiltered result.
	 * 
	 * @param integer  $amount The amount to charge. This will be converted to the smallest indivisible unit of the designated currency
	 * @param string   $currency The currency designation to send. Defaults to "usd"
	 * @param string   $description The description to attach to the charge
	 * @param string   $stripeCustomerId (optional) The alphanumeric Stripe customer id to charge. Either customer or cardInfo should be supplied, but not both
	 * @param MM_CardInfo|MM_PaymentToken   $cardInfo (optional) The credit card to charge. Either customer or cardInfo should be supplied, but not both
	 * @param MM_Order $order (optional) Reference to the MM_Order object the charge is being generated for
	 * @param string   $idempotencyKey (optional) String containing a unique key that helps guard against duplication of mutating operations (such as 'charge')
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the stripe charge object returned by the gateway, on failure contains an error message
	 */
	protected function sendStripeCharge($amount, $currency, $description, $stripeCustomerId=null, $cardInfo=null, $billingAddress=null, MM_Order $order=null, $idempotencyKey="")
	{
		if (is_null($currency))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No currency was selected",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($stripeCustomerId) && is_null($cardInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($stripeCustomerId) && !is_null($cardInfo) && is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No billing address was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (!is_numeric($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received a non-numeric amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		/// Does this customer have a payment method id?
		$paymentMethodID = null;
		if(!is_null($stripeCustomerId))
		{
		    $paymentMethodID = $this->lookupPaymentMethodByStripeCustomer($stripeCustomerId);
		}
		
		//VERY IMPORTANT: intval(19.99*100) yields 1998, intval(strval(19.99*100)) yields 1999
		//convert to integer to avoid float-point arithmetic rounding errors
		
		try
		{
			$amount = $this->convertAmountToInt($amount,$currency);
		}
		catch (Exception $e)
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR,$e->getMessage());
			return new MM_PaymentServiceResponse("Unable to create charge: Received an improperly formatted amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		// prepare shipping data
		$shippingData = [];
		
		if($order->isShippable())
		{
		    $shippingAddress = $order->getShippingAddress();
		    $shippingName = $shippingAddress->getFirstName()." ".$shippingAddress->getLastName();
		    if (trim($shippingName) != "")
		    {
		        $shippingData['name'] = $shippingName;
		    }
		    
		    if ( ($shippingAddress->getAddressLine1() != "") || ($shippingAddress->getAddressLine2() != "") || ($shippingAddress->getCity() != "") || ($shippingAddress->getState() != "") || ($shippingAddress->getPostalCode() != "") || ($shippingAddress->getCountry() != "") )
		    {
		        $shippingData['address'] = array();
		        if ($shippingAddress->getAddressLine1() != "")
		        {
		            $shippingData['address']['line1'] = $shippingAddress->getAddressLine1();
		        }
		        
		        if ($shippingAddress->getAddressLine2() != "")
		        {
		            $shippingData['address']['line2'] = $shippingAddress->getAddressLine2();
		        }
		        
		        if ($shippingAddress->getCity() != "")
		        {
		            $shippingData['address']['city'] = $shippingAddress->getCity();
		        }
		        
		        if ($shippingAddress->getCountry() != "")
		        {
		            $shippingData['address']['country'] = $shippingAddress->getCountry();
		        }
		        
		        if ($shippingAddress->getPostalCode() != "")
		        {
		            $shippingData['address']['postal_code'] = $shippingAddress->getPostalCode();
		        }
		        
		        if ($shippingAddress->getState() != "")
		        {
		            $shippingData['address']['state'] = $shippingAddress->getState();
		        }
		    }
		}
		
		// prepare charge data based on the presence of payment method ID
		if(is_null($paymentMethodID))
		{
    		$chargeData = [
    		  "amount"   => $amount,
          	  "currency" => strtolower($currency),				
    		];
    		
    		if(!empty($description))
    		{
    			$chargeData['description'] = $description;
    			$chargeData["statement_descriptor_suffix"] = $description;
    		}
    		
    		if (count($shippingData))
    		{
    		    $chargeData['shipping'] = $shippingData;
    		}
    		
    		if (!is_null($cardInfo))
    		{
      			if ($cardInfo instanceof MM_PaymentToken)
    			{
    			    if(is_null($paymentMethodID))
    			    {
    			         $chargeData['source'] = $cardInfo->getToken();
    			    }
    			}
    			else 
    			{
    				  $chargeData['source'] = array(
    				  		"object"		  => "card",
    				    	"number"   	      => $cardInfo->getCardNumber(),
    				 		"exp_month" 	  => $cardInfo->getExpirationMonth(),
    				 		"exp_year"  	  => $cardInfo->getExpirationYear(),
    			            "cvc"       	  => $cardInfo->getCVV(),
    			            "address_line1"   => $billingAddress->getAddressLine1(),
    			            "address_line2"   => $billingAddress->getAddressLine2(),
    			            "address_zip"	  => $billingAddress->getPostalCode(),
    			            "address_state"   => $billingAddress->getState(),
    			            "address_city"    => $billingAddress->getCity(),
    			            "address_country" => $billingAddress->getCountry()
    			        );
          		}
    		}
    		else 
    		{
    			$chargeData['customer'] = $stripeCustomerId;
    		}
		}
		else
		{
		    $chargeData = [
		        'amount' => $amount,
		        'currency' => strtolower($currency),
		        'payment_method_types' => ['card'],
		        'customer' => $stripeCustomerId,
		        'payment_method' => $paymentMethodID,
		        'off_session' => true,
		        'confirm' => true,
		    ];
		    
		    if (!empty($description))
		    {
		        $chargeData["statement_descriptor_suffix"] = $description;
		    }
		    
		    //add payment intents description if present (different from descriptor) for regulatory compliance in India (see https://stripe.com/docs/india-exports)
		    $piDescription = $this->getPaymentIntentDescription($order);
		    if ($piDescription !== null)
		    {
		        $chargeData['description'] = $piDescription;
		    }
		    
		    if (count($shippingData))
		    {
		        $chargeData['shipping'] = $shippingData;
		    }
		}
		
		try 
		{
		    $chargeObject = null;
		    
		    // create charge based on the presence of payment method ID
		    if(!is_null($paymentMethodID))
		    {   
		        $chargeObject = empty($idempotencyKey) ? \Stripe\PaymentIntent::create($chargeData) : \Stripe\PaymentIntent::create($chargeData,['idempotency_key' => $idempotencyKey]);  
		    }
		    else
		    {
		        $chargeObject = empty($idempotencyKey) ? \Stripe\Charge::create($chargeData) : \Stripe\Charge::create($chargeData,['idempotency_key' => $idempotencyKey]);
		    }
		      
			return new MM_PaymentServiceResponse($chargeObject);
		}
		catch (Exception $e)
		{
			$status = MM_PaymentServiceResponse::$ERROR;
			if (strpos($e->getMessage(),"Invalid currency") !== false)
			{
				$status = MM_PaymentServiceResponse::$FAILED;
			}
			
			if (($e->getCode() == "card_declined") || ($e->getCode() == "expired_card") ||($e->getCode() == "processing_error"))
			{
				//these statuses indicate that the failure is on the remote side, and is not an error in the way the request is constructed.
				$status = MM_PaymentServiceResponse::$FAILED;
			}
			return new MM_PaymentServiceResponse($e->getMessage(), $status);
		}
	}
	
	
	protected function executeSubscriptionPayment(MM_OrderItem $orderItem, $currentRebillNumber,$updatedPaymentInfo=null, $idempotencyKey="")
	{
		global $wpdb;
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		$userId = $order->getCustomer()->getId();
		
		$stripeCustomerId = $this->lookupCustomer($userId);
		if ($stripeCustomerId === false)
		{
			return new MM_PaymentServiceResponse("Invalid card on file for user id {$userId}",MM_Response::$ERROR);
		}
		
		$description = "Order# {$order->getOrderNumber()}"; //, item: {$orderItem->getDescription()}
		
		// PaymentIntent descriptor is limited by 22 characters.
		if(!is_null($stripeCustomerId))
		{
		    $paymentMethodID = $this->lookupPaymentMethodByStripeCustomer($stripeCustomerId);
		    if($this->isTokenSCA($paymentMethodID))
		    {
		        $description = "Order# {$order->getOrderNumber()}";
		    } 
		}
		
		$descriptor = $this->getOrderDescriptor($order, $description);
		
		$chargeResponse = $this->sendStripeCharge($orderItem->getRecurringAmount(), $orderItem->getCurrency(), $descriptor,$stripeCustomerId,null,null,$order,$idempotencyKey);
		
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			return $chargeResponse;
		}
		 
		//log successful transaction
		$chargeObject = $chargeResponse->getMessage();
		$transactionDate = MM_Utils::getCurrentTime();
		$insertData = array( "order_id" => $order->getId(),
				"order_item_id"     => $orderItem->getId(),
				"charge_id"     	=> $chargeObject->id,
				"last_four"         => !empty($chargeObject->card->last4)?substr($chargeObject->card->last4,-4):"",
				"amount"            => $orderItem->getRecurringAmount(),
				"currency"          => $order->getCurrency(),
				"transaction_date"  => $transactionDate);
		
		
		$wpdb->insert(MM_TABLE_STRIPE_CHARGES,$insertData);
		$stripeTableChargeId = $wpdb->insert_id;
		

		if ($this->testMode)
		{
			MM_TransactionLog::createTestTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$stripeTableChargeId);			
		}
		else 
		{
			MM_TransactionLog::createTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$stripeTableChargeId);
		}

		
		// schedule another payment if necessary
		return $this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
	}
	
	
	
	/**
	 * Looks up the Stripe customer id linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return string Stripe customer id if found, boolean false if not found or errored
	 */
	protected function lookupCustomer($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT stripe_customer_id from ".MM_TABLE_STRIPE_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		return $row->stripe_customer_id;
	}
	
	/**
	 * Looks up the Stripe payment method id linked to a MemberMouse user (for elements)
	 *
	 * @param int $userId The MemberMouse user id
	 * @return string Stripe payment method id if found, boolean false if not found or errored
	 */
	protected function lookupPaymentMethodByMMUser($userId)
	{
	    global $wpdb;
	    
	    $lookupSQL = "SELECT stripe_payment_method from ".MM_TABLE_STRIPE_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}' limit 1";
	    $row = $wpdb->get_row($lookupSQL);
	    if (is_null($row))
	    {
	        return false;
	    }
	    return $row->stripe_payment_method;
	}
	
	
	/**
	 * Looks up the Stripe payment method id linked to a Stripe user (for elements)
	 *
	 * @param int $stripeCustomerId The Stripe customer id
	 * @return string Stripe payment method id if found, boolean false if not found or errored
	 */
	protected function lookupPaymentMethodByStripeCustomer($stripeCustomerId)
	{
	    global $wpdb;
	    
	    $lookupSQL = "SELECT stripe_payment_method from ".MM_TABLE_STRIPE_CUSTOMER_LINKS." WHERE stripe_customer_id='{$stripeCustomerId}' limit 1";
	    $row = $wpdb->get_row($lookupSQL);
	    if (is_null($row))
	    {
	        return false;
	    }
	    return $row->stripe_payment_method;
	}
	
	protected function savePaymentMethodReferenceByUser($userId, $paymentMethodId)
	{
	    global $wpdb; 
	    $wpdb->update(MM_TABLE_STRIPE_CUSTOMER_LINKS, array(
	        "stripe_payment_method"=>$paymentMethodId
	    ),array(
	        "membermouse_customer_id"=>$userId
	    ));
	}
	
	protected function savePaymentMethodReferenceByStripeCustomerId($stripeCustomerId, $paymentMethodId)
	{
	    global $wpdb;
	    $wpdb->update(MM_TABLE_STRIPE_CUSTOMER_LINKS, array(
	        "stripe_payment_method"=>$paymentMethodId
	    ),array(
	        "stripe_customer_id"=>$stripeCustomerId
	    ));
	} 
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$stripeCustomerId = $this->lookupCustomer($customerId);
		if ($stripeCustomerId === false)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		} 
		
		
		$user = new MM_User($customerId);
		try 
		{
			$stripeCustomer = \Stripe\Customer::retrieve($stripeCustomerId);
			$stripeCustomer->description = get_bloginfo()." customer id {$user->getId()} ({$user->getEmail()})";
			$stripeCustomer->email = $user->getEmail();
			
			
			if ($cardInfo instanceof MM_PaymentToken)
			{
			    $token = $cardInfo->getToken();
			    if (strpos($token,"si||") === 0)
			    {
			        //this is a paymentintent/setupintent and not a payment method, determine the status and extract the payment method
			        $paymentResponse = $this->translateIntentToResponse($token);
			        $cardInfo->setToken($paymentResponse->data[self::INTENT_PAYMENT_METHOD]);
			    }
			    
				if($this->isTokenSCA($cardInfo->getToken()))
				{   
				    $this->savePaymentMethodReferenceByUser($customerId,$cardInfo->getToken()); 
				    
    				$paymentMethod = \Stripe\PaymentMethod::retrieve($cardInfo->getToken());
    				$paymentMethod->attach(['customer' => $stripeCustomerId]); 
    				 
    				$fieldsToUpdate = array(
    				    "line1"         => $billingAddress->getAddressLine1(),
    				    "line2"         => $billingAddress->getAddressLine2(),
    				    "postal_code"	=> $billingAddress->getPostalCode(),
    				    "state"         => $billingAddress->getState(),
    				    "city"          => $billingAddress->getCity(),
    				    "country"       => $billingAddress->getCountry()
    				);
    				
    				$resultingArray = array();
    				
    				foreach($fieldsToUpdate as $fieldId=>$value)
    				{
    				    if(!is_null($value) && strlen($value)>0)
    				    {
    				        $resultingArray[$fieldId] = $value;
    				    }
    				}
    				
    				if(count($resultingArray)>0)
    				{
    				    $paymentMethod->update($paymentMethod->id,['billing_details'=> ['address'=>$resultingArray]]);
    				}  
				}
				else 
				{  
				    $stripeCustomer->card = $cardInfo->getToken();
				    $stripeCustomer->save();
				}
			}
			else 
			{ 
  				$stripeCustomer->card = array(
		  			  "number"    		   => $cardInfo->getCardNumber(),
		    		  "exp_month" 		   => $cardInfo->getExpirationMonth(),
		    		  "exp_year"  		   => $cardInfo->getExpirationYear(),
		    		  "cvc"       		   => $cardInfo->getCVV(),
		    		  "address_line1"    => $billingAddress->getAddressLine1(),
		    		  "address_line2"    => $billingAddress->getAddressLine2(),
		    		  "address_zip"	     => $billingAddress->getPostalCode(),
		    		  "address_state"    => $billingAddress->getState(),
		    		  "address_city"     => $billingAddress->getCity(),
		    		  "address_country"  => $billingAddress->getCountry(),
			        );
  				
  				$stripeCustomer->save();
		     }
		      
			parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
			
			if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
			{
			    
				return $this->resumeSubscription($orderItem);
			}
			return new MM_PaymentServiceResponse();
		}
		catch (Exception $e)
		{
		    
			return new MM_PaymentServiceResponse($e->getMessage(), MM_PaymentServiceResponse::$ERROR);
		}		
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId,true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Stripe and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Stripe api. If Stripe notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId,$shouldAttemptGatewayRefund=true) 
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$transactionAmount = abs($transactionRow->amount);
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$stripeChargeQuery = "SELECT * from ".MM_TABLE_STRIPE_CHARGES." WHERE id = %s";
				$stripeChargeInfo = $wpdb->get_row($wpdb->prepare($stripeChargeQuery,$transactionRow->payment_service_detail_id));
				$stripeChargeId = $stripeChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			if (empty($stripeChargeId)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			return $this->refundStripeChargeId($stripeChargeId,$transactionId);
		}
		
		return new MM_PaymentServiceResponse(); //success
	}	
	
	
	/**
	 * Refunds a Stripe charge, and logs the refund in the transaction table
	 * 
	 * @param string $stripeChargeId The Stripe identifier for the charge to be refunded
	 * @param int $originalTransactionId The identifier for the membermouse transaction
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function refundStripeChargeId($stripeChargeId, $originalTransactionId)
	{
		global $wpdb;
		
		$alreadyRefunded = false;
		try 
		{
			//do the stripe refund
			if($this->isTokenSCA($stripeChargeId))
			{ 
			    $paymentIntent = \Stripe\PaymentIntent::retrieve($stripeChargeId);
			    if(isset($paymentIntent->charges->data) && is_array($paymentIntent->charges->data))
			    {
			        $piChargeId = $paymentIntent->charges->data[0]->id ?? false;
			        if ($piChargeId == false)
			        {
			            //should never happen
			            return new MM_PaymentServiceResponse("Error refunding transaction: id not found",MM_PaymentServiceResponse::$ERROR);
			        }
			        \Stripe\Refund::create(['charge' => $piChargeId]);
			    }
			}
			else
			{
			    \Stripe\Refund::create(['charge' => $stripeChargeId]);
			}
		}
		catch (Exception $e)
		{
			if (strpos($e->getMessage(),"has already been refunded") !== false)
			{
				$alreadyRefunded = true;
			}
			else 
			{
				return new MM_PaymentServiceResponse("Error refunding transaction: {$e->getMessage()}",MM_PaymentServiceResponse::$ERROR);
			}
		}
			
		//get original transaction details
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
		if (!$alreadyRefunded || ($alreadyRefunded && is_null($originalTransactionInfo->refund_id)))
		{
			$transactionDescription = "Refund for transaction# {$originalTransactionId}";
			$transactionDate = MM_Utils::getCurrentTime();
			
			if ($this->testMode)
			{
				$response = MM_TransactionLog::createTestTransactionEntry($originalTransactionInfo->order_id,
						$originalTransactionInfo->order_item_id,
						$originalTransactionInfo->amount,
						$originalTransactionInfo->currency,
						$transactionDescription,
						MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
						false,
						$this->getId(),
						null,
						$transactionDate,
						$originalTransactionId);
			}
			else 
			{
				$response = MM_TransactionLog::createTransactionEntry($originalTransactionInfo->order_id,
					$originalTransactionInfo->order_item_id,
					$originalTransactionInfo->amount,
					$originalTransactionInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$originalTransactionId);
			}
			if (MM_Response::isSuccess($response))
			{
				$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$originalTransactionId));
			}
		}
		
		if ($alreadyRefunded)
		{
			return new MM_PaymentServiceResponse("This transaction was already refunded by Stripe. The database has been updated",MM_PaymentServiceResponse::$ERROR);
		}
		return new MM_PaymentServiceResponse();		
	}
	
	
	public function getTestAPIKey()
	{
		return $this->testAPIKey;
	}
	
	
	public function setTestAPIKey($testAPIKey)
	{
		$this->testAPIKey = $testAPIKey;
	}
	
	
	public function getLiveAPIKey()
	{
		return $this->liveAPIKey;
	}
	
	
	public function setLiveAPIKey($liveAPIKey)
	{
		$this->liveAPIKey = $liveAPIKey;
	}
	
	public function isStripeElementsEnabled()
	{
	    return $this->stripeElementsEnabled;
	}
	
	public function setStripeElementsEnabled($stripeElementsEnabled)
	{
	    $this->stripeElementsEnabled = (bool)$stripeElementsEnabled;
	}
	
	public function setStripeJSEnabled($stripeJSEnabled)
	{
		$this->stripeJSEnabled = (bool)$stripeJSEnabled;
	}
	
	
	public function isStripeJSEnabled()
	{
		return $this->stripeJSEnabled;
	}
	
	public function getTestPublishableKey()
	{
		return $this->testPublishableKey;
	}
	
	
	public function setTestPublishableKey($testPublishableKey)
	{
		$this->testPublishableKey = $testPublishableKey;
	}
	
	
	public function getLivePublishableKey()
	{
		return $this->livePublishableKey;
	}
	
	
	public function setLivePublishableKey($livePublishableKey)
	{
		$this->livePublishableKey = $livePublishableKey;
	}
	
	
	/**
	 * checkoutInit is called from the checkout form prior to the page being rendered.
	 * If Stripe.js is being used, the javascript library is enqueued
	 * 
	 * @see MM_PaymentService::checkoutInit()
	 */
	public function checkoutInit()
	{
	    if($this->stripeElementsEnabled)
	    {
	        $this->stripeJSInit(array("stripeElements", "membermouse-checkout-form"));
	    }
	    else if ($this->stripeJSEnabled)
	    {
	        $this->stripeJSInit(array("stripeJS", "membermouse-checkout-form"));
	    }
	}	
	
	
	/**
	 * stripeJSInit is responsible for all Stripe-related javascript initialization and enqueueing. Despite the name, this method does not 
	 * specifically serve the "Stripe.js" option; All stripe javascript should be initialized here. The enqueued/localized scripts serve as "bridges"
	 * between the checkout form javascript and the stripe specific logic, and this is what the term bridge refers to in the context of this class
	 * 
	 * @param array $bridgeDependencies The dependencies that must be loaded prior to any bridge scripts. It is a string array of enqueue handles, empty by default
	 */
	protected function stripeJSInit($bridgeDependencies=array())
	{  
	    if ($this->stripeElementsEnabled)
	    {
	        wp_enqueue_script("stripeElements", "https://js.stripe.com/v3/", array(), MemberMouse::getPluginVersion(), true);
	        wp_enqueue_script("membermouse-stripeElements", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-stripe-elements.js"), $bridgeDependencies, MemberMouse::getPluginVersion(), true);
	        wp_localize_script('membermouse-stripeElements', 'stripeElementsInfo', array('stripePublishableKey' => $this->inTestMode()?$this->getTestPublishableKey():$this->getLivePublishableKey(),
	            'improperStripeResponseErrorMsg' => _mmt("An improper response was received from Stripe, please try again"),
	            'stripeAjaxNonce' => wp_create_nonce('mm_stripe_ajax_nonce')
	        ));
	    }
		else if ($this->stripeJSEnabled)
		{
		    wp_enqueue_script("stripeJS", "https://js.stripe.com/v2/", array(), MemberMouse::getPluginVersion(), true);
		    wp_enqueue_script("membermouse-stripeJS", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-stripe-token-exchange.js"), $bridgeDependencies, MemberMouse::getPluginVersion(), true);
		    wp_localize_script('membermouse-stripeJS', 'stripeJSInfo', array('stripePublishableKey' => $this->inTestMode()?$this->getTestPublishableKey():$this->getLivePublishableKey(),
		        'improperStripeResponseErrorMsg' => _mmt("An improper response was received from Stripe, please try again")));
		}
	}
	
	
	/**
	 * Creates a new Stripe PaymentIntent or SetupIntent based on the $expectedTotal and $currency. If the amount is greater than 0 the result is a paymentintent
	 * Otherwise a setupintent is returned
	 *
	 * @param float $expectedTotal The amount used to initialize the intent
	 * @param string $currency The currency of the $expectedTotal
	 * @return MM_Response Contains the created PaymentIntent or SetupIntent on success, on error it contains a descriptive error message
	 */
	public function createIntent($expectedTotal,$currency="")
	{
	    try
	    {
	        $currency = empty($currency) ? MM_CurrencyUtil::getActiveCurrency() : $currency;
	        if (($expectedTotal == 0.00) || !is_numeric($expectedTotal))
	        {
	            $intentType = "setupintent";
	            $intent = \Stripe\SetupIntent::create([
	                'usage' => 'off_session', // The default usage is off_session
	            ]);
	        }
	        else 
	        {
	            $intentType = "paymentintent";
    	        $intAmount = $this->convertAmountToInt($expectedTotal,$currency);
    	        $descVar = get_bloginfo('name');
    	        $defaultDescription = substr("Purchase from {$descVar}",0,350);
    	        $stateDesc = "Purchase from {$descVar}";
    	        $createVars = [
    	            'amount' => $intAmount,
    	            'currency' => strtolower($currency),
    	            'setup_future_usage' => 'off_session',
    	            'description' => $defaultDescription,
    	        ];
    	        if (strlen($stateDesc) <= 22)
    	        {
    	            $createVars['statement_descriptor'] = $stateDesc;
    	        }
    	        $intent = \Stripe\PaymentIntent::create($createVars);
	        }

          $returnVal = (object)["id"=>$intent->id, "type"=>$intentType, "clientSecret"=>$intent->client_secret, "amount"=>$expectedTotal, "currency"=>$currency];
	        return new MM_Response($returnVal);
	    }
	    catch(Exception $e)
	    {
	        MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Stripe service cannot create {$intentType}: ".$e->getMessage());
	        return new MM_Response(_mmt("Improper gateway configuration."),MM_Response::$ERROR);
	    }
	}
	
	
	
	public function updateIntent($amount,$intentID,$intentType)
	{
	    try
	    {
	        $intentType = strtolower(trim($intentType));
	        if (!in_array($intentType,['paymentintent','setupintent']))
	        {
	            throw new Exception("Unknown Stripe intent type sent to updateIntent()");
	        }
	        
    	    $currency = MM_CurrencyUtil::getActiveCurrency();
    	    if ((($intentType == 'paymentintent') && ($amount == 0.00)) ||  //previous intent is the wrong type (ie. a paymentintent for a product with a free coupon) so create a new one of the correct type
    	       (($intentType == 'setupintent') && ($amount > 0.00))) 
    	    {
    	        return $this->createIntent($amount,$currency);
    	    }
	        
	        if ($intentType == 'paymentintent')
	        {
    	        $intAmount = $this->convertAmountToInt($amount,$currency);
    	        $intent = \Stripe\PaymentIntent::update($intentID,[
    	            'amount' => $intAmount,
    	            'currency' => strtolower($currency),
    	            'setup_future_usage' => 'off_session'
    	        ]);
	        }
	        else 
	        {
	            $intent = \Stripe\SetupIntent::update($intentID,[
	                'usage' => 'off_session', // The default usage is off_session
	            ]);
	            $intentType = "setupintent";
	        }

          $returnVal = (object)["id"=>$intent->id, "type"=>$intentType, "clientSecret"=>$intent->client_secret, "amount"=>$amount, "currency"=>$currency];
	        return new MM_Response($returnVal);
	    }
	    catch(Exception $e)
	    {
	        MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Stripe service cannot create {$intentType}: ".$e->getMessage());
	        return new MM_Response(_mmt("Improper gateway configuration."),MM_Response::$ERROR);
	    }
	}
	
	
	/**
	 *  doInitHook for Stripe sets up the AJAX endpoints for creating PaymentIntents
	 */
	public function doInitHook()
	{
	    add_action('template_redirect',function() {
	        if (is_404()) {
	            $request_uri = $_SERVER['REQUEST_URI'];
	            if (stripos($request_uri,'/mmouse/notify/stripe/whk') !== false) {
	                status_header(200); // Set the HTTP response code to 200
	                exit;
	            }
	        }
	    });
	    
	    if (wp_doing_ajax())
	    {	    	    	
	        add_action( 'wp_ajax_mm_stripe_validate_checkout', function() {
	            $this->validateCheckout();
	        });
	    	  add_action( 'wp_ajax_nopriv_mm_stripe_validate_checkout', function() {
	    	      $this->validateCheckout();
	    	});
	    }
	}
	
	
	public function setTestMode($testMode)
	{
		$testMode = (bool)$testMode;
		if ($this->testMode != $testMode)
		{
			$this->setupStripe(); //attempt to catch programmatic mode changes and reinitialize Stripe
		}
		$this->testMode = $testMode;
	}
	
	
	public function getTestMode()
	{
		return $this->testMode;
	}
	
	
	/**
	 * @see MM_PaymentService::inTestMode()
	 */
	public function inTestMode()
	{
		return $this->getTestMode();
	}
	
	
	/**
	 * @see MM_PaymentService::switchToTestMode()
	 */
	public function switchToTestMode()
	{
		$this->setTestMode(true);
		return true;
	}
	
	
	/**
	 * Load Stripe.js on my account page to support the card update operation
	 *
	 * @see MM_PaymentService::myAccountInit()
	 */
	public function myAccountInit()
	{
	    if ($this->stripeJSEnabled)
	    {
	        $this->stripeJSInit(array("stripeJS","membermouse-myaccount-js"));
	    }
	    else if($this->stripeElementsEnabled)
	    {
	        $this->stripeJSInit(array("stripeElements", "membermouse-myaccount-js"));
	        $intentResponse = $this->createIntent(0.00);
	        if (MM_Response::isSuccess($intentResponse))
	        {
	            $intentSetString = "mmStripeElements.activeIntent = ".json_encode($intentResponse->message).";";
	            wp_add_inline_script('membermouse-stripeElements', $intentSetString);
	        }
	    } 
	}
	
	
	public function tokenExchangeEnabled()
	{
	    return $this->stripeJSEnabled || $this->stripeElementsEnabled;
	}
	
	
	public function hasHostedPaymentFields() 
	{
	    return $this->stripeElementsEnabled;
	}
	
	
	public function formFieldOverride($formType, $fieldName)
	{
	    
        switch ($fieldName)
	    {
	        case 'ccnumber':
	            return "<div id='mm_field_cc_number_div' class='mm-stripe-elements-container'></div>\n";
	            break;
	        case 'ccexpirationdate':
	            return "<div id='mm_field_cc_exp_div' class='mm-stripe-elements-container'></div>\n";
	            break;
	        case 'ccsecuritycode':
	            return "<div id='mm_field_cc_cvv_div' class='mm-stripe-elements-container'></div>\n";
	            break;
	        default:
	            return false;
	    }
	}


    protected function convertAmountToInt($amount,$currency)
	{
		if (empty($amount) || empty($currency))
		{
			throw new Exception("Could not convert amount to integer; invalid data supplied");
		}
		$currencyMeta = MM_CurrencyUtil::getCurrencyMetadata($currency);
		$intMultiplier = pow(10,intval($currencyMeta['frac_digits']));
		$amount = intval(strval($amount * $intMultiplier));
		return $amount;
	}
	
	
	/**
	 * Takes a string from the frontend which starts with "pi||" or "si||" and retrieves the paymentintent/setupintent having the id that follows that identifier.
	 * The status of this Intent is then queried from Stripe and translated into a MM_PaymentServiceResponse
	 * 
	 * @param String $token The token from the front end, which consists of "pi||" or "si||" followed by an id
	 * @param boolean $updateDescription Whether to update the description and statement descriptor of a paymentintent. 
	 * 
	 * @return MM_PaymentServiceResponse The status of this object will be success if payment was made successfully, failed if the payment failed, and error if authentication is required or some other error occurred
	 */
	protected function translateIntentToResponse($token, $updateDescription=false)
	{
	    try 
	    {
	        $intentID = substr($token,4);
	        $intentType = substr($token,0,2);
	        if ($intentType == "pi")
	        {
	            $intentType = "payment";
	            $intent = \Stripe\PaymentIntent::retrieve($intentID);
	        }
	        else if ($intentType == "si")
	        {
	            $intentType = "setup";
	            $intent = \Stripe\SetupIntent::retrieve($intentID);
	        }
	        else 
	        {
	            throw new Exception("Unknown intent type");
	        }
	        
	        
	        $status = strtolower($intent->status ?? "error");
	        
	        //use latest_charge if present, if not, use the first element of the charges array
	        if (!empty($intent->latest_charge))
	        {
	            $lastCharge = ((object) array("id"=>$intent->latest_charge));
	        }
	        else 
	        {
	            $chargesDataArray = $intent->charges->data ?? [];
	            $lastCharge = reset($chargesDataArray);
	        }
	        
	        $response = new MM_PaymentServiceResponse();
	        $smas = function($message,$status="") use ($response,$intent) { //Set Message And Status
	            $response->setMessage($message);
	            if (!empty($status))
	            {
	                $response->setStatus($status);
	            }
	            $response->data[self::INTENT_PAYMENT_METHOD] = $intent->payment_method ?? false;
	            $response->data[self::INTENT_PAYMENT_AMOUNT] = $intent->amount ?? 0;
	            return $response;
	        };
	        switch($status)
	        {
	            case 'requires_payment_method':
	                if ($lastCharge !== false)
	                {
	                    //When a payment method is declined, the intent returns to the "requires_payment_method" state. A decline can be differentiated from an intent where no payment method was attached by the presence of (attempted) charges
	                    return $smas("The transaction was declined",MM_PaymentServiceResponse::$FAILED);
	                }
	                else
	                {
	                    return $smas("Payment is required",MM_PaymentServiceResponse::$ERROR);
	                }
	                break;
	                
	            case 'canceled':
	                throw new Exception("{$intentType}intent has canceled status");
	                break;
	            
	            case 'succeeded':
	                return $smas($lastCharge);
	                break;
	             
	            default:
	                throw new Exception("{$intentType}intent has an unknown/unhandled status");
	                break;
	        }
	    } 
	    catch (Exception $e) 
	    {
	        MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR,"An error occurred when attempting to retrieve Stripe PaymentIntent with id {$intentID}: ".$e->getMessage());
	        $errorMsg = _mmt("An error occurred while processing your payment, please try again");
	        return $smas($errorMsg,MM_PaymentServiceResponse::$ERROR);
	    }
	}
	
	
	public function validateCheckout() 
	{
	    check_ajax_referer('mm_stripe_ajax_nonce');
	    $response = new MM_Response();
	    if (!isset($_POST["data"]))
	    {
	        MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "AJAX checkout validation handler did not receive form data");
	        $response = new MM_Response(_mmt("An error was encountered during checkout. Please refresh and try again"),MM_Response::$ERROR);
	    }
	    else
	    {
	        $formData = [];
	        parse_str($_POST['data'], $formData);
	        
	        //use DefaultOrderRequest to verify checkout data via AJAX, by setting the attribute "validateOnly"
	        $formData['mm_field_payment_token'] = 'placeholder'; //so that token exchange validation doesnt throw an error
	        $orderRequest = new MM_DefaultOrderRequest($formData);
	        $orderRequest->validateOnly = true;
	        $orderRequest->processRequest();
	        $validationResponse = $orderRequest->continueSubmittingRequest();
	        if (MM_PaymentServiceResponse::isSuccess($validationResponse))
	        {
	            //only generate an intent if validation was successful, and check if one exists in session for this form before generating a new one
	            
	            //Generate an intent
	            $order = $orderRequest->getOrder();
	            $order->preprocessOrder(true);
	            $expectedTotal = $order->calculateTotal();
	            $expectedTotalAsInt = $this->convertAmountToInt($expectedTotal, $order->getCurrency());
	            $formID = $formData['mm_submission_mutex'] ?? false; //reuse the submission mutex key as a unique id for the form
	            
	            $intent = ($formID !== false) ? MM_Session::value(self::INTENT_FOR_FORM_SESSION_PREFIX.$formID) : false;
	            
	            if (is_object($intent))
	            {
	                //there is an existing intent, which means this form was processed before and there was an error (or a change). Reuse the existing intent
	                //$returnVal = (object)["type"=>$intentType,"clientSecret"=>$intent->client_secret, "amount"=>$amount, "currency"=>$currency];
	                if ($intent->amount != $expectedTotalAsInt)
	                {
	                    $intentResponse = $this->updateIntent($expectedTotal, $intent->id, $intent->type);
	                    if (MM_Response::isSuccess($intentResponse))
	                    {
	                        $intent = $intentResponse->message;
	                        $response->message = $intent;
	                    }
	                    else
	                    {
	                        //there was an error creating or updating an intent; can't continue 
	                        $response->message = $intentResponse->message;
	                        $response->type = MM_Response::$ERROR;
	                    }
	                }
	            }
	            else 
	            {
	                //create an intent for this request
	                $intentResponse = $this->createIntent($expectedTotal,$order->getCurrency());
	                if (MM_Response::isSuccess($intentResponse))
	                {
	                    $intent = $intentResponse->message;
	                    if ($formID !== false)
	                    {
	                        MM_Session::value(self::INTENT_FOR_FORM_SESSION_PREFIX.$formID,$intent); //store in session in case there is an error and we have to revalidate
	                    }
	                    $response->message = $intent;
	                }
	                else
	                {
	                    //there was an error creating an intent; can't continue
	                    $response->message = $intentResponse->message;
	                    $response->type = MM_Response::$ERROR;
	                }
	            }
	        }
	        else
	        {
	            $response->message = $validationResponse->message;
	            $response->type = MM_Response::$ERROR;
	        }
	    }
	    echo json_encode($response);
	    exit;
	}

	/**
	* return the value of the name attribute
	* @return string the value of the name attribute
	*/
	public function getName()
	{
		return apply_filters( 'mm_stripe_payment_method_title', $this->name );
	}
}