/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ProductView extends MM_RBACProductManagerView
{	
    public static $MM_JSACTION_HIDE = "hideproduct";
    public static $MM_JSACTION_SHOW = "showproduct";
    public static $MM_JSACTION_SET_ACTIVE = "setActive";
    public static $MM_JSACTION_SET_INACTIVE = "setInactive";
    public static $MM_JSACTION_GET_MEMBERMOUSE_PRODUCT_DESC = "getMMProductDescription";
    public static $SEARCH_OPTION_SHOW_HIDDEN = "mm-option-show-hidden-products";
    public static $MM_JSACTION_STORE_SEARCH_OPTIONS = "storeSearchOptions";
    public static $MM_JSACTION_SEARCH = "search";
	
    use MM_EnhancedDatagridView {
        bulkDelete as filteredBulkDelete;
    }
	use MM_NonMemberObjectView;
	
	protected $defaultSortCol = "p.id DESC";

	public function __construct()
	{
		parent::__construct();
	}
	
	public function performAction($post)
	{
	    $response = parent::performAction($post);
	    
	    if(!($response instanceof MM_Response))
	    {
	        switch($post[self::$MM_JSACTION])
	        {
	            case self::$MM_JSACTION_SAVE:
	                return $this->saveProduct($post);
	                
	            case self::$MM_JSACTION_REMOVE:
	                return $this->removeProduct($post);
	                
	            case self::$MM_JSACTION_SHOW_BUY_NOW_LINKS:
	                return $this->showPurchaseLinks($post);
	                
	            case self::$MM_JSACTION_GET_MEMBERMOUSE_PRODUCT_DESC:
	                return $this->getMMProductDescription($post);
	                
	            case self::$MM_JSACTION_HIDE:
	                return $this->hideProduct($post);
	                
	            case self::$MM_JSACTION_SHOW:
	                return $this->showProduct($post);
	                
	            case self::$MM_JSACTION_STORE_SEARCH_OPTIONS:
	                return $this->storeSearchOptions($post);
	                
	            case self::$MM_JSACTION_SEARCH:
	                return $this->search($post);
	                
	            case self::$MM_JSACTION_SET_ACTIVE:
	                return $this->setActive($post,new MM_Product());
	                
	            case self::$MM_JSACTION_SET_INACTIVE:
	                return $this->setInactive($post,new MM_Product());
	                
	            default:
	                return new MM_Response($response);
	        }
	    }
	    else
	    {
	        return $response;
	    }
	}
	
	
	public function preprocessSearch($queryMeta)
	{
	    global $current_user;
	    
	    if(isset($current_user->ID))
	    {
	        $showHidden = (MM_OptionUtils::getOption(self::$SEARCH_OPTION_SHOW_HIDDEN."-".$current_user->ID) == "1") ? true : false;
	        if (!$showHidden)
	        {
	            $queryMeta->query->conditions[] = (object)['name'=>'is_hidden','value'=>'0','rel'=>'eq'];
	        }
	    }
	}
	
		
	/**
	 * Query the database and return the unprocessed results in object format
	 * 
	 * @param MM_Datagrid $dg The datagrid that will be displaying the results
	 * @param array $criteria An array of key-value pairs used to filter search results
	 * 
	 * @return object The unprocessed results represented as a paginated array of value objects
	 */
	protected function getRawData($criteria=array())
	{
	    global $wpdb;
	    
	    $dataset = $this->processQueryMeta($criteria,"p");
	    $whereString = $dataset->whereString;
	    $orderString = $dataset->orderString;
	    $limitString = $dataset->limitString;
	    
	    $sqlResultCount = "select count(*) as total from ".MM_TABLE_PRODUCTS. " p {$whereString}";
	    $dataset->total = $wpdb->get_var($sqlResultCount);
	    //TODO: use EXPLAIN to ensure this makes sense versus multiple queries
	    //TODO: add appropriate indexes
	    $cs = "<mm_col_sep>";
	    $gs = "<mm_group_sep>";
	    $sql = "SELECT p.id, p.description, p.reference_key,p.status,p.name,p.sku,p.price,p.currency,p.is_shippable,".
	   	    "p.has_trial,p.trial_frequency,p.trial_amount,p.trial_duration,p.rebill_period,p.rebill_frequency,p.do_limit_trial,".
	   	    "p.limit_trial_alt_product_id,p.do_limit_payments,p.number_of_payments,p.last_modified,p.commission_profile_id,p.is_hidden, ".
	   	    "(SELECT GROUP_CONCAT(CONCAT_WS('{$cs}',sb.id,sb.name) SEPARATOR '{$gs}') AS bundle_info FROM ".MM_TABLE_BUNDLES." sb INNER JOIN ".
	   	    MM_TABLE_BUNDLE_PRODUCTS." sbp ON (sb.id = sbp.bundle_id) WHERE sbp.product_id=p.id) AS bundles, ".
	   	    "(SELECT GROUP_CONCAT(CONCAT_WS('{$cs}',sml.id,sml.name) SEPARATOR '{$gs}') AS membership_info FROM ".MM_TABLE_MEMBERSHIP_LEVELS." sml INNER JOIN ".
	   	    MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." smlp ON (sml.id = smlp.membership_id) WHERE smlp.product_id=p.id) AS membership_levels ".
	   	    "FROM ".MM_TABLE_PRODUCTS." p {$whereString}{$orderString}{$limitString}";
	    
	   	$sql = trim($sql);
	    $rows = $wpdb->get_results($sql);
	    
	    //add billing description
	    foreach ($rows as $productObj)
	    {
	        $tmpProduct = new MM_Product($productObj->id,false);
	        $productObj->description = ""; //these next two fields aren't needed for the data grid, insert placeholders so we can create an entity and utilize framework
	        $productObj->purchase_confirmation_message = ""; 
	        $tmpProduct->setData($productObj);
	        $productObj->billing_description = $tmpProduct->getBillingDescription();
	        $productObj->is_being_used = MM_Product::isBeingUsed($productObj->id) ? 1 : 0;
	        $productObj->has_been_purchased = MM_Product::hasBeenPurchased($productObj->id) ? 1 : 0;
	        unset($productObj->description);
	        unset($productObj->purchase_confirmation_message);
	        
	        $bundleArray = [];
	        if (!empty($productObj->bundles))
	        {
	            $splitBundles = explode($gs,$productObj->bundles);
	            foreach ($splitBundles as $aSplitBundle)
	            {
	                $splitBundleCols = explode($cs,$aSplitBundle);
	                if (count($splitBundleCols) == 2)
	                {
	                    $bundleArray[] = (object)["id" => $splitBundleCols[0],"name" => $splitBundleCols[1]]; //order needs to match the params to group_concat in the select
	                }
	            }
	        }
	        $productObj->bundles = $bundleArray;
	        
	        //should only be 1 membership level, but this code takes into account the possibility for an incorrect data relationship in the db
	        $mlArray = [];
	        if (!empty($productObj->membership_levels))
	        {
	            $splitMls = explode($gs,$productObj->membership_levels);
	            foreach ($splitMls as $aSplitMl)
	            {
	                $splitMlCols = explode($cs,$aSplitMl);
	                if (count($splitMlCols) == 2)
	                {
	                    $mlArray[] = (object)["id" => $splitMlCols[0],"name" => $splitMlCols[1]]; 
	                }
	            }
	        }
	        $productObj->membership_levels = $mlArray;
	    }
	    
	    $pageCounter = ($dataset->pageNum == -1) ? 1 : $dataset->pageNum; //TODO: implement -1 as a marker for unpaginated
	    $dataset->data[$pageCounter] = [];
	    $prefetchSize = ($dataset->prefetchSize < 0)?0:$dataset->prefetchSize;
	    $pfCount = -1;
	    
	    foreach (array_chunk($rows, $dataset->pageSize) as $k=>$page)
	    {
	        if ($pfCount >= $prefetchSize)
	        {
	            break;
	        }
	        $pageCounter = $dataset->pageNum + $k; //by default array_chunk will use numeric keys starting wih 0
	        $dataset->data[$pageCounter] = $page;
	        $pfCount++;
	    }
	   
	    return $dataset;
	}
	
	
	private function hideProduct($post)
	{
	    if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$product = new MM_Product($id);
			$product->setIsHidden(true); 
			if(isset($post["status"]) && preg_match("/^(0|1)$/", $post["status"]))
			{
				$product->setStatus(intval($post["status"]));
			}
			$result = $product->commitData();
			$response = new MM_Response();
			$response->addData("total_hidden", MM_Product::getTotalHidden());
			
			if($result !== false)
			{
			    $response->message = "This product has been hidden from the list view.\n\nCheck off the 'Show hidden products' checkbox to view hidden products.";
			}
		}
		return $response;
	}
	
	
	private function showProduct($post)
	{
		if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$product = new MM_Product($id);
			$product->setIsHidden(false);
			if(isset($post["status"]) && preg_match("/^(0|1)$/", $post["status"]))
			{
				$product->setStatus(intval($post["status"]));
			}
			$result = $product->commitData();
			$response = new MM_Response();
			$response->addData("total_hidden", MM_Product::getTotalHidden());
			
			if($result !== false)
			{
				$response->message = "This product will now be displayed in the list view.";
			}
		}
		return $response;
	}
	
	private function saveProduct($post)
	{
		if(!preg_match("/^[0-9\.]+$/", $post["mm_price"]))
		{
			return new MM_Response("Price must be a valid number", MM_Response::$ERROR);
		}
		
		if(floatval($post["mm_price"]) <= 0)
		{
			return new MM_Response("Price must be greater than 0.\n\nIf you want to create a free membership level or bundle, no product is needed.", MM_Response::$ERROR);
		}
		
		if($post["mm_trial_amount"]!="" && !preg_match("/^[0-9\.]+$/", $post["mm_trial_amount"]))
		{
			return new MM_Response("Trial amount must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_trial_duration"]!="" && !preg_match("/^[0-9]+$/", $post["mm_trial_duration"]))
		{
			return new MM_Response("Trial duration must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_rebill_period"]!="" && !preg_match("/^[0-9]+$/", $post["mm_rebill_period"]))
		{
			return new MM_Response("Rebill preiod must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_number_of_payments"]!="" && !preg_match("/^[0-9]+$/", $post["mm_number_of_payments"]))
		{
			return new MM_Response("Number of payments must be a valid number", MM_Response::$ERROR);
		}
		
		if(intval($post["mm_do_limit_trial"]) == 1 && empty($post["mm_trial_alternate_product"]))
		{
			return new MM_Response("An alternate product must be defined in order to limit the trial to one per member", MM_Response::$ERROR);
		}
		
		if($post["mm_is_recurring_val"] != "1")
		{
			$post["mm_rebill_period"] = "0";
			$post["mm_rebill_frequency"] = "";
		}
		
		//if a product has a trial, there must be at least one recurring billing, so ensure that all products with trials are configured as subscriptions
		if (($post["mm_has_trial_val"] == "1") && ($post["mm_is_recurring_val"] != "1"))
		{
			return new MM_Response("Products with a trial must be configured as Subscription products",MM_Response::$ERROR);
		}
		
		if($post["mm_status"] == "active")
		{
			$post["mm_status"] = "1";
		}
		else
		{
			$post["mm_status"] = "0";
		}
		
		$isUpdate = false;
		if(isset($post["mm_id"]) && intval($post["mm_id"]) > 0)
		{
			$product = new MM_Product($post["mm_id"]);
			if ($product->isValid())
			{
				$isUpdate = true;
			}
		}
		else
		{
			$product = new MM_Product();
		}
		
		$product->setName($post["mm_name"]);
		$product->setStatus($post["mm_status"]);
		$product->setSku($post["mm_sku"]);
		$product->setIsShippableFlag($post["mm_is_shippable_val"]);
		$product->setHasTrialFlag($post["mm_has_trial_val"]);
		$product->setTrialAmount($post["mm_trial_amount"]);
		$product->setTrialDuration($post["mm_trial_duration"]);
		
		if ($product->hasTrial())
		{
			$product->setLimitTrialFlag($post["mm_do_limit_trial"]);
			
			if($product->doLimitTrial() && isset($post["mm_trial_alternate_product"]))
			{
				$product->setLimitTrialAltProductId($post["mm_trial_alternate_product"]);
			}
			else
			{
				$product->setLimitTrialAltProductId('0');
			}
		}
		else 
		{
			$product->setLimitTrialFlag(false);
			$product->setLimitTrialAltProductId(0);
		}
		
		if(isset($post["mm_purchase_confirmation_message"]))
		{
			$product->setPurchaseConfirmationMessage($post["mm_purchase_confirmation_message"]);
		}
		
		$product->setDescription($post["mm_description"]);
		$product->setPrice($post["mm_price"]);
		$product->setRebillPeriod($post["mm_rebill_period"]);
		$product->setRebillFrequency($post["mm_rebill_frequency"]);
		$product->setTrialFrequency($post["mm_trial_frequency"]);
		
		if((isset($post["mm_do_limit_payments"]) && intval($post["mm_do_limit_payments"]) == 1) 
				&& (isset($post["mm_number_of_payments"]) && intval(isset($post["mm_number_of_payments"])) > 0))
		{
			$product->setLimitPaymentsFlag(1);
			$product->setNumberOfPayments(intval($post["mm_number_of_payments"]));
		}
		else
		{
			$product->setLimitPaymentsFlag(0);
			$product->setNumberOfPayments(0);
		}
		
		$product->setCommissionProfileId($post["mm_commission_profile_selector"]);
		
		$response = $product->commitData();
		
		if ($response->type == MM_Response::$ERROR) 
		{
			return $response;
		}
	
		// set partner payouts
		$product->deletePartners();
		
		foreach($post as $key => $value)
		{
			if(strpos($key, 'mm_partner_') === 0)
			{
				$partnerId = str_replace("mm_partner_", "", $key);
				$affiliateId = $value;
				$commissionProfileId = $post["mm_commission_profile_{$partnerId}"];
				
				if(empty($commissionProfileId))
				{
					$commissionProfileId = MM_CommissionProfile::$DFLT_COMMISSION_PROFILE_ID;
				}

				if(!empty($affiliateId))
				{
					$product->addPartner($affiliateId, $commissionProfileId);
				}
			}
		}
		
		// remove old access association (if any)
		if(isset($post["mm_last_associated_access_type"]))
		{
			if($post["mm_last_associated_access_type"] == "membership")
			{
				if(isset($post["mm_last_associated_access_id"]))
				{
					$membership = new MM_MembershipLevel($post["mm_last_associated_access_id"]);
						
					if($membership->isValid())
					{
						// check if this is the last product associated with the membership level
						$products = $membership->getProductIds();
						
						if((isset($post["mm_associated_access_value"]) && $post["mm_associated_access_value"] == "none" && count($products) == 1))
						{
							return new MM_Response("Cannot remove '{$product->getName()}' from '{$membership->getName()}' because it is a paid membership level and this is the only product associated with it.\n\nIf you want to disassociate this product, go to the membership level and change it to a free membership level.", MM_Response::$ERROR);
						}
						else
						{
							$membership->removeProduct($product->getId());
						}
					}
				}
			}
			else if($post["mm_last_associated_access_type"] == "bundle")
			{
				if(isset($post["mm_last_associated_access_id"]))
				{
					$bundle = new MM_Bundle($post["mm_last_associated_access_id"]);
						
					if($bundle->isValid())
					{
						// check if this is the last product associated with the bundle
						$products = $bundle->getAssociatedProducts();
						
						if((isset($post["mm_associated_access_value"]) && $post["mm_associated_access_value"] == "none" && count($products) == 1))
						{
							return new MM_Response("Cannot remove '{$product->getName()}' from '{$bundle->getName()}' because it is a paid bundle and this is the only product associated with it.\n\nIf you want to disassociate this product, go to the bundle and change it to a free bundle.", MM_Response::$ERROR);
						}
						else
						{
							$bundle->removeProduct($product->getId());
						}
					}
				}
			}
		}
		
		// add new access association
		if(isset($post["mm_associated_access_value"]))
		{
			if($post["mm_associated_access_value"] == "membership")
			{
				if(isset($post["mm_membership_access_selector"]))
				{
					$membership = new MM_MembershipLevel($post["mm_membership_access_selector"]);
					
					if($membership->isValid())
					{
						$membership->removeProduct($product->getId());
						$membership->addProduct($product->getId());
					}
				}
			}
			else if($post["mm_associated_access_value"] == "bundle")
			{
				if(isset($post["mm_bundle_access_selector"]))
				{
					$bundle = new MM_Bundle($post["mm_bundle_access_selector"]);
					
					if($bundle->isValid())
					{
						$bundle->removeProduct($product->getId());
						$bundle->addProduct($product->getId());
					}
				}
			}
		}
		
		$mediator = new MM_PaymentServiceMediator();
		$response = (!$isUpdate)?$mediator->notifyProductAdded($product):$mediator->notifyProductUpdated($product);
		
		if ($response->type == MM_Response::$ERROR)
		{
			if (!$isUpdate)
			{
				//if a payment service blocks addition of a product, remove the newly created product
				//however if its an update on the payment service side that fails, keep the changes and simply notify the user
				$product->remove(); 
			}
			return $response;
		}
		
		return new MM_Response();	
	}
	
	private function removeProduct($post)
	{
		if(!isset($post["id"]))
		{
			return new MM_Response("ID is required", MM_Response::$ERROR);
		}
		
		$product = new MM_Product($post["id"]);
		
		$mediator = new MM_PaymentServiceMediator();
		$response = $mediator->notifyProductRemoved($product);
		
		if ($response->type == MM_Response::$ERROR)
		{
			return $response;
		}
		
		if($product->remove())
		{
			return new MM_Response();
		}
		
		return new MM_Response("Product could not be removed due to existing associations", MM_Response::$ERROR);
	}
	
	private function showPurchaseLinks($post)
	{
		if(isset($post["product_id"]) && isset($post["product_name"]))
		{
			$data = new stdClass();
			$data->productName = stripslashes($post["product_name"]);
			$data->smartTag = "<a href=\"[MM_Purchase_Link productId='{$post["product_id"]}']\">Buy Now</a>";
			$data->staticLink = MM_CorePageEngine::getCheckoutPageStaticLink($post["product_id"]);
			
			$content = MM_TEMPLATE::generate(MM_MODULES."/".MM_MODULE_PRODUCTS.".".MM_MODULE_PURCHASE_LINKS.".dialog.php", $data);
			return new MM_Response($content);
		}
		else
		{
			return new MM_Response("Product ID and product name are required to display purchase links", MM_Response::$ERROR);
		}
	}
	
	private function getMMProductDescription($post)
	{
		if(isset($post["mm_product_id"]))
		{
			$product = new MM_Product($post["mm_product_id"]);
			
			if($product->isValid())
			{
				$mmProductDescription = $product->getBillingDescription()." ";
				 
				if($product->hasTrial())
				{
					$mmProductDescription .= MM_Utils::getIcon('clock-o', 'beige', '1.3em', '2px', 'Has Trial', 'margin-right:5px;');
				}
				 
				if($product->isRecurring())
				{
					if($product->doLimitPayments())
					{
						$mmProductDescription .= MM_Utils::getIcon('calendar-o', 'beige', '1.3em', '2px', 'Payment Plan', 'margin-right:5px;');
					}
					else
					{
						$mmProductDescription .= MM_Utils::getIcon('refresh', 'beige', '1.3em', '2px', 'Subscription', 'margin-right:5px;');
					}
				}
				 
				if($product->isShippable())
				{
					$mmProductDescription .= MM_Utils::getIcon('truck', 'beige', '1.3em', '2px', 'Requires Shipping', 'margin-right:5px;');
				}
				 
				if($product->getSku() != "")
				{
					$mmProductDescription .= MM_Utils::getIcon('barcode', 'beige', '1.3em', '2px', "SKU [".$product->getSku()."]", 'margin-right:5px;');
				}
				
				return new MM_Response($mmProductDescription);
			}
			else 
			{
				return new MM_Response("Error retrieving MemberMouse product description. Invalid product ID '{$post["mm_product_id"]}'.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error retrieving MemberMouse product description. No product ID specified.", MM_Response::$ERROR);
		}
	}

	
	private function storeSearchOptions($post)
	{
		if(isset($post["mm_admin_id"]))
		{
			if(isset($post["mm_show_hidden_products"]))
			{
				$optionName = self::$SEARCH_OPTION_SHOW_HIDDEN."-".$post["mm_admin_id"]; 
				MM_OptionUtils::setOption($optionName, $post["mm_show_hidden_products"]);
			} 
			
			return new MM_Response();
		}
		else
		{
			return new MM_Response("Unable to store product search options. Couldn't find current admin user ID.", MM_Response::$ERROR);
		}
	}
	
	
	public function bulkDelete($post)
	{
	    global $wpdb;
	    
	    $idsInUse = false;
	    $numItems = isset($post['selected_ids'])?count($post['selected_ids']):0;
	    if ($numItems > 0)
	    {
	        $idString = $this->getIDString($post);
	        $sql = $wpdb->prepare("SELECT mlp.product_id FROM ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mlp WHERE mlp.product_id IN (%1s)",$idString);
	        $x = $wpdb->get_col($sql);
	        
	        $sql = $wpdb->prepare("SELECT mbp.product_id FROM ".MM_TABLE_BUNDLE_PRODUCTS." mbp WHERE mbp.product_id IN (%1s)",$idString);
	        $y = $wpdb->get_col($sql);
	        
	        $sql = $wpdb->prepare("SELECT p.id as product_id FROM ".MM_TABLE_PRODUCTS." p WHERE (p.has_trial = 1) AND (p.do_limit_trial = 1) AND (p.limit_trial_alt_product_id IN (%1s))",$idString);
	        $z = $wpdb->get_col($sql);
	        
	        $usedProductIDS = array_unique(array_merge($x,$y,$z));
	        if (count($usedProductIDS) > 0)
	        {
	           //at least 1 product selected is in use and can't be deleted. Remove the in-use products, perform the operation, and return a descriptive message
	           $idsInUse = true;
	           $unusedIds = array_diff($post['selected_ids'],$usedProductIDS);
	           $post['selected_ids'] = $unusedIds;
	        }
	    }
	    
	    $response = $this->filteredBulkDelete($post);
	    if ($idsInUse && MM_Response::isSuccess($response))
	    {
	        $append = " ("._mmt("Some items are in use and could not be deleted").")";
	        $response->message .= $append;
	    }
	    return $response;
	}
	
}
