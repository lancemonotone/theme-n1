/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ImportWizardView extends MM_RBACGeneralEmployeeView
{	
	public static $REQUIRED_NUM_COLUMNS = 23;
	public static $IMPORT_SOURCE_COMPUTER = "computer";
	public static $IMPORT_SOURCE_URL = "url";
	
	private $importFile = "";
	private $newMemberCount = 0;
	private $updatedMemberCount = 0;
	private $membershipLevelId = 0;
	private $membership;
	
	public static $MM_JSACTION_IMPORT_CHUNK = "importChunk";

	public function __construct()
	{
		parent::__construct();
	}
	
	
	public function performAction($post)
	{
		switch($post[self::$MM_JSACTION])
		{
			case self::$MM_JSACTION_IMPORT_CHUNK:
			    return $this->importChunk($post);	
			    break;
			default:
				return parent::performAction($post);
		}
	}
	
	
	/**
	 * Prepares an object containing import data for processing. Currently expands the bundles column into an array (if present), 
	 * and trims whitespace from the name and email columns
	 * 
	 * @param stdClass $memberObj An object decoded from JSON provided by the front-end csv parser
	 * @return stdClass The preprocessed object. This is superfluous in most cases due to objects being passed by reference in PHP
	 */
	protected function preprocessMemberData($memberObj)
	{
	    $memberObj->username = trim($memberObj->username);
	    $memberObj->email = trim($memberObj->email);
	    $bundleStats = ["bundles","bundleStatus","bundleStartDates","bundleExpirationDates"];
	    foreach ($bundleStats as $bundleStat)
	    {
	        $memberObj->$bundleStat = !empty($memberObj->$bundleStat) ? explode("|", $memberObj->$bundleStat) : array();
	    }
	    return $memberObj;
	}
	
	
	/**
	 * Processes a chunk of POSTed import data from a csv file and attempts to import the contained members and assign access
	 * 
	 * @param mixed $post The POST data received
	 * 
	 * @return MM_Response On success the message attribute contains an array enumerating success and error counts. A descriptive error message is sent on error
	 */
	protected function importChunk($post)
	{
	    $success = 0;
	    $errors = 0;
	    $options = json_decode($post["importOpts"] ?? "{}") ?? new stdClass();
	    
	    if (!isset($options->importMembershipLevel))
	    {
	        return new MM_Response("Membership level ID is required", MM_Response::$ERROR);
	    }
	    
	    $this->membershipLevelId = $options->importMembershipLevel;
	    $this->membership = new MM_MembershipLevel($this->membershipLevelId);
	    
	    if(!$this->membership->isValid())
	    {
	        return new MM_Response("Invalid Membership level ID '{$this->membershipLevelId}'.", MM_Response::$ERROR);
	    }
	    
	    //TODO: test custom fields
	    //TODO: test send welcome email flag
	    //TODO: test remote
	    try 
	    {
	        if (!isset($post["data"]))
	        {
	            throw new Exception("No data was received");
	        }
	        
	        $memberChunk = json_decode($post["data"]);
	        if (!is_array($memberChunk))
	        {
	            throw new Exception("Error decoding import chunk JSON");
	        }
	        
	        $customFieldsPresent = [];
	        
	        //preprocess the first record to get a column count and determine what (if any) custom fields are present
	        if (isset($memberChunk[0]))
	        {
	            $columnNames = get_object_vars($memberChunk[0]);
	            foreach ($columnNames as $cn=>$cv)
	            {
	                $testCN = strtolower($cn);
	                if (strpos($testCN,"custom field") === 0)
	                {
	                    $testCN = str_replace("custom field","",$testCN);
	                    $testCN = trim($testCN);
	                    if (is_numeric($testCN))
	                    {
	                        //key by the fieldname in the export, with the value being the extracted field id. This makes both easy to reference later
	                        $customFieldsPresent[$testCN] = $cn;
	                    }
	                }
	            }
	        }
	        
	        $doSendWelcomeEmail = $options->sendNewMemberEmails ?? false; 
	        $now = MM_Utils::getCurrentTime();
	        unset($post["data"]); //since we don't need it anymore, allow the JSON string to be garbage-collected if memory runs low
	        
	        //memory is a concern here as well as efficiency, since we do not know the specs of the server. reversing the array and using array_pop allows us to do 
	        //one operation of o(n), and then iterate using an access method (array_pop) that has an o(1) efficiency. The advantage over using a regular foreach-loop is 
	        //that after each loop iteration, the item popped using array_pop is eligible for garbage_collection, so memory usage can theoretically decrease after every iteration
	        arsort($memberChunk); 
	        while ($importMember = array_pop($memberChunk))
	        {	            
	            $this->preprocessMemberData($importMember); //expand bundles, trim whitespace from name and email
	            if(!isset($importMember->email) || empty($importMember->email))
	            {
	                MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Row received without email column");
	                $errors++;
	                continue;
	            }
	            
	            $user = MM_User::findByEmail($importMember->email);
	            
	            if($user->isValid())
	            {
	                $isUpdate = true;
	                
	                // determine if this is just a WordPress user, if so, create a row in MM user data table
	                // so that the update goes through successfully
	                global $wpdb;
	                $sql = "SELECT * FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$user->getId()}' LIMIT 1;";
	                $mmUserData = $wpdb->get_row($sql);
	                
	                if(!$mmUserData)
	                {
	                    $mmUserData = array();
	                    $mmUserData["wp_user_id"] = $user->getId();
	                    $result = $wpdb->insert(MM_TABLE_USER_DATA, $mmUserData);
	                }
	            }
	            else
	            {
	                $isUpdate = false;
	                $user->setImportedFlag(true);
	            }
	            
	            // set fields on user object
	            $user->setEmail($importMember->email);
	            $user->setMembershipId($this->membershipLevelId); 
	            
	            if(isset($importMember->status) && !empty($importMember->status))
	            {
	                // only set status if it's valid
	                if(MM_Status::getName($importMember->status) != "")
	                {
	                    $user->setStatus($importMember->status);
	                }
	            }
	            
	            if($doSendWelcomeEmail)
	            {
	                if($user->getStatus() == MM_Status::$ACTIVE)
	                {
	                    $user->setSendWelcomeEmailFlag(true);
	                }
	            }
	            else
	            {
	                $user->setSendWelcomeEmailFlag(false);
	            }
	            
	            if(isset($importMember->username) && !empty($importMember->username))
	            {
	                $user->setUsername($importMember->username);
	            }
	            if(isset($importMember->firstName) && !empty($importMember->firstName))
	            {
	                $user->setFirstName($importMember->firstName);
	            }
	            if(isset($importMember->lastName) && !empty($importMember->lastName))
	            {
	                $user->setLastName($importMember->lastName);
	            }
	            if(isset($importMember->phone) && !empty($importMember->phone))
	            {
	                $user->setPhone($importMember->phone);
	            }
	            if(isset($importMember->registrationDate) && !empty($importMember->registrationDate))
	            {
	                $timestamp = strtotime($importMember->registrationDate);
	                
	                if($timestamp != -1)
	                {
	                    $user->setRegistrationDate(date("Y-m-d", $timestamp));
	                }
	            }
	            if($this->membership->doesExpire())
	            {
	                if(isset($importMember->expirationDate) && !empty($importMember->expirationDate))
	                {
	                    $timestamp = strtotime($importMember->expirationDate);
	                    
	                    if($timestamp != -1)
	                    {
	                        $expirationDate = date("Y-m-d", $timestamp);
	                    }
	                }
	                else
	                {
	                    // set expiration date based on start date
	                    if(isset($importMember->registrationDate) && !empty($importMember->registrationDate))
	                    {
	                        $timestamp = strtotime($importMember->registrationDate);
	                        
	                        if($timestamp != -1)
	                        {
	                            $startDate = date("Y-m-d", $timestamp);
	                        }
	                        else
	                        {
	                            $startDate = $now;
	                        }
	                    }
	                    else
	                    {
	                        $startDate = $now;
	                    }
	                    
	                    $expirationDate = $this->membership->getExpirationDate($startDate);
	                }
	                
	                $user->setExpirationDate($expirationDate);
	            }
	            if(isset($importMember->password) && !empty($importMember->password))
	            {
	                // only set password for new members
	                if(!$isUpdate)
	                {
	                    $user->setPassword($importMember->password);
	                }
	            }
	            if(isset($importMember->billingAddress) && !empty($importMember->billingAddress))
	            {
	                $user->setBillingAddress($importMember->billingAddress);
	            }
	            if(isset($importMember->billingAddress2) && !empty($importMember->billingAddress2))
	            {
	                $user->setBillingAddress2($importMember->billingAddress2);
	            }
	            if(isset($importMember->billingCity) && !empty($importMember->billingCity))
	            {
	                $user->setBillingCity($importMember->billingCity);
	            }
	            if(isset($importMember->billingState) && !empty($importMember->billingState))
	            {
	                $user->setBillingState($importMember->billingState);
	            }
	            if(isset($importMember->billingZip) && !empty($importMember->billingZip))
	            {
	                $user->setBillingZipCode($importMember->billingZip);
	            }
	            if(isset($importMember->billingCountry) && !empty($importMember->billingCountry))
	            {
	                $user->setBillingCountry($importMember->billingCountry);
	            }
	            if(isset($importMember->shippingAddress) && !empty($importMember->shippingAddress))
	            {
	                $user->setShippingAddress($importMember->shippingAddress);
	            }
	            if(isset($importMember->shippingAddress2) && !empty($importMember->shippingAddress2))
	            {
	                $user->setShippingAddress2($importMember->shippingAddress2);
	            }
	            if(isset($importMember->shippingCity) && !empty($importMember->shippingCity))
	            {
	                $user->setShippingCity($importMember->shippingCity);
	            }
	            if(isset($importMember->shippingState) && !empty($importMember->shippingState))
	            {
	                $user->setShippingState($importMember->shippingState);
	            }
	            if(isset($importMember->shippingZip) && !empty($importMember->shippingZip))
	            {
	                $user->setShippingZipCode($importMember->shippingZip);
	            }
	            if(isset($importMember->shippingCountry) && !empty($importMember->shippingCountry))
	            {
	                $user->setShippingCountry($importMember->shippingCountry);
	            }
	            
	            $user->setIsCSVImport(true);
	            $result = $user->commitData();
	            
	            if(MM_Response::isError($result))
	            {
	                $errors++;
	                continue;
	            }
	            else
	            {
	                $success++;
	                if($isUpdate)
	                {
	                    $this->updatedMemberCount++;
	                }
	                else
	                {
	                    $this->newMemberCount++;
	                }
	            }
	            
	            // add custom data
	            foreach ($customFieldsPresent as $cfID=>$cfName)
	            {
	                $user->setCustomData($cfID,$importMember->$cfName);
	            }
	            
	            // add bundles
	            if(isset($importMember->bundles) && count($importMember->bundles) > 0)
	            {
	                for($i = 0; $i < count($importMember->bundles); $i++)
	                {
	                    $bundleId = $importMember->bundles[$i];
	                    
	                    if(intval($bundleId) > 0)
	                    {
	                        $result = $user->addBundle($bundleId, true);
	                        
	                        if(MM_Response::isSuccess($result))
	                        {
	                            $appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundleId);
	                            
	                            if($appliedBundle->isValid())
	                            {
	                                // set status
	                                if(isset($importMember->bundleStatus[$i]) && !empty($importMember->bundleStatus[$i]))
	                                {
	                                    if(MM_Status::isValidStatus($importMember->bundleStatus[$i]))
	                                    {
	                                        $appliedBundle->setStatus($importMember->bundleStatus[$i]);
	                                    }
	                                }
	                                
	                                // set start date
	                                if(isset($importMember->bundleStartDates[$i]) && !empty($importMember->bundleStartDates[$i]))
	                                {
	                                    $timestamp = strtotime($importMember->bundleStartDates[$i]);
	                                    
	                                    if($timestamp != -1)
	                                    {
	                                        $appliedBundle->setApplyDate(date("Y-m-d", $timestamp));
	                                    }
	                                }
	                                
	                                // set expiration date
	                                if($appliedBundle->doesExpire())
	                                {
	                                    if(isset($importMember->bundleExpirationDates[$i]) && !empty($importMember->bundleExpirationDates[$i]))
	                                    {
	                                        $timestamp = strtotime($importMember->bundleExpirationDates[$i]);
	                                        
	                                        if($timestamp != -1)
	                                        {
	                                            $expirationDate = date("Y-m-d", $timestamp);
	                                        }
	                                    }
	                                    else
	                                    {
	                                        // set expiration date based on start date
	                                        if(isset($importMember->bundleStartDates[$i]) && !empty($importMember->bundleStartDates[$i]))
	                                        {
	                                            $timestamp = strtotime($importMember->bundleStartDates[$i]);
	                                            
	                                            if($timestamp != -1)
	                                            {
	                                                $startDate = date("Y-m-d", $timestamp);
	                                            }
	                                            else
	                                            {
	                                                $startDate = $now;
	                                            }
	                                        }
	                                        else
	                                        {
	                                            $startDate = $now;
	                                        }
	                                        
	                                        $expirationDate = $appliedBundle->getBundle()->getExpirationDate($startDate);
	                                    }
	                                    
	                                    $appliedBundle->setExpirationDate($expirationDate);
	                                }
	                                
	                                $appliedBundle->commitData();
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    } 
	    catch (Exception $e) 
	    {
	        MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR,$e->getMessage());
	        return new MM_Response(_mmt("Error processing import chunk:"._mmt($e->getMessage())),MM_Response::$ERROR);
	    }
	    
	    $statistics = (object)["success"=>$success,"errors"=>$errors];
	    return new MM_Response($statistics);
	}
}
