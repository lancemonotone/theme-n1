/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 */

class MM_StripeConnect
{
	private static $notifiers = array(
      'whk' => 'listener',
      'stripe-service-whk' => 'service_listener',
      'update-billing.html' => 'churn_buster'
    );

	public static function get_notifiers() {
		return self::$notifiers;
	}
 
	public static function get_method_id() {
		return 'stripe';
	}

	/**
	* Assembles the URL for redirecting to Stripe Connect
	*
	* @param  string $id         Payment ID
	* @param  bool   $onboarding True if we are onboarding
	* @return string
	*/
	public static function get_stripe_connect_url($method_id = '') {

		if( '' === $method_id ) {
			$method_id = self::get_method_id();
		}

		$args = array(
		  'action' => 'mm_stripe_connect_update_creds',
		  '_wpnonce' => wp_create_nonce( 'stripe-update-creds' )
		);

		$base_return_url = add_query_arg( $args, admin_url( 'admin-ajax.php' ) );

		$error_url = add_query_arg( array(
		  'mm-action' => 'error'
		), $base_return_url );

		$site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );

		if ( empty( $site_uuid ) ) {
		  return false;
		}

		$payload = array(
		  'method_id' => $method_id,
		  'site_uuid' => $site_uuid,
		  'user_uuid' => MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_USER_UUID ),
		  'return_url'=> $base_return_url,
		  'error_url' => $error_url,
		  'webhook_url'  => self::notify_url( $method_id, 'whk' ),
		  'service_webhook_url' => self::notify_url( $method_id, 'stripe-service-whk' ),
		  'mp_version' => MemberMouse::getPluginVersion()
		);

		$jwt = MM_AuthUtils::generate_jwt( $payload );
		return MM_STRIPE_SERVICE_URL  . "/connect/{$site_uuid}/{$method_id}/{$jwt}";
	}

	/** Returns the url of a given notifier for the current gateway */
	public static function notify_url($method_id, $action, $force_ssl=false) {
		if(isset(self::$notifiers[$action])) {
		  $permalink_structure = MM_OptionUtils::getOption('permalink_structure');
		  $force_ugly_urls = MM_OptionUtils::getOption('mm_force_ugly_gateway_notify_urls');

		  if($force_ugly_urls || empty($permalink_structure)) {
		    $url = MMOUSE_SCRIPT_URL."&pmt={$method_id}&action={$action}";
		  }
		  else {
		    $notify_url = preg_replace('!%gatewayid%!', $method_id, MM_GatewayUtils::gateway_notify_url_structure());
		    $notify_url = preg_replace('!%action%!', $action, $notify_url);

		    $url = site_url($notify_url);
		  }

		  if($force_ssl) {
		    $url = preg_replace('/^http:/','https:',$url);
		  }

		  $slug = 'stripe';
		  $url = apply_filters('mm_gateway_notify_url', $url, $slug, $action, $method_id);
		  return apply_filters("mm_gateway_{$slug}_{$action}_notify_url", $url, $method_id);
		}

		return false;
	}

	/**
	* Process a request to retrieve credentials after a connection
	*
	* @return void
	*/
	public static function process_update_creds() {

		// Security check
		if ( ! isset( $_GET['_wpnonce'] ) || ! wp_verify_nonce( $_GET['_wpnonce'], 'stripe-update-creds' ) ) {
		  wp_die(__('Sorry, updating your credentials failed. (security)', 'membermouse'));
		}

		// Check for the existence of any errors passed back from the service
		if ( isset( $_GET['error'] ) ) {
		  if( 'access_denied' === (string) $_GET['error'] ) {
		  	$redirect_url = add_query_arg( array(
				'mm-action-message' => esc_html( $_GET['error'] )
			), MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS, MM_MODULE_PAYMENT_METHODS) );
			wp_safe_redirect( $redirect_url );
			exit;
		  } else {
		  	wp_die( sanitize_text_field( urldecode( $_GET['error'] ) ) );	
		  }
		}

		// Make sure we have a method ID
		if ( ! isset( $_GET['pmt'] ) ) {
		  wp_die(__('Sorry, updating your credentials failed. (pmt)', 'membermouse'));
		}

		// Make sure the user is authorized
		if ( ! MM_AuthUtils::is_authorized() ) {
		  wp_die(__('Sorry, you don\'t have permission to do this.', 'membermouse'));
		}

		self::update_connect_credentials();

		$stripe_action = ( ! empty( $_GET['stripe-action'] ) ? sanitize_text_field( $_GET['stripe-action'] ) : 'updated' );

		$redirect_url = add_query_arg( array(
			'stripe-action' => $stripe_action
		), MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS, MM_MODULE_PAYMENT_METHODS) );
		
		wp_redirect($redirect_url);
		exit;
	}

	/** Fetches the credentials from Stripe-Connect and updates them in the payment method. */
	private static function update_connect_credentials() {

		$site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );

		$payload = array(
		  'site_uuid' => $site_uuid
		);

		$method_id = self::get_method_id();
		$jwt = MM_AuthUtils::generate_jwt( $payload );

		// Make sure the request came from the Connect service
		$response = wp_remote_get( MM_STRIPE_SERVICE_URL . "/api/credentials/".$method_id, array(
		  'headers' => MM_AuthUtils::jwt_header($jwt, MM_STRIPE_SERVICE_DOMAIN)
		) );

		$creds = json_decode( wp_remote_retrieve_body( $response ), true );
		
		$stripe_service = new MM_StripeService();
		$stripe_service->setActive(true);
		$stripe_service->setTestAPIKey($creds['test_secret_key']);
		$stripe_service->setTestPublishableKey($creds['test_publishable_key']);
		$stripe_service->setLiveAPIKey($creds['live_secret_key']);
		$stripe_service->setLivePublishableKey($creds['live_publishable_key']);
		$stripe_service->commitData();

		update_option( 'mm_stripe_connect_status', 'connected' );
		update_option( 'mm_stripe_service_account_id', sanitize_text_field( $creds['service_account_id'] ) );
		update_option( 'mm_stripe_service_account_name', sanitize_text_field( $creds['service_account_name'] ) );
	}

	public static function stripe_connect_status() {
		return MM_OptionUtils::getOption( 'mm_stripe_connect_status', 'not-connected' );
	}

	/**
	* Process a request to refresh tokens
	*
	* @return void
	*/
	public static function process_refresh_tokens() {

		// Security check
		if ( ! isset( $_GET['_wpnonce'] ) || ! wp_verify_nonce( $_GET['_wpnonce'], 'stripe-refresh' ) ) {
		  wp_die(__('Sorry, the refresh failed.', 'membermouse'));
		}

		// Make sure we have a method ID
		if ( ! isset( $_GET['method-id'] ) ) {
		  wp_die(__('Sorry, the refresh failed.', 'membermouse'));
		}

		// Make sure the user is authorized
		if ( ! MM_AuthUtils::is_authorized() ) {
		  wp_die(__('Sorry, you don\'t have permission to do this.', 'membermouse'));
		}

		$method_id = self::get_method_id();
		$site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );

		$payload = array(
		  'site_uuid' => $site_uuid
		);

		$jwt = MM_AuthUtils::generate_jwt( $payload );

		// Send request to Connect service
		$response = wp_remote_post( MM_STRIPE_SERVICE_URL . "/api/refresh/{$method_id}", array(
		  'headers' => MM_AuthUtils::jwt_header($jwt, MM_STRIPE_SERVICE_DOMAIN),
		) );

		$body = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( ! isset( $body['connect_status'] ) || 'refreshed' !== $body['connect_status'] ) {
		  wp_die(__('Sorry, the refresh failed.', 'membermouse'));
		}


		$stripe_service = new MM_StripeService();
		$stripe_service->setActive(true);
		$stripe_service->setTestAPIKey($body['test_secret_key']);
		$stripe_service->setTestPublishableKey($body['test_publishable_key']);
		$stripe_service->setLiveAPIKey($body['live_secret_key']);
		$stripe_service->setLivePublishableKey($body['live_publishable_key']);
		$stripe_service->commitData();

		update_option( 'mm_stripe_connect_status', 'connected' );
		update_option( 'mm_stripe_service_account_id', sanitize_text_field( $body['service_account_id'] ) );
		update_option( 'mm_stripe_service_account_name', sanitize_text_field( $body['service_account_name'] ) );

		$redirect_url = add_query_arg( array(
		  	'stripe-action' => 'refreshed'
		), MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS, MM_MODULE_PAYMENT_METHODS) );
		

		wp_redirect($redirect_url);
		exit;
	}

	/**
	* Process a request to disconnect
	*
	* @return void
	*/
	public static function process_disconnect() {

		// Security check
		if ( ! isset( $_GET['_wpnonce'] ) || ! wp_verify_nonce( $_GET['_wpnonce'], 'stripe-disconnect' ) ) {
		  wp_die(__('Sorry, the disconnect failed.', 'membermouse'));
		}

		// Make sure the user is authorized
		if ( ! MM_AuthUtils::is_authorized() ) {
		  wp_die(__('Sorry, you don\'t have permission to do this.', 'membermouse'));
		}

		$res = self::disconnect();

		if(!$res) {
		  wp_die(__('Sorry, the disconnect failed.', 'membermouse'));
		}

		update_option( 'mm_stripe_connect_status', 'disconnected' );

		$stripe_service = new MM_StripeService();
		$stripe_service->setActive(false);
		$stripe_service->commitData();

		$redirect_url = add_query_arg( array(
		  	'stripe-action' => 'disconnected'
		), MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS, MM_MODULE_PAYMENT_METHODS) );
		
		wp_redirect($redirect_url);
		exit;
	}

	private static function disconnect() {

		$site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );
		$method_id = self::get_method_id();

		// Attempt to disconnect at the service
		$payload = array(
		  'method_id' => $method_id,
		  'site_uuid' => $site_uuid
		);

		$jwt = MM_AuthUtils::generate_jwt( $payload );

		// Send request to Connect service
		$response = wp_remote_request( MM_STRIPE_SERVICE_URL . "/api/disconnect/{$method_id}", array(
		  'method' => 'DELETE',
		  'headers' => MM_AuthUtils::jwt_header($jwt, MM_STRIPE_SERVICE_DOMAIN),
		) );

		$body = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( ! isset( $body['connect_status'] ) || 'disconnected' !== $body['connect_status'] ) {
		  return false;
		}

		return true;
	}

	public static function payment_method_title( $title ) {
		
		if( is_admin() && isset($_GET['page']) && MM_MODULE_PAYMENT_SETTINGS === $_GET['page'] ) {
			$title = __('Stripe (Recommended)', 'membermouse');
		}

		return $title;
	}

	public static function stripe_connect_save_settings() {
		check_ajax_referer( 'new-stripe-connect', 'security' );

	    $form_data = urldecode($_POST['form_data']);

	    $data = array();
	    parse_str($form_data, $data);

	    if( ! isset($data['payment_service']) ) {
	    	echo wp_json_encode(array('status' => 'error', 'message' => __('Invalid request.', 'membermouse')));
	    	exit;
	    }

	    if( isset($data['payment_service']['stripe']) ) {

	    	$data = $data['payment_service']['stripe'];

	    	$stripe_data = array();
	    	$stripe_data['test_mode'] = isset($data['test_mode'])?(bool)$data['test_mode']:false;
	        $stripe_data['stripe_js_enabled'] = isset($data['stripe_js_enabled'])?(bool)$data['stripe_js_enabled']:false;
	        $stripe_data['stripe_elements_enabled'] = isset($data['stripe_elements_enabled'])?(bool)$data['stripe_elements_enabled']:false;

	    	$stripe_service = new MM_StripeService();
			$stripe_service->setTestMode($stripe_data['test_mode']);
			$stripe_service->setStripeElementsEnabled($stripe_data['stripe_elements_enabled']);
			$stripe_service->setStripeJSEnabled($stripe_data['stripe_js_enabled']);
			$stripe_service->commitData();
	    }

	    echo wp_json_encode(array('status' => 'success', 'message' => __('You successfully updated Stripe payment method settings.', 'membermouse')));
	    exit;
	}

	protected static function has_method_with_connect_status( $target_status ) { 

		$stripe_service = new MM_StripeService();
	    $using_stripe = $stripe_service->getActive();

	    if( ! $using_stripe ) {
	    	return false; // bailout.
	    }

		$status = self::stripe_connect_status();
		if( $target_status === $status ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	* Display an admin notice for upgrading Stripe payment methods to Stripe Connect
	*
	* @return void
	*/
	public static function upgrade_notice() {
		if ( self::has_method_with_connect_status( 'not-connected' ) ) {
		  ?>
		    <style>
			.mm-warning-notice-icon {
			  color: #dc3232 !important;
			  font-size: 32px !important;
			  vertical-align: top !important;
			}

			.mm-warning-notice-title {
			  vertical-align: top !important;
			  margin-left: 18px !important;
			  font-size: 18px !important;
			  font-weight: bold !important;
			  line-height: 32px !important;
			}
		  </style>
		    <div class="notice notice-error mm-notice is-dismissible" id="mm_stripe_connect_upgrade_notice">
		      <p>
		        <p><span class="dashicons dashicons-warning mm-warning-notice-icon"></span><strong class="mm-warning-notice-title"><?php _e( 'MemberMouse Security Notice', 'membermouse' ); ?></strong></p>
		        <p><strong><?php _e( 'Your current Stripe payment connection is out of date and may become insecure. Please click the button below to re-connect your Stripe payment method now.', 'membermouse' ); ?></strong></p>
		        <p><a href="<?php echo MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS); ?>" class="button button-primary"><?php _e('Re-connect Stripe Payments to Fix this Error Now', 'membermouse'); ?></a></p>
		      </p>
		      <?php wp_nonce_field( 'mm_stripe_connect_upgrade_notice_dismiss', 'mm_stripe_connect_upgrade_notice_dismiss' ); ?>
		    </div>
		  <?php
		}
	}

	public static function add_site_health_test( $tests ) {
		$tests['direct']['mm_stripe_connect_test'] = array(
	      'label' => __( 'MemberMouse - Stripe Connect Security', 'membermouse' ),
	      'test'  => 'MM_StripeConnect::run_site_health_test'
	    );

	    return $tests;
	}

	/**
	* Run a site health check and return the result
	*
	* @return array
	*/
	public static function run_site_health_test() {

		$result = array(
		  'label'   => __( 'MemberMouse is securely connected to Stripe', 'membermouse' ),
		  'status'  => 'good',
		  'badge'   => array(
		    'label'   => __( 'Security', 'membermouse' ),
		    'color'   => 'blue',
		  ),
		  'description' => sprintf(
		    '<p>%s</p>',
		    __( 'Your MemberMouse Stripe connection is complete and secure.', 'membermouse' )
		  ),
		  'actions' => '',
		  'test'    => 'run_site_health_test',
		);

		if ( self::has_method_with_connect_status( 'not-connected' ) ) {
		  $result = array(
		    'label'   => __( 'MemberMouse is not securely connected to Stripe', 'membermouse' ),
		    'status'  => 'critical',
		    'badge'   => array(
		      'label'   => __( 'Security', 'membermouse' ),
		      'color'   => 'red',
		    ),
		    'description' => sprintf(
		      '<p>%s</p>',
		      __( 'Your current Stripe payment connection is out of date and may become insecure or stop working. Please click the button below to re-connect your Stripe payment method now.', 'membermouse' )
		    ),
		    'actions' => '<a href="' . MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS) . '" class="button button-primary">' . __( 'Re-connect Stripe Payments to Fix this Error Now', 'membermouse' ) . '</a>',
		    'test'    => 'run_site_health_test',
		  );
		}

		return $result;
	}

}