/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MembershipLevelsView extends MM_RBACProductManagerView
{
	public static $MM_JSACTION_HIDE = "hidemembershiplevel";
	public static $MM_JSACTION_SHOW = "showmembershiplevel";
	public static $MM_JSACTION_SET_DEFAULT = "setDefault";

	public static $SEARCH_OPTION_SHOW_HIDDEN = "mm-show-hidden-membership-levels";
	public static $MM_JSACTION_STORE_SEARCH_OPTIONS = "storeSearchOptions";
	public function __construct()
	{
		parent::__construct();
	}
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SAVE:
					return $this->saveMembershipLevel($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeMembershipLevel($post);
					
				case self::$MM_JSACTION_SET_DEFAULT:
					return $this->setAsDefault($post);
					
				case self::$MM_JSACTION_SHOW_BUY_NOW_LINKS:
					return $this->showPurchaseLinks($post);
					
				case self::$MM_JSACTION_HIDE:
					return $this->hideMembershipLevel($post);
					
				case self::$MM_JSACTION_SHOW:
					return $this->showMembershipLevel($post);
				
				case self::$MM_JSACTION_STORE_SEARCH_OPTIONS:
					return $this->storeSearchOptions($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	private function hideMembershipLevel($post)
	{
		if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$mmLevel = new MM_MembershipLevel($id);
			$mmLevel->setIsHidden(true);
			if(isset($post["status"]) && preg_match("/^(0|1)$/", $post["status"]))
			{
				$mmLevel->setStatus(intval($post["status"]));
			}
			$result = $mmLevel->commitData();
			
			if($result !== false)
			{
				return new MM_Response("This membership level has been hidden from the list view.\n\nCheck off the 'Show hidden membership levels' checkbox to view hidden membership levels.");
			}
		}
		return new MM_Response();
	}
	
	private function showMembershipLevel($post)
	{
		if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$mmLevel = new MM_MembershipLevel($id);
			$mmLevel->setIsHidden(false);
			if(isset($post["status"]) && preg_match("/^(0|1)$/", $post["status"]))
			{
				$mmLevel->setStatus(intval($post["status"]));
			}
			$result = $mmLevel->commitData();
			
			if($result !== false)
			{
				return new MM_Response("This membership level will now be displayed in the list view.");
			}
		}
		return new MM_Response();
	}

	public function getViewData(MM_DataGrid $dg)
	{
		global $wpdb;
		global $current_user;
		
		$showHidden = false; 
		$where = "";
		if(isset($current_user->ID))
		{
			$showHidden = (MM_OptionUtils::getOption(self::$SEARCH_OPTION_SHOW_HIDDEN."-".$current_user->ID) == "1") ? true : false;
		}
		
		$where = " where is_hidden = '0' ";
		if($showHidden)
		{
			$where = " ";
		} 

		$sqlResultCount = "select count(*) as total from ".MM_TABLE_MEMBERSHIP_LEVELS. " {$where}";   
		$countRow = $wpdb->get_row($sqlResultCount);

		$sql = "select '{$countRow->total}' as total, ".MM_TABLE_MEMBERSHIP_LEVELS. ".* from ".MM_TABLE_MEMBERSHIP_LEVELS. " {$where}"; 
		
		if(!is_null($dg) && !is_null($dg->sortBy) && !empty($dg->sortBy)) {
			$sql.= "ORDER BY {$dg->sortBy} {$dg->sortDir}";
		} 

		if(!is_null($dg)) {
			$sql .= $dg->getLimitSql();
		}
		
		$rows = $wpdb->get_results($sql); 
		foreach($rows as $row)
		{
			$sql = "SELECT p.id, p.name FROM ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mlp, ".MM_TABLE_PRODUCTS." p ";
			$sql .= " WHERE mlp.membership_id='{$row->id}' AND mlp.product_id = p.id and p.is_hidden!='1' GROUP BY name;";
		
			$row->products = $wpdb->get_results($sql);
			
			$sql = "select a.* from ".MM_TABLE_APPLIED_BUNDLES." at, ".MM_TABLE_BUNDLES." a where at.access_type='".MM_AppliedBundle::$ACCESS_TYPE_MEMBERSHIP."' and at.access_type_id='{$row->id}' and at.bundle_id=a.id";
			$row->bundles = $wpdb->get_results($sql);
			
			$sql = "SELECT count(*) as total FROM ".MM_TABLE_USER_DATA." where membership_level_id = '{$row->id}' AND (status = '".MM_Status::$ACTIVE."' OR status = '".MM_Status::$PENDING_CANCELLATION."');";
			$obj = $wpdb->get_row($sql);
			$row->member_count = $obj->total;
		}
		
		return $rows;
	}
	
	private function saveMembershipLevel($post)
	{	
		$membership = new MM_MembershipLevel();
		
		if(isset($post["id"]) && intval($post["id"]) > 0) 
		{
			$membership = new MM_MembershipLevel($post["id"]);
			
			if(!$membership->isValid())
			{
				return new MM_Response("Cannot update membership level. Invalid ID '{$post['id']}' passed.", MM_Response::$ERROR);
			}
		}
		
		if(isset($post["mm_subscription_type"]) && $post["mm_subscription_type"] == "free") 
		{ 
	 		$post["mm_subscription_type"] = '1';
	 		$post["mm_products"] = '';
	 	} 
	 	else 
	 	{ 
	 		$post["mm_subscription_type"]=  '0';
	 	}
	 	
	 	if($post["mm_status"] == "active") 
	 	{
	 		$post["mm_status"] = "1";
	 	} 
	 	else 
	 	{
	 		$post["mm_status"] = "0";
	 	}
	 	
	 	$membership->setIsFree($post["mm_subscription_type"]);
	 	$membership->setStatus($post["mm_status"]);
	 	$membership->setIsDefault($post["mm_is_default"]);
		$membership->setName($post["mm_display_name"]);
		$membership->setWPRole($post["mm_wp_role"]);
	 	$membership->setDescription($post["mm_description"]);
	 	$membership->setEmailSubject($post["mm_email_subject"]);
	 	$membership->setEmailBody($post["mm_email_body"]);
	 	$membership->setEmailFromId($post["mm_email_from"]);		
	 	$membership->setWelcomeEmailEnabled($post["mm_welcome_email_enabled"]);	
	 	$membership->setExpires($post["expiry_chk"]);
	 	$membership->setExpireAmount($post["expire_amount"]);
	 	$membership->setExpirePeriod($post["expire_period"]);	
	 	
	 	if(isset($post["mm_default_product_id"]))
	 	{
	 		$membership->setDefaultProduct($post["mm_default_product_id"]);
	 	}
	 	
	 	if(!empty($post["mm_products"]) && is_array($post["mm_products"]) && count($post["mm_products"]) > 0 && $post["mm_subscription_type"]!="1") 
	 	{
	 		$membershipSel = array();
	 		foreach($post["mm_products"] as $key => $val)
	 		{
	 			$membershipSel[$val] = $val;
	 		}
		 	$membership->setProductIds($membershipSel);
	 	}
	 	else
	 	{
	 		$membership->setProductIds(array());
	 	}
	 	
	 	if(!empty($post["mm_bundles"]) && is_array($post["mm_bundles"]) && count($post["mm_bundles"]) > 0) 
	 	{
	 		$membership->setBundles($post["mm_bundles"]);
	 	} 
	 	else 
	 	{
	 		$membership->setBundles(array());
	 	}
	 	
	 	if(!empty($post["mm_categories"]) && is_array($post["mm_categories"]) && count($post["mm_categories"]) > 0)
	 	{
	 		$membership->setCategoryIds($post["mm_categories"]);
	 	}
	 	else
	 	{
	 		$membership->setCategoryIds(array());
	 	}
		
		return $membership->commitData();
	}
	
	private function removeMembershipLevel($post)
	{
		if(isset($post["id"]) && intval($post["id"]) > 0)
		{
			$membership = new MM_MembershipLevel($post["id"], false);
			$result = $membership->delete();
			
			if($result) 
			{
				return new MM_Response();
			} 
			else 
			{
				return new MM_Response("This membership level has existing associations and can't be removed.", MM_Response::$ERROR);
			}
		}
		
		return new MM_Response("Unable to delete membership level. No ID specified.", MM_Response::$ERROR);
	}
	
 	private function setAsDefault($post)
	{
		global $wpdb;
		
		if(isset($post["id"]) && intval($post["id"]) > 0)
		{
			$sql = "update ".MM_TABLE_MEMBERSHIP_LEVELS." set is_default='0'";
			$wpdb->query($sql);
			
			$sql = "update ".MM_TABLE_MEMBERSHIP_LEVELS." set is_default='1' where id='%d' limit 1";
			$results = $wpdb->query($wpdb->prepare($sql, $post["id"]));
			
			if($results)
			{
				return new MM_Response();
			}
		}
		
		return new MM_Response("Unable to set membership level as default. No ID specified.", MM_Response::$ERROR);
	}
	
	private function showPurchaseLinks($post)
	{
		if(isset($post["access_type_id"]) && isset($post["access_type_name"]))
		{
			$data = new stdClass();
			$data->accessTypeId = $post["access_type_id"];
			$data->accessTypeName = stripslashes($post["access_type_name"]);
			
			if(isset($post["product_ids"]) && !empty($post["product_ids"]))
			{
				$data->productIds = explode(",", $post["product_ids"]);
			}
			else
			{
				$data->productIds = array();
			}
			
			$content = MM_TEMPLATE::generate(MM_MODULES."/".MM_MODULE_MEMBERSHIP_LEVELS.".".MM_MODULE_PURCHASE_LINKS.".dialog.php", $data);
			return new MM_Response($content);
		}
		else
		{
			return new MM_Response("Membership level ID and name are required to display purchase links", MM_Response::$ERROR);
		}
	}
	
	private function storeSearchOptions($post)
	{
		if(isset($post["mm_admin_id"]))
		{ 
			if(isset($post["mm_show_hidden_membership_levels"]))
			{
				$optionName = self::$SEARCH_OPTION_SHOW_HIDDEN."-".$post["mm_admin_id"];
				MM_OptionUtils::setOption($optionName, $post["mm_show_hidden_membership_levels"]);
			} 
			
			return new MM_Response();
		}
		else
		{
			return new MM_Response("Unable to store coupon search options. Couldn't find current admin user ID.", MM_Response::$ERROR);
		}
	}
}
