/**
 * 
 * MemberMouse(TM) (https://membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MergeAccountUtils
{	
    public static $CHOICE_PRIMARY = "1";
    public static $CHOICE_SECONDARY = "2";
    
    /**
     * This function takes a search string and searches for users whose first name, last name, email or username
     * names partially matches the search string. The ID of user to exclude is optional passed. 
     * 
     * @param String $searchString the string to search users by 
     * @param String $excludeUserId ID of the user to exclude from search results
     * @return Array array of results of the query
     */
    public static function findUsersBySearchString($searchString, $excludeUserId=null)
    {
        global $wpdb;
        
        $firstName = $searchString;
        $lastName = $searchString;
        $parts = explode(" ", $searchString);
        $sqlNameWhere = "m.first_name like %s OR m.last_name like %s ";
        
        if(count($parts)>1)
        {
            $firstName = $parts[0];
            $lastName = end($parts);
            $sqlNameWhere = "(m.first_name like %s AND m.last_name like %s) ";
        }
        
        $excludeUserId = (is_null($excludeUserId))?0:$excludeUserId;
        $sql = "select
                    m.wp_user_id as value,
                    CONCAT(m.first_name, ' ', m.last_name, ' (',w.user_login,')') as label
                from
                    ".MM_TABLE_USER_DATA." m
                        LEFT JOIN ".$wpdb->users." w on m.wp_user_id=w.ID
				where
					m.wp_user_id != '".intval($excludeUserId)."' and
					(
						{$sqlNameWhere} OR
						w.user_login like %s OR
						w.user_email like %s
					)
                order by 
                    m.wp_user_id desc
        ";
		
		$results = $wpdb->get_results($wpdb->prepare($sql,'%' . $wpdb->esc_like($firstName) . '%','%' . $wpdb->esc_like($lastName) . '%','%' . $wpdb->esc_like($searchString) . '%','%' . $wpdb->esc_like($searchString) . '%'));
						
		return $results;
    }
    
    /**
     * This function packages up data for the user instance passed in the format that the merge accounts tool expects
     *
     * @param MM_User $user the user to retrieve data for
     * @return stdClass package of user data
     */
    public static function getUserData(MM_User $user)
    {
        global $wpdb;
        
        $userData = new stdClass();
        
        if($user->isValid())
        {
            $userData->id = $user->getId();
            $userData->first_name = $user->getFirstName();
            $userData->last_name = $user->getLastName();
            $userData->email = $user->getEmail();
            $userData->username = $user->getUsername();
            $userData->phone = $user->getPhone();
            $userData->shipping_address = $user->getShippingAddress();
            $userData->shipping_address2 = $user->getShippingAddress2();
            $userData->shipping_city = $user->getShippingCity();
            $userData->shipping_state = MM_CountrySubdivisionUtils::getStateName($user->getShippingCountry(), $user->getShippingState());
            $userData->shipping_zip = $user->getShippingZipCode();
            $userData->shipping_country = $user->getShippingCountryName();
            $userData->billing_address = $user->getBillingAddress();
            $userData->billing_address2 = $user->getBillingAddress2();
            $userData->billing_city = $user->getBillingCity();
            $userData->billing_state = MM_CountrySubdivisionUtils::getStateName($user->getBillingCountry(), $user->getBillingState());
            $userData->billing_zip = $user->getBillingZipCode();
            $userData->billing_country = $user->getBillingCountryName();
            
            // custom fields
            $customFields = MM_CustomField::getCustomFieldsList();
            $customFieldData = array();
            foreach($customFields as $id=>$name)
            {
                $data = new stdClass();
                $data->id = $id;
                $data->name = $name;
                $data->value = $user->getCustomDataByFieldId($id)->getValue();
                $data->value = (empty($data->value) || is_null($data->value))?"":$data->value;
                $customFieldData[] = $data;
            }
            $userData->custom_fields = $customFieldData;
            
            $userData->has_card_on_file = ($user->hasCardOnFile() == true) ? "1":"0";
            $userData->membership_level = $user->getMembershipLevel()->getName();
            
            // does membership have an active subscription?
            $userData->membership_description = _mmt("No active billing");
            
            $activeSubscriptions = $user->getActiveMembershipSubscriptions(true);
            
            // Assumption: This code assumes there's only one active membership subscription
            if(count($activeSubscriptions) > 0)
            {
                $activeSubscription = $activeSubscriptions[0];
                $userData->membership_description = $activeSubscription["rebill_description"];
            }
            
            $userData->membership_is_complimentary = (($user->isComplimentary() == true) || ($user->isImported() == true)) ? "1" : "0";
            
            // get bundles with active subscription applied to the account
            $userData->bundles = $user->getActiveBundles(true);
            
            // get bundles applied to the account and add any that don't have active subscriptions
            $appliedBundles = $user->getAppliedBundles();
            foreach($appliedBundles as $appliedBundle)
            {
                // check if applied bundle is already represented in the list of bundles that have active subscriptions
                $bundleExists = false;
                
                foreach($userData->bundles as $bundle)
                {
                    if($appliedBundle->getBundle()->getId() == $bundle["id"])
                    {
                        $bundleExists = true;
                        break;
                    }
                }
                
                if(!$bundleExists)
                {
                    $bundleData = array();
                    $bundleData["id"] = $appliedBundle->getBundle()->getId();
                    $bundleData["name"] = $appliedBundle->getBundle()->getName();
                    $bundleData["status"] = "-1"; // indicate that there's no subscription
                    $bundleData["is_complimentary"] = (($appliedBundle->isComplimentary() == true) || ($appliedBundle->isImported() == true) || ($appliedBundle->getBundle()->isFree() == true)) ? "1" : "0";
                    
                    array_push($userData->bundles, $bundleData);
                }
            }
            
            // get one-time purchase and active recurring billing standalone products associated with user
            $ordersTable = MM_TABLE_ORDERS;
            $orderItemsTable = MM_TABLE_ORDER_ITEMS;
            $productItemType = MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT;
            
            $sql = "SELECT item_id as product_id, {$orderItemsTable}.id as order_item_id, {$orderItemsTable}.status FROM {$ordersTable} JOIN {$orderItemsTable} ON ({$ordersTable}.id = {$orderItemsTable}.order_id)  ";
            $sql .= " WHERE (item_type = {$productItemType}) AND (user_id = '{$user->getId()}') ";
            $sql .= " AND ({$orderItemsTable}.status IN (0, ".MM_OrderItem::$STATUS_RECURRING.", ".MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED.", ".MM_OrderItem::$STATUS_RECURRING_PENDING_OVERDUE.")) ";
            
            $results = $wpdb->get_results($sql);
            
            if($results)
            {
                foreach($results as $rowData)
                {
                    if(isset($rowData->order_item_id))
                    {
                        $accessItem = MM_OrderItemAccess::getAccessByOrderItem($rowData->order_item_id);
                        
                        // only proceed if the current order item doesn't have any associated access rights
                        if(!$accessItem->isValid())
                        {
                            $orderItem = new MM_OrderItem($rowData->order_item_id);
                            
                            if($orderItem->isValid())
                            {
                                $product = new MM_Product($orderItem->getItemId());
                                
                                if($product->isValid())
                                {
                                    $pinfo = new stdClass();
                                    $pinfo->id = $orderItem->getItemId();
                                    $pinfo->order_item_id = $orderItem->getId();
                                    $pinfo->name = $product->getName();
                                    $pinfo->is_gift = ($orderItem->isGift() == true) ? "1" : "0";
                                    
                                    if($orderItem->isRecurring())
                                    {
                                        $pinfo->description = $orderItem->getBillingDescription(false);
                                    }
                                    else
                                    {
                                        $pinfo->description = _mmt("No active billing");
                                    }
                                    
                                    $userData->products[] = $pinfo;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return $userData;
    }
    
    /**
     * This function transfers the membership level and any associated active subscriptions from the secondary user
     * to the primary user. The assumption is that there can only at most one active subscription available for transfer.
     *
     * @param MM_User $primaryUser - the user to transfer the membership level and associated billing to
     * @param MM_User $secondaryUser - the user to transfer the membership level and associated billing from
     * 
     * @return MM_Response
     */
    public static function transferMembership($primaryUser, $secondaryUser)
    {
        // Step 1: cancel subscriptions related to primary user since we're transferring the membership from the secondary user
        MM_PaymentUtils::cancelSubscription($primaryUser, $primaryUser->getMembershipLevel());
        
        // Step 2: manually remove membership access right from primary user
        $accessItems = MM_OrderItemAccess::getOrderItemByAccess($primaryUser->getId(), MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP, $primaryUser->getMembershipId());
        
        if(count($accessItems) > 0)
        {
            foreach($accessItems as $accessItem)
            {
                $accessItem->delete();
            }
        }
        
        // Step 3: transfer ownership on all order items related to the secondary user to the primary user
        $accessItems = MM_OrderItemAccess::getOrderItemByAccess($secondaryUser->getId(), MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP, $secondaryUser->getMembershipId());
        
        if(count($accessItems) > 0)
        {
            foreach($accessItems as $accessItem)
            {
                $orderItem = new MM_OrderItem($accessItem->getOrderItemId());
                
                // change the customer ID on order to primary user
                $order = new MM_Order($orderItem->getOrderId());
                $order->setCustomer($primaryUser);
                $order->commitData();
                
                // delete order item / access mapping associated with the secondary user
                $accessItem->delete();
                
                // change ID on order item / access mapping and commit data which will result in
                // the access being switched to the primary user
                $accessItem->setUserId($primaryUser->getId());
                $accessItem->commitData();
            }
        }
       
        // Step 4: assign same membership as secondary user to primary user
        $response = MM_AccessControlEngine::assignMembershipToUser($primaryUser, $secondaryUser->getMembershipLevel());
        
        return $response;
    }
    
    /**
     * This function transfers the bundles specified in $bundleIdsToTransfer array and any associated order items from the secondary user
     * to the primary user.
     *
     * @param MM_User $primaryUser - the user to transfer the bundles and associated billing to
     * @param MM_User $primaryUser - the user to transfer the bundles and associated billing from
     * @param $bundleIdsToTransfer - array of bundle IDs to transfer from the secondary user to the primary user
     */
    public static function transferBundles($primaryUser, $secondaryUser, $bundleIdsToTransfer)
    {
        $result = new MM_Response();
        
        if(is_array($bundleIdsToTransfer) && count($bundleIdsToTransfer) > 0)
        {
            $bundlesToTransfer = array();
            $orderItemsToTransfer = array();
            foreach($bundleIdsToTransfer as $bundleId)
            {
                $bundle = new MM_Bundle($bundleId);
                
                if($bundle->isValid())
                {
                    // add this bundle to list of bundles to transfer
                    array_push($bundlesToTransfer, $bundle);    
                }
                else 
                {
                    continue;
                }
                
                // Step 1: check if primary user already has this bundle active on the account
                $appliedBundleOnPrimaryUser = MM_AppliedBundle::getAppliedBundle($primaryUser->getId(), $bundleId);
                if($appliedBundleOnPrimaryUser->isValid())
                {
                    // Step 1a: remove bundle on primary user as it's being replaced by the same access on the secondary user 
                    $result = MM_AccessControlEngine::removeBundleFromUser($primaryUser, $appliedBundleOnPrimaryUser->getBundle());
                    
                    if(MM_Response::isError($result))
                    {
                        return $result;
                    }
                    
                    // Step 1b: manually remove order item access for this bundle from primary user
                    $accessItems = MM_OrderItemAccess::getOrderItemByAccess($primaryUser->getId(), MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE, $appliedBundleOnPrimaryUser->getBundleId());
                    
                    foreach($accessItems as $accessItem)
                    {
                        $result = $accessItem->delete();
                        
                        if(MM_Response::isError($result))
                        {
                            return $result;
                        }
                    }
                }
                
                // Step 2: get order items from secondary user associated with this bundle
                $accessItems = MM_OrderItemAccess::getOrderItemByAccess($secondaryUser->getId(), MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE, $bundleId);
                
                if(count($accessItems) > 0)
                {
                    foreach($accessItems as $accessItem)
                    {
                        $orderItem = new MM_OrderItem($accessItem->getOrderItemId());
                        
                        if($orderItem->isValid())
                        {
                            array_push($orderItemsToTransfer, $orderItem);
                        }
                    }
                }
            }
            
            if(count($orderItemsToTransfer) > 0)
            {
                // Step 3: transfer all order items from secondary user to primary user
                $orderItemIdsToTransfer = array();
                
                // prepare array of order item IDs
                foreach($orderItemsToTransfer as $orderItem)
                {
                    if($orderItem->isValid())
                    {
                        array_push($orderItemIdsToTransfer, $orderItem->getId());
                    }
                }
                
                $result = MM_MergeAccountUtils::transferOrderItems($primaryUser->getId(), $secondaryUser->getId(), $orderItemIdsToTransfer);
                
                if(MM_Response::isSuccess($result))
                {
                    // Step 4: apply access by order item to primary user
                    $result = MM_AccessControlEngine::assignAccessFromOrderItems($primaryUser, $orderItemsToTransfer);
                    
                    foreach($bundlesToTransfer as $bundleToTransfer)
                    {
                        // Step 5: manually remove order item access from secondary user
                        $accessItems = MM_OrderItemAccess::getOrderItemByAccess($secondaryUser->getId(), MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE, $bundleToTransfer->getId());
                        
                        foreach($accessItems as $accessItem)
                        {
                            $result = $accessItem->delete();
                            
                            if(MM_Response::isError($result))
                            {
                                return $result;
                            }
                        }
                        
                        // Step 6: remove bundles from secondary user
                        $result = MM_AccessControlEngine::removeBundleFromUser($secondaryUser, $bundleToTransfer, MM_Status::$CANCELED);
                        
                        if(MM_Response::isError($result))
                        {
                            return $result;
                        }
                    }
                }
            }
        }
        
        return $result;
    }
    
    /**
     * This function goes through all of the order items on the primary user and detects if any of them are gifts. If they are 
     * gifts, it updates the user ID on the coupon in the coupons table to be primary user ID. This function should be run after
     * order items have been transferred from one user to another. 
     * 
     * @param MM_User $primaryUser - the user to transfer gifts to
     * @param MM_User $secondaryUser - the user to transfer gifts from 
     * @return MM_Response
     */
    public static function transferGifts($primaryUser, $secondaryUser)
    {
        global $wpdb;
        
        $couponsTable = MM_TABLE_COUPONS;
        $couponUsageTable = MM_TABLE_COUPON_USAGE;
        $ordersTable = MM_TABLE_ORDERS;
        $orderItemsTable = MM_TABLE_ORDER_ITEMS;
        $productItemType = MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT;
        
        $primaryUserOrderItemIds = array();
        
        // The assumption is that this method is called a point in execution where all order items needing to be transferred
        // from the secondary user to the primary user has been done. Retrieve a list of order items associate with the primary
        // user. This list of order items will be used to determine which purchased gifts should be transferred to
        // the primary user. 
        $sql = "SELECT {$orderItemsTable}.id as order_item_id FROM {$ordersTable} JOIN {$orderItemsTable} ON ({$ordersTable}.id = {$orderItemsTable}.order_id)  ";
        $sql .= " WHERE (item_type = {$productItemType}) AND (user_id = '{$primaryUser->getId()}')  ";
        
        $results = $wpdb->get_results($sql);
        
        if($results !== false)
        {
            foreach($results as $item)
            {
                array_push($primaryUserOrderItemIds, $item->order_item_id);
            }
        }
        else 
        {
            return new MM_Response(_mmt("Unable to transfer gifts. Error retrieving order items associated with the primary user"), MM_Response::$ERROR);
        }
        
        if(count($primaryUserOrderItemIds) > 0)
        {
            // transfer gifts purchased by the secondary user to the primary user
            $sql = "SELECT count(*) as total FROM {$couponsTable} WHERE 
                        is_gift = '1' AND gift_user_id='{$secondaryUser->getId()}' 
                        AND gift_order_item_id IN (".implode(",",$primaryUserOrderItemIds).");";
            
            $row = $wpdb->get_row($sql);
            
            if(!empty($row) && $row->total > 0)
            {
                $sql = "UPDATE {$couponsTable}
        					SET
        						gift_user_id='{$primaryUser->getId()}'
        					WHERE
        						is_gift = '1' AND gift_user_id='{$secondaryUser->getId()}'
                                AND gift_order_item_id IN (".implode(",",$primaryUserOrderItemIds).");";
                
                $results = $wpdb->get_results($sql);
                
                if($results === false)
                {
                    return new MM_Response(_mmt("Unable to transfer gifts purchased by the secondary member."), MM_Response::$ERROR);
                }
            }
        }
        
        return new MM_Response();
    }
    
    /**
     * This function transfers all coupons used by the secondary user to the primary user
     *
     * @param MM_User $primaryUser - the user to transfer coupons to
     * @param MM_User $secondaryUser - the user to transfer coupons from
     * @return MM_Response
     */
    public static function transferCoupons($primaryUser, $secondaryUser)
    {
        global $wpdb;
        
        $couponUsageTable = MM_TABLE_COUPON_USAGE;
        
        // transfer coupons used by the secondary user to the primary user
        $sql = "SELECT count(*) as total FROM {$couponUsageTable} WHERE user_id='{$secondaryUser->getId()}';";
        
        $row = $wpdb->get_row($sql);
        
        if(!empty($row) && $row->total > 0)
        {
            $sql = "UPDATE {$couponUsageTable}
        					SET
        						user_id='{$primaryUser->getId()}'
        					WHERE
        						user_id='{$secondaryUser->getId()}';";
            
            $results = $wpdb->get_results($sql);
            
            if($results === false)
            {
                return new MM_Response(_mmt("Unable to transfer coupons used by the secondary member."), MM_Response::$ERROR);
            }
        }
        
        return new MM_Response();
    }
    
    /**
     * This function removes all bundles from the user passed.
     * 
     * @param MM_User $user - user to remove all bundles from
     * @return MM_Response
     */
    public static function removeBundlesFromUser($user)
    {
        $appliedBundles = $user->getAppliedBundles();
        
        foreach($appliedBundles as $appliedBundle)
        {
            if($appliedBundle->isValid())
            {
                // Step 1: manually remove order item access from secondary user
                $accessItems = MM_OrderItemAccess::getOrderItemByAccess($user->getId(), MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE, $appliedBundle->getBundleId());
                
                if(count($accessItems) > 0)
                {
                    foreach($accessItems as $accessItem)
                    {
                        $result = $accessItem->delete();
                        
                        if(MM_Response::isError($result))
                        {
                            return $result;
                        }
                    }
                
                    // Step 2: remove bundles from user
                    $result = MM_AccessControlEngine::removeBundleFromUser($user, $appliedBundle->getBundle(), MM_Status::$CANCELED);
                    
                    if(MM_Response::isError($result))
                    {
                        return $result;
                    }
                }
            }
        }
        
        return new MM_Response();
    }
    
    /**
     * Transfer all the order items passed to the primary user.
     *
     * @param $primaryUserId - the ID of the primary user
     * @param $secondaryUserId - the ID of the secondary user
     * @param $orderItemIds - an array of order item IDs
     * @return MM_Response 
     */
    public static function transferOrderItems($primaryUserId, $secondaryUserId, $orderItemIds)
    {
        global $wpdb;
        
        if(!empty($orderItemIds) && count($orderItemIds) > 0)
        {
            $sql = "UPDATE ".MM_TABLE_ORDERS."
					SET
						user_id='{$primaryUserId}'
					WHERE
						user_id='{$secondaryUserId}' AND
						id IN (SELECT order_id FROM ".MM_TABLE_ORDER_ITEMS."
								WHERE
									id IN (".implode(",",$orderItemIds).")
								)	    
					";
            $result = $wpdb->query($sql);
            
            if($result === false)
            {
                return new MM_Response(_mmt("Error transfering subscriptions. Invalid query."), MM_Response::$ERROR);
            }
        }
        
        return new MM_Response();
    }
    
    /**
     * Cancel all order items and orders for user.
     *
     * @param MM_User $user - the user to cancel subscriptions on
     * @return MM_Response
     */
    public static function cancelSubscriptionsOnUser($user)
    {
        global $wpdb;
        
        $sql = "SELECT id FROM ".MM_TABLE_ORDER_ITEMS." WHERE status='".MM_OrderItem::$STATUS_RECURRING."' 
            AND order_id IN (SELECT id FROM ".MM_TABLE_ORDERS." WHERE user_id='{$user->getId()}') ";
        $activeSubscriptions = $wpdb->query($sql);
        
        if($activeSubscriptions === false)
        {
            return new MM_Response(_mmt("Unable to cancel subscriptions for user. Error retrieving order items."), MM_Response::$ERROR);
        }
        
        foreach($activeSubscriptions as $subscription)
        {
            $orderItem = new MM_OrderItem($subscription->id);
            
            if($orderItem->isValid())
            {
                $result = MM_PaymentUtils::cancelSubscriptionForOrderItem($orderItem, true);
                
                if(MM_Response::isError($result))
                {
                    return $result;
                }
            }
        }
        
        // mark all orders as failed
        $sql = "UPDATE ".MM_TABLE_ORDERS."
				SET
					status='".MM_Order::$ERROR_FAILED."'
				WHERE
					user_id='{$user->getId()}' ";
        $wpdb->query($sql);
        
        if($result === false)
        {
            return new MM_Response(_mmt("Unable to cancel subscriptions for user. Error updating orders."), MM_Response::$ERROR);
        }
        
        return new MM_Response();
    }
    
    /**
     * This funciton is responsible for preparing an error message by combining the $progressStr passed and the message from the $result object.
     * 
     * @param String $progressStr
     * @param MM_Response $result
     * @return MM_Response
     */
    public static function prepareErrorMessage($result, $progressStr)
    {
        $errorMsg = _mmt("Unable to complete merging accounts.");
        
        if(!empty($progressStr))
        {
            $errorMsg .= "\n\n"._mmt("Items Completed").":\n";
            $errorMsg .= $progressStr;
            $errorMsg .= "\n\n"._mmt("Last Error").":\n";
            $errorMsg .= $result->message;
            
            return new MM_Response($errorMsg, MM_Response::$ERROR);
        }
    }
}
