/**
 * 
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_BundlesView extends MM_RBACProductManagerView
{	
	public static $MM_JSACTION_ARCHIVE = "hidebundle";
	public static $MM_JSACTION_UNARCHIVE = "showbundle";
	public static $MM_JSACTION_SET_ACTIVE = "setActive";
	public static $MM_JSACTION_SET_INACTIVE = "setInactive";
	public static $SEARCH_OPTION_SHOW_HIDDEN = "mm-option-show-hidden-bundles";
	public static $MM_JSACTION_STORE_SEARCH_OPTIONS = "storeSearchOptions";
	public static $MM_JSACTION_SEARCH = "search";
	
	use MM_EnhancedDatagridView; 
	use MM_NonMemberObjectView;
	
	protected $defaultSortCol = "b.id DESC";

	public function __construct()
	{
		parent::__construct();
	}
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SAVE:
					return $this->saveBundle($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeBundle($post);
					
				case self::$MM_JSACTION_SHOW_BUY_NOW_LINKS:
					return $this->showPurchaseLinks($post);
					
				case self::$MM_JSACTION_ARCHIVE:
					return $this->hideBundle($post);
					
				case self::$MM_JSACTION_UNARCHIVE:
					return $this->showBundle($post);
			
				case self::$MM_JSACTION_STORE_SEARCH_OPTIONS:
					return $this->storeSearchOptions($post);
					
				case self::$MM_JSACTION_SEARCH:
				    return $this->search($post);
				    
				case self::$MM_JSACTION_SET_ACTIVE:
				    return $this->setActive($post,new MM_Bundle());
				    
				case self::$MM_JSACTION_SET_INACTIVE:
				    return $this->setInactive($post,new MM_Bundle());
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	private function hideBundle($post)
	{
		if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$mmBundle = new MM_Bundle($id);
			$mmBundle->setIsHidden(true);
			if(isset($post["status"]) && preg_match("/^(0|1)$/", $post["status"]))
			{
				$mmBundle->setStatus(intval($post["status"]));
			}
			$result = $mmBundle->commitData();
			$response = new MM_Response();
			$response->addData("total_hidden", MM_Bundle::getTotalHidden());
			
			if($result !== false)
			{ 
				$response->message = "This bundle has been hidden from the list view.\n\nCheck off the 'Show hidden bundles' checkbox to view hidden bundles.";
			}
		}
		return $response;
	}
	
	private function showBundle($post)
	{
		if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$mmBundle = new MM_Bundle($id);
			$mmBundle->setIsHidden(false);
			if(isset($post["status"]) && preg_match("/^(0|1)$/", $post["status"]))
			{
				$mmBundle->setStatus(intval($post["status"]));
			}
			$result = $mmBundle->commitData();
			$response = new MM_Response();
			$response->addData("total_hidden", MM_Bundle::getTotalHidden());
			
			if($result !== false)
			{
			    $response->message = "This bundle will now be displayed in the list view.";
			}
		}
		return $response;
	}
	
	public function getViewData(MM_DataGrid $dg)
	{
		global $wpdb,$current_user; 
		
		$showHidden = false; 
		$where = "";
		if(isset($current_user->ID))
		{
			$showHidden = (MM_OptionUtils::getOption(self::$SEARCH_OPTION_SHOW_HIDDEN."-".$current_user->ID) == "1") ? true : false;
		}
		
		$where = "  where is_hidden = '0' ";
		if($showHidden)
		{
			$where = " ";
		} 
		
		$sqlResultCount = "select count(*) as total from ".MM_TABLE_BUNDLES. " {$where}";   
		$countRow = $wpdb->get_row($sqlResultCount);
		
		$sql = "select '{$countRow->total}' as total, ".MM_TABLE_BUNDLES. ".* from ".MM_TABLE_BUNDLES. " {$where}"; 
		
		if(!is_null($dg) && !is_null($dg->sortBy) && !empty($dg->sortBy)) {
		    $sql.= "ORDER BY {$dg->sortBy} {$dg->sortDir}";
		}
		
		if(!is_null($dg)) {
		    $sql .= $dg->getLimitSql();
		}
		
		$rows = $wpdb->get_results($sql);
		
		foreach($rows as $row)
		{ 
			$sql = "select count(*) as total from ".MM_TABLE_APPLIED_BUNDLES." where access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."' and bundle_id='{$row->id}' and (status='".MM_Status::$ACTIVE."' OR status='".MM_Status::$PENDING_CANCELLATION."')";
			$obj =$wpdb->get_row($sql);
			$row->member_count = $obj->total;
			
			$sql = "select p.* from ".MM_TABLE_BUNDLE_PRODUCTS." atp, ".MM_TABLE_PRODUCTS." p where atp.bundle_id='{$row->id}' and atp.product_id=p.id";
			$row->products = $wpdb->get_results($sql);
		}
		
		return $rows;
	}
	
	private function saveBundle($post)
	{
		$bundle = new MM_Bundle();
		
		if(isset($post["id"]) && intval($post["id"]) > 0) 
		{
			$bundle = new MM_Bundle($post["id"]);
			
			if(!$bundle->isValid())
			{
				return new MM_Response("Cannot update bundle. Invalid ID '{$post['id']}' passed.", MM_Response::$ERROR);
			}
		}
		
		// check if short name is unique
		$bundleId = ($bundle->isValid()) ? $bundle->getId() : 0;
		if (!MM_Bundle::checkShortNameIsUnique($post["mm_short_name"], $bundleId))
		{
			return new MM_Response("Cannot update bundle. Short name '{$post["mm_short_name"]}' is not unique.", MM_Response::$ERROR);
		}
		
		if(isset($post["mm_subscription_type"]) && $post["mm_subscription_type"]=="free") { 
	 		$post["mm_subscription_type"] = '1';
	 	} else { 
	 		$post["mm_subscription_type"]=  '0';
	 	}
	 	
	 	if($post["mm_status"]=="active") {
	 		$post["mm_status"] = "1";
	 	} else {
	 		$post["mm_status"] = "0";
	 	}
	 	
	 	$bundle->setIsFree($post["mm_subscription_type"]);
	 	$bundle->setStatus($post["mm_status"]);
	 	$bundle->setDfltMembershipId($post["mm_dflt_membership_selector"]);
		$bundle->setName($post["mm_display_name"]);
	 	$bundle->setDescription($post["mm_description"]);	
	 	$bundle->setShortName(strtoupper($post["mm_short_name"]));
	
	 	if(isset($post["should_expire"]) && strtolower($post["should_expire"])=="1"){
	 		$bundle->setExpires("1");
	 		$bundle->setExpireAmount($post["expire_amount"]);
	 		$bundle->setExpirePeriod($post["expire_period"]);	
	 	}
	 	else{
	 		$bundle->setExpires("0");
	 	}
	 	
		// update product relationships
	 	if(isset($post["mm_products"]) && is_array($post["mm_products"]) && count($post["mm_products"]) > 0)
	 	{
			$productMap = array();
			foreach($post["mm_products"] as $pid)
			{
				$product = new MM_Product($pid);
				if($product->isValid())
				{
					$productMap[$product->getId()] = $product->getName();
				}
			}	 
			
		 	$bundle->setProducts($productMap);
		}
		else
		{
			$bundle->setProducts(array());
		}
	 	
	 	if(!empty($post["mm_categories"]) && is_array($post["mm_categories"]) && count($post["mm_categories"]) > 0)
	 	{
	 		$bundle->setCategories($post["mm_categories"]);
	 	}
	 	else
	 	{
	 		$bundle->setCategories(array());
	 	}
		
		return $bundle->commitData();
	}
	
	private function removeBundle($post)
	{
		global $wpdb;
		
		if(isset($post["id"]) && intval($post["id"]) > 0)
		{
			$bundle = new MM_Bundle($post["id"], false);
			$result = $bundle->delete();
			
			if($result) {
				return new MM_Response();
			} 
			else {
				return new MM_Response("This bundle has existing associations and can't be removed.", MM_Response::$ERROR);
			}
		}
		
		return new MM_Response("Unable to delete bundle. No id specified.", MM_Response::$ERROR);
	}
	
	private function showPurchaseLinks($post)
	{
		if(isset($post["access_type_id"]) && isset($post["access_type_name"]))
		{
			$data = new stdClass();
			$data->accessTypeId = $post["access_type_id"];
			$data->accessTypeName = stripslashes($post["access_type_name"]);
			
			if(isset($post["product_ids"]) && !empty($post["product_ids"]))
			{
				$data->productIds = explode(",", $post["product_ids"]);
			}
			else
			{
				$data->productIds = array();
			}
			
			$content = MM_TEMPLATE::generate(MM_MODULES."/".MM_MODULE_BUNDLES.".".MM_MODULE_PURCHASE_LINKS.".dialog.php", $data);
			return new MM_Response($content);
		}
		else
		{
			return new MM_Response("Bundle ID and name are required to display purchase links", MM_Response::$ERROR);
		}
	}
	
	private function storeSearchOptions($post)
	{
		if(isset($post["mm_admin_id"]))
		{
			if(isset($post["mm_show_hidden_bundles"]))
			{
				$optionName = self::$SEARCH_OPTION_SHOW_HIDDEN."-".$post["mm_admin_id"]; 
				MM_OptionUtils::setOption($optionName, $post["mm_show_hidden_bundles"]);
			} 
			
			return new MM_Response();
		}
		else
		{
			return new MM_Response("Unable to store bundle search options. Couldn't find current admin user ID.", MM_Response::$ERROR);
		}
	}
	
	
	public function preprocessSearch($queryMeta)
	{
	    global $current_user;
	    
	    if(isset($current_user->ID))
	    {
	        $showHidden = (MM_OptionUtils::getOption(self::$SEARCH_OPTION_SHOW_HIDDEN."-".$current_user->ID) == "1") ? true : false;
	        if (!$showHidden)
	        {
	            $queryMeta->query->conditions[] = (object)['name'=>'is_hidden','value'=>'0','rel'=>'eq'];
	        }
	    }
	}
	
	
	/**
	 * Query the database and return the unprocessed results in object format
	 */
	protected function getRawData($criteria=array())
	{
	    global $wpdb;
	    
	    $dataset = $this->processQueryMeta($criteria,"b");
	    $whereString = $dataset->whereString;
	    $orderString = $dataset->orderString;
	    $limitString = $dataset->limitString;
	    
	    $sqlResultCount = "select count(*) as total from ".MM_TABLE_BUNDLES. " b {$whereString}";
	    $dataset->total = $wpdb->get_var($sqlResultCount);
	    //TODO: add appropriate indexes
	    $sql = "SELECT b.id, b.name, b.is_free, b.status, b.is_hidden ".
	   	       "FROM ".MM_TABLE_BUNDLES." b ".
	   	       "{$whereString}{$orderString}{$limitString}";
	    $sql = trim($sql);
	    $rows = $wpdb->get_results($sql);
	    
	    foreach($rows as $row)
	    {
	        $sql = "select count(*) as total from ".MM_TABLE_APPLIED_BUNDLES." where access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."' and bundle_id='{$row->id}' and (status='".MM_Status::$ACTIVE."' OR status='".MM_Status::$PENDING_CANCELLATION."')";
	        $obj =$wpdb->get_row($sql);
	        $row->member_count = $obj->total;
	        
	        $sql = "select p.* from ".MM_TABLE_BUNDLE_PRODUCTS." atp, ".MM_TABLE_PRODUCTS." p where atp.bundle_id='{$row->id}' and atp.product_id=p.id";
	        $row->products = $wpdb->get_results($sql);
	        
	        $tmpBundle = new MM_Bundle($row->id,false);
	        $row->has_associations = $tmpBundle->hasAssociations() ? 1 : 0;
	    }
	    
	    $pageCounter = ($dataset->pageNum == -1) ? 1 : $dataset->pageNum; //TODO: implement -1 as a marker for unpaginated
	    $dataset->data[$pageCounter] = [];
	    $prefetchSize = ($dataset->prefetchSize < 0)?0:$dataset->prefetchSize;
	    $pfCount = -1;
	    
	    foreach (array_chunk($rows, $dataset->pageSize) as $k=>$page)
	    {
	        if ($pfCount >= $prefetchSize)
	        {
	            break;
	        }
	        $pageCounter = $dataset->pageNum + $k; //by default array_chunk will use numeric keys starting wih 0
	        $dataset->data[$pageCounter] = $page;
	        $pfCount++;
	    }
	    
	    return $dataset;
	}
}
