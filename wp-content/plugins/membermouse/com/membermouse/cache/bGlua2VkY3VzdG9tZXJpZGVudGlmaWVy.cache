/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 */
trait MM_LinkedCustomerIdentifier
{
    /**
     * Transfer the payment service customer identifier from one user to another user.
     *
     * @param $fromUserId - ID of the user to transfer customer identifier from.
     * @param $toUserId - ID of the user to customer identifier to.
     * @param $customerLinkTable - The name of the customer link table
     * @param $customerIdField - The name of the customer ID field
     * @return MM_Response
     */
    public function transferCustomerIdentifier($fromUserId, $toUserId, $customerLinkTable, $customerIdField)
    {
        global $wpdb;
        
        $sql = "SELECT {$customerIdField} FROM {$customerLinkTable} WHERE membermouse_customer_id='{$toUserId}';";
        $toUserCustomerId = $wpdb->get_var($sql);
        
        // delete customer link on 'to' user
        if(!empty($toUserCustomerId))
        {
            $sql = "DELETE FROM {$customerLinkTable} WHERE membermouse_customer_id='{$toUserId}';";
            $result = $wpdb->query($sql);
            
            if($result === false)
            {
                return new MM_Response("Error deleting {$this->getName()} customer link.", MM_Response::$ERROR);
            }
        }
        
        $sql = "SELECT {$customerIdField} FROM {$customerLinkTable} WHERE membermouse_customer_id='{$fromUserId}';";
        $fromUserCustomerId = $wpdb->get_var($sql);
        
        // transfer customer link on 'from' user to 'to' user
        if(!empty($fromUserCustomerId))
        {
            $sql = "UPDATE {$customerLinkTable} SET membermouse_customer_id = '{$toUserId}' WHERE membermouse_customer_id='{$fromUserId}'";
            $result = $wpdb->query($sql);
            
            if($result === false)
            {
                return new MM_Response("Error transfering {$this->getName()} customer link.", MM_Response::$ERROR);
            }
        }
        else
        {
            return new MM_Response("Error transfering {$this->getName()} customer link. No customer link exists to transfer from.", MM_Response::$ERROR);
        }
        
        return new MM_Response();
    }
}
