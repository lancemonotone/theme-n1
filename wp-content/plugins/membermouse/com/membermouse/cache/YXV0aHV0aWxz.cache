/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_AuthUtils
{
	/** Returns an array to be used with wp_remote_request
	*/
	public static function jwt_header($jwt, $domain) {
		return array(
			'Authorization' => 'Bearer ' . $jwt,
			'Accept'        => 'application/json;ver=1.0',
			'Content-Type'  => 'application/json; charset=UTF-8',
			'Host'          => $domain
		);
	}

	/**
	* Generates a JWT, signed by the stored secret token
	*
	* @param  array  $payload  Payload data
	* @param  sring $secret    Used to sign the JWT
	*
	* @return string
	*/
	public static function generate_jwt( $payload, $secret = false ) {

		if ( false === $secret ) {
		  $secret = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SECRET );
		}

		// Create token header
		$header = array(
		  'typ' => 'JWT',
		  'alg' => 'HS256'
		);
		$header = json_encode( $header );
		$header = MM_AuthUtils::base64url_encode( $header );

		// Create token payload
		$payload = json_encode( $payload );
		$payload = MM_AuthUtils::base64url_encode( $payload );

		// Create Signature Hash
		$signature = hash_hmac( 'sha256', "{$header}.{$payload}", $secret );
		$signature = json_encode( $signature );
		$signature = MM_AuthUtils::base64url_encode( $signature );

		// Create JWT
		$jwt = "{$header}.{$payload}.{$signature}";
		return $jwt;
	}

	/**
	* Ensure that the Base64 string is passed within URLs without any URL encoding
	*
	* @param  string $value
	*
	* @return string
	*/
	public static function base64url_encode( $value ) {
		return rtrim( strtr( base64_encode( $value ), '+/', '-_' ), '=' );
	}

	public static function is_authorized() {
		// Make sure the user is authorized
		if ( current_user_can( 'remove_users' ) ) {  
		  return true;
		}
		return false;
	}

	public static function highlight_account_menu_item($submenu_file) {
		global $current_screen;

		// Remove the "Account Login" menu item on all pages
		remove_submenu_page( MM_MODULE_DASHBOARD, MM_MODULE_ACCOUNT_LOGIN );

		// Set the highlighted menu item to "Membermouse"
		if ($current_screen instanceof WP_Screen && $current_screen->id == 'membermouse_page_' . str_replace('-', '_', MM_MODULE_ACCOUNT_LOGIN)) {
		  $submenu_file = MM_MODULE_DASHBOARD;
		}

		return $submenu_file;
	}
}