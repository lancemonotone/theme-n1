class MM_ResetPasswordForm extends MM_AbstractForm
{
	public $success = "";
	
	/**
	 * Default constructor. Takes an associative array of configuration parameters
	 * @param Array $params an associative array of form configuration parameters
	 */
	public function __construct($params=null)
	{	
		if(!is_null($params))
		{
			if(is_array($params) && count($params) > 0)
			{
				foreach($params as $k=>$v)
				{
					$key = strtolower($k);
					$$key = $v;
				}
			}
			
			$this->initialize();
		}
	}
	
	public function initialize()
	{
  		try
  		{
    		$result = self::checkInput();
		
			if($result['success'] === false)
			{
				throw new Exception($result['message']);
			}
      
      	$this->isValid = true;
  		}
  		catch(Exception $e)
  		{
    		$this->error = $e->getMessage();
    		$this->isValid = false;
  		}
	}
	
	/**
	 * This function checks to see if the provided input to access this form/page allows access.
	 * @return Array containing result info
	 */
	public static function checkInput()
	{
		global $wpdb;
		
		$response = array();
		
		try
		{
	    	if(!isset($_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_KEY]) || !strlen(trim($_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_KEY])))
	    	{
				throw new Exception("Missing or invalid verification key");
	    	}
    	
	    	if(!isset($_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_EMAIL]) || !strlen(trim($_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_EMAIL])))
	    	{
				throw new Exception("Missing or invalid required verification field");
	    	}
    	
	    	$forgotPasswordHash = urldecode(trim($_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_KEY]));
	    	$email              = MM_MemberMouseService::decryptPassword(urldecode(trim($_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_EMAIL])));
    	
	    	if(filter_var($email, FILTER_VALIDATE_EMAIL) === false)
	    	{
				throw new Exception("Invalid required verification field");
	    	}
    	
	    	$results = $wpdb->get_col("SELECT `ID` FROM `{$wpdb->users}` WHERE `user_email` = '{$email}' AND `user_activation_key` = '{$forgotPasswordHash}'");
    	
	    	if(count($results) === 0)
	    	{
	    	    // this line was reached because the user_activation_key in the WP users table doesn't match the key retrieved from the URL
				throw new Exception(_mmt("Your reset password URL has expired. Please try again."));
	    	}
    	
	      $member = new MM_User($results[0]);
      
	      if($member->isValid() === false)
	      {
				throw new Exception(_mmt("No member account exists for the email '{$email}'. Please enter a different email address."));
	      }
			
			$response['success'] = true;
			$response['member']  = $member;
		}
		catch(Exception $e)
		{
			$response['success'] = false;
			$response['message'] = $e->getMessage();
		}
		
		return $response;
	}
	
	/**
	 * This function is responsible for generating all of the HTML that should show up at 
	 * the top of the form based on the the current configuration.
	 * @return String header HTML for the checkout form
	 */
	public function generateFormHeader()
	{		
		$html  = $this->getJavascriptIncludes();
		
		$html .= "<form method=\"post\" id=\"mm-resetpassword-form\" testing=\"testing\">
";
    $html .= "<input type=\"hidden\" id=\"k\" name=\"k\" value=\"{$_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_KEY]}\" />
";  
    $html .= "<input type=\"hidden\" id=\"e\" name=\"e\" value=\"{$_REQUEST[MM_ResetPasswordFormView::$MM_PARAM_KEY_EMAIL]}\" />
";
  
		return $html;
	}
	
	/**
	 * This function is responsible for generating all of the HTML that should show up at
	 * the bottom of the form based on the the current configuration.
	 * 
	 * @return String footer HTML for the checkout form
	 */
	public function generateFormFooter()
	{
  	$html  = wp_nonce_field( MM_ResetPasswordFormView::$MM_NONCE_ACTION_RESET_PASSWORD_FORM, MM_ResetPasswordFormView::$MM_NONCE_NAME_RESET_PASSWORD_FORM, true, false);
		$html .= "</form>
";
		$html .= $this->getInitJavascript();
		return $html;
	}
	
	/**
	 * This function returns the include statements for required javascript files.
	 * @return String that contains the javascript for including required javascript files.
	 */
	public function getJavascriptIncludes()
	{
		$version = MemberMouse::getPluginVersion();
		$useMMCSS = (MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_RESET_PASSWORD) == "1") ? true : false;
		
		if($useMMCSS)
		{
			wp_enqueue_style("membermouse-reset-password-css", plugins_url(MM_PLUGIN_NAME."/resources/css/user/mm-resetpassword.css"), array(), $version);
		}
		
		wp_enqueue_script("membermouse-reset-password", plugins_url(MM_PLUGIN_NAME."/resources/js/user/mm-resetpassword.js"), array(), $version, true);
	}
	
	/**
	 * This function returns the javascript to initialize the Reset Password form. 
	 * @param array $defaultData this contains the default data used to prepopulate certain form elements
	 * @return String that contains the javascript to initializes the checkout form.
	 */
	public function getInitJavascript()
	{
		return "<script>var mm_nonce_name_resetpassword_form = '" . MM_ResetPasswordFormView::$MM_NONCE_NAME_RESET_PASSWORD_FORM . "';</script>";
	}
	
	/**
	 * This function processes the MM_Form_Section tag. It is responsible for checking if the current user 
	 * should see the contents of this section based on the form configuration.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public function mm_form_section($content, $atts, $code)
	{
		return "Invalid SmartTag Configuration: The '{$code}' SmartTag is not supported for Reset Password forms.";
	}
	
	/**
	 * This function processes the MM_Form_Field tag. It is responsible for rendering the 
	 * form field based on the type passed and the form configuration.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public function mm_form_field($content, $atts, $code)
	{
		$outputStr = "";

		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
		
		if(!isset($type))
		{
			$type = "input";
		}
		
		if(!isset($customattributes) || empty($customattributes))
		{
		    $customattributes = "";
		}
		
		if(!isset($class) || empty($class))
		{
		    $class = "mm-field";
		}
		
		switch(strtolower($type))
		{
			case "input":
				if(isset($name))
				{
					switch(strtolower($name))
					{
						case "password":
							$outputStr .= "<input type=\"password\" id=\"password\" name=\"password\" class=\"{$class}\" {$customattributes} ".(isset($atts['placeholder']) && strlen(trim($atts['placeholder'])) ? " placeholder=\"{$atts['placeholder']}\"" : "")." />";
							break;
							
						case "password-confirm":
							$outputStr .= "<input type=\"password\" id=\"password_confirm\" name=\"password_confirm\" class=\"{$class}\" {$customattributes} ".(isset($atts['placeholder']) && strlen(trim($atts['placeholder'])) ? " placeholder=\"{$atts['placeholder']}\"" : "")." />";
							break;

						default:
							return "Invalid SmartTag Configuration: Invalid name of '{$name}' passed to SmartTag {$code} with type {$type}.";
							break;
					}
				}
				else
				{
					return "Invalid SmartTag Configuration: The 'name' attribute is required for SmartTag {$code} with type {$type}.";
				}
				
				break;
				
			default:
				return "Invalid SmartTag Configuration: Invalid type of '{$type}' passed to SmartTag {$code}";
				break;
		}
			
		return $outputStr;
	}
	
	/**
	 * This function processes the MM_Form_Data tag. It is responsible for rendering the 
	 * data element based on the type passed and the form configuration.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public function mm_form_data($content, $atts, $code)
	{
		return "Invalid SmartTag Configuration: The '{$code}' SmartTag is not supported for Reset Password forms.";
	}
	
	/**
	 * This function processes the MM_Form_Message tag. It is responsible for rendering the 
	 * message element based on the type passed and the form configuration.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public function mm_form_message($content, $atts, $code)
	{
		$outputStr = "";
	
		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		if(!isset($customattributes) || empty($customattributes))
		{
		    $customattributes = "";
		}
		
		$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
	
		if(isset($type))
		{
			switch(strtolower($type))
			{
			    case "error":
			        if(!isset($class) || empty($class))
			        {
			            $class = "mm-error";
			        }
			        
					if($form->error != "")
					{
						$outputStr .= "<p id=\"mm-reset-password-form-message\" class=\"{$class}\">".$form->error."</p>";
					}
					break;
					
			    case "success":
			        if(!isset($class) || empty($class))
			        {
			            $class = "mm-success";
			        }
			        
					if($form->success != "")
					{
						$outputStr .= "<p id=\"mm-reset-password-form-message\" class=\"{$class}\">".$form->success."</p>";
					}
					break;
				
				default:
					return "Invalid type of '{$type}' passed to {$code}";
					break;
			}
			
			return $outputStr;
		}
		else
		{
			return "Invalid SmartTag Configuration: The 'type' attribute is required for {$code} SmartTag";
		}
	}
	
	/**
	 * This function processes the MM_Form_Button tag. It is responsible for 
	 * returning the appropriate javascript to submit the form based on the type passed.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public function mm_form_button($content, $atts, $code)
	{
		$outputStr = "";
	
		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		if(!isset($customattributes) || empty($customattributes))
		{
		    $customattributes = "";
		}
		
		$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
	
		if(isset($type))
		{
			switch(strtolower($type))
			{
				case "submit":
					if(!isset($label))
					{
						$label = "Submit";
					}
					if(!isset($color))
					{
						$color = "";
					}
					if(!isset($class))
					{
						$customClass = "mm-button {$color}";
					}
					else 
					{
						$customClass = $class;
					}
					$outputStr .= "<input type=\"submit\" name=\"submit\" value=\"{$label}\" id=\"mm-submit-button\" class=\"{$customClass}\" {$customattributes} />";
					break;
					
				default:
					return "Invalid type of '{$type}' passed to SmartTag {$code}";
					break;
			}
			
			return $outputStr;
		}
		else
		{
			return "Invalid SmartTag Configuration: The 'type' attribute is required for {$code} SmartTag";
		}
		
	}
}

