class MM_MailChimpEmailServiceProvider extends MM_AbstractEmailServiceProvider
{
	private static $CONFIRM_NEVER_TXT = "never";
	private static $CONFIRM_FIRST_LIST_TXT = "first_list_only";
	private static $CONFIRM_EVERY_LIST_MOVE_TXT = "before_every_list_move";
	
	private $apiKey;
	private $confirmOptIn;
	private $taggingEnabled = false;
	protected $apiUrl;

	/**
	 *
	 * The mailchimp api requires an apiKey for access, so it is a required parameter for the constructor
	 * @param Object $provider_info Options object
	 */
	public function __construct($provider_info)
	{ 
	    $additional_data = (is_object($provider_info) && isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
		if (is_object($provider_info) && (isset($provider_info->api_key)) && !empty($provider_info->api_key))
		{
			parent::__construct($provider_info);
			$this->setAPIKey($provider_info->api_key);
			$this->confirmOptIn = isset($additional_data['confirm_opt_in'])?$additional_data['confirm_opt_in']:self::$CONFIRM_NEVER_TXT;
			$this->taggingEnabled = isset($additional_data['tagging_enabled'])?(bool)$additional_data['tagging_enabled']:false;
		}
	}


	/**
	 * Returns array of headers containing the basic authentication headers to auth against the mailchimp v3 api
	 *
	 * @return array of headers
	 */
	protected function getHeaders()
	{
		$headerArray = array('Authorization' => 'Basic ' . base64_encode("anystring:{$this->apiKey}"));
		return $headerArray;
	}


	/**
	 * Takes the output from a wp_remote_request() call and returns an MM_Response object containing the response returned from the api
	 * If the HTTP code from the request was not a 200, then the returned MM_Response object is of type MM_Response::Error
	 *
	 * @param unknown $apiResponse The output of a wp_remote_request() call
	 * @return MM_Response of type success if the http response code was 200, error otherwise. The message field of the MM_Response contains the call output
	 */
	protected function translateResponse($apiResponse)
	{
		if (is_wp_error($apiResponse))
		{
			$mmResponse = new MM_Response("",MM_Response::$ERROR);
			$mmResponse->message = $apiResponse->get_error_message();
			return $mmResponse;
		}
		
		$responseCode = wp_remote_retrieve_response_code($apiResponse);

		if (($responseCode == "200") && (isset($apiResponse['body'])))
		{
			return new MM_Response($apiResponse['body']);
		}
		else
		{
			$mmResponse = new MM_Response("",MM_Response::$ERROR);
			if (isset($apiResponse['body']))
			{
				$body = json_decode($apiResponse['body']);
				if (($body !== false) && isset($body->detail))
				{
					$mmResponse->message = $body->detail;
				}
				else
				{
					$mmResponse->message = wp_remote_retrieve_response_message($apiResponse);
				}
			}
			else
			{
				$mmResponse->message = wp_remote_retrieve_response_message($apiResponse);
			}
		}
		return $mmResponse;
	} 
	
	
	
	/**
	 * Call the Mailchimp v3 api and return the response
	 *
	 * @param string $endpoint The resource to call, relative to the base api url
	 * @param string $method The HTTP Verb to use
	 * @param string $data Any data that needs to be sent to the remote url
	 * @param array $headers Any custom headers that need to be set for the call
	 *
	 * @return MM_Response with state success or error. On success, the message contains the response, on error it will contain a descriptive error message
	 *
	 */
	protected function callApi($endpoint, $method="GET", $data="", $headers=array())
	{
		if (count($headers) == 0)
		{
			$headers = $this->getHeaders();
		}

		$callUrl = $this->apiUrl."{$endpoint}";
		
		switch ($method)
		{
			case "POST":
				$apiResponse = wp_remote_request($callUrl, array('method'  => 'POST',
				'headers' => $headers,
				'body'    => $data));
				 
				return $this->translateResponse($apiResponse);
				break;
			case "DELETE":
				$apiResponse = wp_remote_request($callUrl, array('method'  => 'DELETE',
				'headers' => $headers));
				return $this->translateResponse($apiResponse);
				break;
			case "PUT":
				//currently unused
				$apiResponse = wp_remote_request($callUrl, array('method'  => 'PUT',
				'headers' => $headers,
				'body'    => $data));
				return $this->translateResponse($apiResponse);
				break;
			case "PATCH":
				$apiResponse = wp_remote_request($callUrl, array('method'  => 'PATCH',
				'headers' => $headers,
				'body'    => $data));
				return $this->translateResponse($apiResponse);
				break;
			case "GET":
			default:
				$apiResponse = wp_remote_request($callUrl, array('method'  => 'GET',
				'headers' => $headers));
				return $this->translateResponse($apiResponse);
				break;
		}


	}

	/**
	 *
	 * Return the lists associated with the configured apiKey, keyed by id with the values being list names
	 * @return MM_Response containing lists as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getLists($filters=array(), $start=0, $limit=100)
	{
		$queryString = "";
		if (is_numeric($start) && ($start > 0))
		{
			$queryString .= "offset={$start}&";
		}
		$limit = (is_numeric($limit))?$limit:100;
		$queryString .= "count={$limit}";
		$callResponse = $this->callApi("/lists?{$queryString}");
		if (MM_Response::isError($callResponse))
		{
			return $callResponse;
		}
		$callMsg = json_decode($callResponse->message);
		if (!isset($callMsg->lists) || !(is_array($callMsg->lists)))
		{
			return new MM_Response("No lists founds",MM_Response::$ERROR);
		}
		$lists = array();
		foreach ($callMsg->lists as $listObject)
		{
			$lists[$listObject->id] = $listObject->name;
		}
		return new MM_Response($lists);
	}


	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post)
	{
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$api_key_value = ($provider_entity->isValid())?$provider_entity->getAPIKey():"";
		$confirm_opt_in = $provider_entity->getConfigOption("confirm_opt_in"); 
		$form = new MM_EmailServiceProviderDialog(); 
		
		$options = "<option value='".self::$CONFIRM_NEVER_TXT."' ".(($confirm_opt_in==self::$CONFIRM_NEVER_TXT)?"selected":"").">"._mmt("Never")."</option>
				<option value='".self::$CONFIRM_FIRST_LIST_TXT."'".(($confirm_opt_in==self::$CONFIRM_FIRST_LIST_TXT)?"selected":"").">"._mmt("First List Only")."</option>
				<option value='".self::$CONFIRM_EVERY_LIST_MOVE_TXT."'".(($confirm_opt_in==self::$CONFIRM_EVERY_LIST_MOVE_TXT)?"selected":"").">"._mmt("Before Every List Move")."</option>";
		
		$taggingEnabled = ($provider_entity->isValid())?$provider_entity->getConfigOption("tagging_enabled"):"";
		$taggingEnabledChecked = ($taggingEnabled == true)?"checked":""; //this variable only determines whether the checkbox starts off as checked
		$taggingDescription = "When tagging is enabled, tags will be added and removed from a subscriber in MailChimp when bundles are added and removed from a member in MemberMouse.";
		$taggingInfoIcon = MM_Utils::getInfoIcon($taggingDescription);
		
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">
			<label style="float:left; width:8em;">API Key:
			</label>
			<input type="text" name="mailchimp_api_key" id="mailchimp_api_key" size="37" value="{$api_key_value}"/><br/>
			<br />
			<label style="vertical-align:middle; float:left; width:10em;">Confirmed Opt-In:
			</label>
			<select name='confirm_opt_in' id='confirm_opt_in'>
				{$options}
			</select>
			<br/>
            <div style="padding-top:5px; padding-bottom:10px;>
			<label style="vertical-align:middle; float:left; width:10em;">Enable Tagging:</label> {$taggingInfoIcon}
			<input type="checkbox" name="tagging_enabled" value="true" {$taggingEnabledChecked} style="margin-left: 10px;"/>
            </div>
		</div>
OPTIONS;
		return $form;
	}


	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractEmailServiceProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData)
	{
		if (is_array($optionData) && (isset($optionData['mailchimp_api_key'])) && !empty($optionData['mailchimp_api_key']))
		{
			if(isset($optionData['confirm_opt_in']))
			{
				$provider_token = $optionData['provider_token'];
				$api_key = $optionData['mailchimp_api_key'];
				$prospect_list_id = $optionData['prospect_list_id'];
				$cancellation_list_id = $optionData['cancellation_list_id'];
				$confirm_opt_in = $optionData['confirm_opt_in'];
				$tagging_enabled = $optionData['tagging_enabled'];
	
				$this->setAPIKey($api_key);
				$this->setConfirmOptIn($confirm_opt_in);
				
				$provider_entity = new MM_EmailServiceProvider();
				$provider_entity->setToken($provider_token);
				$provider_entity->getData();
				if ($provider_entity->isValid())
				{
					//first write the provider's configuration options
					$provider_entity->setAPIKey($api_key);
					$provider_entity->setActive(true);
					$provider_entity->setProspectListID($prospect_list_id);
					$provider_entity->setCancellationListID($cancellation_list_id);
					$provider_entity->setConfigOption("confirm_opt_in", $confirm_opt_in);
					$provider_entity->setConfigOption("tagging_enabled", $tagging_enabled);
					$commit_response = $provider_entity->commitData();
					if ($commit_response->type == MM_Response::$ERROR)
					{
						//pass through errors committing to the database
						return $commit_response;
					}
					//now write the list mappings
					if (isset($optionData['member_type_mappings']) && is_array($optionData['member_type_mappings']))
					{
						$provider_id = $provider_entity->getId();
						return $this->persistListMappings($provider_id,$optionData['member_type_mappings']);
					}
				}
				else
				{
					//failed to load entity from table
					return new MM_Response("Failed to save settings",MM_Response::$ERROR);
				}
			}
			else 
			{
				return new MM_Response("Failed to save settings, could not find confirmed opt-in value.",MM_Response::$ERROR);
			}
		}
		else
		{
			//optionData is not an array, or the api key was not sent
			return new MM_Response("Failed to save settings: Incorrect options format or API Key not sent",MM_Response::$ERROR);
		}
	}

	/**
	 * Configures the mailchimp provider in order to do the initial connect
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param $optionData Array The values posted from the form rendered by renderOptionsDialog
	 */
	public function configureFromOptions($optionData)
	{
		if (isset($optionData['mailchimp_api_key']))
		{
			$this->setAPIKey($optionData['mailchimp_api_key']);
		}
		
		if(isset($optionData['confirm_opt_in']))
		{
			$this->confirmOptIn = $optionData['confirm_opt_in'];
		}
		
		if (isset($optionData['tagging_enabled']))
		{
		    $this->setTaggingEnabled($optionData['tagging_enabled']);
		}
		else
		{
		    $this->setTaggingEnabled(false);
		}
		return new MM_Response();
	}


	/**
	 * Adds a member to a list
	 *
	 * @see MM_AbstractEmailServiceProvider::addMemberToList()
	 * @param $email String The email address to add to the list
	 * @param $listId String The id of the list
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 * @return MM_Response indicating success or failure
	 */
	public function addMemberToList($email,$listId,$includeBundleInfo=true)
	{
		$member = MM_User::findByEmail($email);

		if (!$member->isValid())
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		$this->addRequiredMergeVars($listId,$includeBundleInfo);
		$mergevarsResponse = $this->getMemberDataToMerge($email,$includeBundleInfo);
		if ($mergevarsResponse->type == MM_Response::$ERROR)
		{
			return $mergevarsResponse;
		}
		//returned message is an object keyed by tag, with values being the member-specific merge var values
		
		$jsonObject = new stdClass();
		$jsonObject->email_address = $email;
		$jsonObject->email_type = "html";
		$jsonObject->status = $this->getStatusForUser($email, $listId);  
		$jsonObject->merge_fields = $mergevarsResponse->message;
		$jsonData = $this->jsonEncode($jsonObject);
		
		$endpointUrl = "/lists/{$listId}/members";
		$addToListResponse = $this->callApi($endpointUrl,"POST",$jsonData);
		
		// add tags
		if($this->taggingEnabled())
		{
    		$subscriberHash = md5(strtolower($email));
    		$tags = $this->getTags($email);
    		
    		if(count($tags->message) > 0)
    		{
        		$jsonObject = new stdClass();
        		$jsonObject->tags = $tags->message;
        		$jsonData = $this->jsonEncode($jsonObject);
        		
        		$endpointUrl = "/lists/{$listId}/members/$subscriberHash/tags";
        		$callResponse = $this->callApi($endpointUrl,"POST",$jsonData);
        		
        		// when this call is successful it returns 'No Content' 
        		if (MM_Response::isError($callResponse) && strtolower($callResponse->message) != "no content")
        		{
        		    return new MM_Response("Error adding tags to subscriber '{$email}': {$callResponse->message}",MM_Response::$ERROR);
        		}
    		}
		}
		
		// check for errors in adding email address to list
		if (MM_Response::isError($addToListResponse))
		{
		    // if the error message contains "already a list member", MailChimp is letting us know that the email address is
		    // already on the list. This is a non-fatal error so we can ignore it
		    if(!str_contains($addToListResponse->message, "already a list member"))
		    {
		        return new MM_Response("Error adding {$email} to list with id {$listId}: {$addToListResponse->message}",MM_Response::$ERROR);
		    }
		}
		
		return new MM_Response();
	}
 

	/**
	 * Gets the existing status for a mailchimp user.
	 *
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return pending | subscribed depending on configuration setting.
	 */
	private function getStatusForUser($email, $listId)
	{ 
		$status = "subscribed";
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		if ($provider_entity->isValid())
		{ 
			$this->apiKey = $provider_entity->getAPIKey();
			$this->confirmOptIn = $provider_entity->getConfigOption("confirm_opt_in");
			 
			/*
			 * If configuration is set to never validate, just
			 * set as subscribed.
			 */
			if($this->confirmOptIn==self::$CONFIRM_NEVER_TXT)
			{
				$status = "subscribed";
			}
			/*
			 * If configuration is set to validate on first list only
			 * then check to see if they have subscribed and set status accordingly.
			 */
			else if($this->confirmOptIn==self::$CONFIRM_FIRST_LIST_TXT)
			{
				$status = "subscribed";
				$user = MM_User::findByEmail($email);
				$listId = $user->getSubscribedListId();
				$hasExistingListId = strlen($listId)>0 && !is_null($listId);
				if(!$hasExistingListId)
				{
					$status = "pending";
				} 
			}
			/*
			 * implied else => pending.
			 */
		} 
		
		return $status;
	}
	
	

	/**
	 * Checks to see if a users is subscribed to a list
	 * 
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return boolean true if has subscribed to listId or otherwise false.
	 */
	private function hasSubscribed($email, $listId)
	{  
		$emailStr = md5(strtolower($email));
		$endpointUrl = "/lists/{$listId}/members/".$emailStr;
		$callResponse = $this->callApi($endpointUrl); 
		return !MM_Response::isError($callResponse); 
	}
	

	/**
	 * Removes a member from a list
	 *
	 * @see MM_AbstractEmailServiceProvider::removeMemberFromList()
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return MM_Response indicating success or failure
	 */
	public function removeMemberFromList($email, $listId)
	{
		if (empty($listId))
		{
			return new MM_Response();
		}
		$emailHash = md5(strtolower($email));
		$callResponse = $this->callApi("/lists/{$listId}/members/{$emailHash}","DELETE");
		if (MM_Response::isError($callResponse))
		{
			return new MM_Response("Error removing {$email} from list with id {$listId}",MM_Response::$ERROR);
		}
		return new MM_Response();
	}


	/**
	 * Changes a members list subscription based on a change in membership level.
	 * Performs a remove, looks up the list (if any) for the new membership level, and then performs an add
	 *
	 * @see MM_AbstractEmailServiceProvider::changeMembershipLevel()
	 *
	 * @param $email String The email address of the member to be updated
	 * @param $newMemberType int The membership level id of the member's new membership level
	 * @return MM_Response indicating success or failure
	 */
	public function changeMembershipLevel($email,$newMemberType)
	{

		$overall_success = true;
		$overall_status = "";
		$listFriendlyNames = $this->getLists();

		$member = MM_User::findByEmail($email);

		if (!$member->isValid())
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		$oldListId = $member->getSubscribedListId();
		if (!empty($oldListId))
		{
			$oldRemoveResult = $this->removeMemberFromList($email,$oldListId);
			if ($oldRemoveResult == MM_Response::$ERROR)
			{
				$overall_success = false;
				$overall_status .= "{$oldRemoveResult->message}\n";
			}
		}

		//continue on despite state of remove
		$newListId = (empty($newMemberType))?$this->getListIdForMember($email):$this->getListIdForMembershipLevel($newMemberType);
		if ($newListId->type == MM_Response::$ERROR)
		{
			$overall_status.=$newListId->message;
			return new MM_Response($overall_status,MM_Response::$ERROR);
		}

		$newListId = $newListId->message;
		if (empty($newListId))
		{
			//no list to add to, so success
			return new MM_Response();
		}

		$newAddResult = $this->addMemberToList($email, $newListId);
		if ($newAddResult == MM_Response::$ERROR)
		{
			$overall_success = false;
			$overall_status .= "{$newAddResult->message}\n";
			return new MM_Response($overall_status,MM_Response::$ERROR);
		}
		else
		{
			//success
			if (!$overall_success)
			{
				return new MM_Response("Operation succeeded, but the following errors were encountered: {$overall_status}",MM_Response::$ERROR);
			}
			else
			{
				return new MM_Response("Operation was successful");
			}
		}
	}


	/**
	 * Updates a members information attached to a subscribed list
	 *
	 * @see MM_AbstractEmailServiceProvider::updateMember()
	 * @param $email String The email of the member to be updated
	 * @param $listId String The id of the list where the member's subscription info should be updated
	 * @param $newEmail String (optional) - The member's new email in the case where the update is an email address change
	 */
	public function updateMember($email, $listId,$newEmail="")
	{
		if (empty($listId))
		{
			return new MM_Response(); //no list was passed in, so success
		}
		$this->addRequiredMergeVars($listId);
		$merge_vars_response = $this->getMemberDataToMerge(empty($newEmail)?$email:$newEmail);
		if ($merge_vars_response->type == MM_Response::$ERROR)
		{
			return $merge_vars_response;
		}
		$jsonObject = new stdClass();
		$jsonObject->email_address = (!empty($newEmail))?$newEmail:$email;
		$jsonObject->email_type = "html";
		$jsonObject->status = $this->getStatusForUser($email, $listId);
		$jsonObject->merge_fields = $merge_vars_response->message;
		$jsonData = $this->jsonEncode($jsonObject);
		$subscriberHash = md5(strtolower($email));
		$response = $this->callApi("/lists/{$listId}/members/{$subscriberHash}","PATCH",$jsonData);
		if (MM_Response::isError($response))
		{
			//TODO: use list friendly name in error msg
			return new MM_Response("Error updating {$email} on list with id {$listId}",MM_Response::$ERROR);
		}
		
		// add tags
		if($this->taggingEnabled())
		{
    		$tags = $this->getTags($email);
    		
    		if(count($tags->message) > 0)
    		{
        		$jsonObject = new stdClass();
        		$jsonObject->tags = $tags->message;
        		$jsonData = $this->jsonEncode($jsonObject);
        		
        		$endpointUrl = "/lists/{$listId}/members/$subscriberHash/tags";
        		$callResponse = $this->callApi($endpointUrl,"POST",$jsonData);
        		
        		// when this call is successful it returns 'No Content'
        		if (MM_Response::isError($callResponse) && strtolower($callResponse->message) != "no content")
        		{
        		    return new MM_Response("Error adding tags to subscriber '{$email}': {$callResponse->message}",MM_Response::$ERROR);
        		}
    		}
		}
		
		return new MM_Response();

	}


	/**
	 *
	 * Returns the api key
	 * @return String the api key
	 */
	public function getAPIKey()
	{
		return $this->apiKey;
	}

	/**
	 *
	 * Sets the api key
	 * @param String $apiKey The new api key
	 */
	public function setAPIKey($apiKey)
	{
		$this->apiKey = $apiKey;
			
		$keyComponents = explode("-",$this->apiKey);
		$length = count($keyComponents);
		if ($length > 1)
		{
			$datacenter = $keyComponents[$length-1];
			$this->apiUrl = "https://{$datacenter}.api.mailchimp.com/3.0";
		}
		else
		{
			//incorrect api key format
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Incorrect api key format: no datacenter component");
		}
	}
	
	
	/**
	 * Sets whether or not tagging is activated
	 *
	 * @param boolean true or false
	 */
	public function setTaggingEnabled($isEnabled)
	{
	    $this->taggingEnabled = (bool)$isEnabled;
	}
	
	
	/**
	 * Returns whether or not tagging is activated
	 *
	 * @return boolean true or false
	 */
	public function taggingEnabled()
	{
	    return $this->taggingEnabled;
	}


	/**
	 *
	 * Gets the member data to merge. Currently this is first_name, last_name, email, and any bundles
	 *
	 * @param String $email The email address of the member
	 * @return MM_Response containing an object of merge data as key-value pairs on success, MM_Response containing the error state otherwise
	 */
	protected function getMemberDataToMerge($email,$includeBundleInfo=true)
	{
		$user = MM_User::findByEmail($email);

		if (!$user->isValid())
		{
			return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
		}

		$mergeVarObj = new stdClass();
		$mergeVarObj->FNAME = $user->getFirstName();
		$mergeVarObj->LNAME = $user->getLastName();


		if($includeBundleInfo)
		{
			//set all bundles false to start
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$reqTag = strtoupper($reqTag);
				$mergeVarObj->$reqTag = "FALSE";
			}

			//now set the ones the user has equal to true
			$appliedBundles = $user->getAppliedBundles();

			foreach ($appliedBundles as $appliedBundle)
			{
				$bundle = $appliedBundle->getBundle();
					
				if($bundle->isValid())
				{
					$shortName = strtoupper($bundle->getShortName());
					$mergeVarObj->$shortName = "TRUE";
				}
			}
		}

		return new MM_Response($mergeVarObj);
	}


	/**
	 * Adds merge variables to the list if they are not already present. This is crucial, because trying to update a merge var that isn't
	 * currently attached to the list will cause an error. Currently used to add bundles
	 *
	 * @param String $listId The id of the list to add the merge vars to
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 */
	protected function addRequiredMergeVars($listId,$includeBundleInfo=true)
	{
		$mvCache = $this->getListMergeVars($listId);
		if ($mvCache->type == MM_Response::$ERROR)
		{
			return $mvCache;
		}
		$mvCache = $mvCache->message;

		if($includeBundleInfo)
		{
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$reqTag = strtoupper($reqTag); //mailchimp only supports uppercase tags
				if (!isset($mvCache[$reqTag]))
				{
					//add this mergeVar to the list
					$jsonObject = new stdClass();
					$jsonObject->tag = $reqTag;
					$jsonObject->name = $reqName;
					$jsonObject->type = "text";
					$jsonData = $this->jsonEncode($jsonObject);
					$response = $this->callApi("/lists/{$listId}/merge-fields","POST",$jsonData);
					if (MM_Response::isError($response))
					{
						new MM_Response("Error adding {$reqTag} merge_var to the list with id {$listId}",MM_Response::$ERROR);
					}
				}
			}
		}
	}
	
	/**
	 *
	 * Gets the tags to add to a subscriber.
	 *
	 * @param String $email The email address of the member
	 * @return MM_Response containing an object of tags with appropriate status, MM_Response containing the error state otherwise
	 */
	protected function getTags($email)
	{
	    $user = MM_User::findByEmail($email);
	    
	    if (!$user->isValid())
	    {
	        return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
	    }
	       
	    $tagDataObj = new stdClass();
	    
	    //set all tags inactive to start
	    foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
	    {
	        $reqTag = strtoupper($reqTag);
	        
	        $tagDataObj->$reqTag = "inactive";
	    }
	    
	    //now set the ones the user has active equal to true
	    $appliedBundles = $user->getAppliedBundles();
        
        foreach ($appliedBundles as $appliedBundle)
        {
            $bundle = $appliedBundle->getBundle();
            
            if($bundle->isValid())
            {
                $shortName = strtoupper($bundle->getShortName());
                $tagDataObj->$shortName = "active";
            }
        }
	    
        // now populate array to pass to MailChimp
        $tags = array();
        
        foreach($tagDataObj as $name=>$status)
        {
            $tag = new stdClass();
            $tag->name = $name;
            $tag->status = $status;
            array_push($tags, $tag);
        }
        
        return new MM_Response($tags);
	}


	/**
	 * Returns the merge_vars in essentially the same format that mailchimp does, except this time they are keyed by the tag
	 *
	 * @param String $listId The id of the list to retrieve merge_vars for
	 */
	protected function getListMergeVars($listId)
	{
		$mvCache = array();
		$mvResponse = $this->callApi("/lists/{$listId}/merge-fields");
		if (MM_Response::isError($mvResponse))
		{
			return new MM_Response("Error retrieving merge vars for list with id {$listId}");
		}
		$mvs = json_decode($mvResponse->message);
		if (!isset($mvs->merge_fields))
		{
			return new MM_Response("Incorrect format returned when retrieving merge vars for list with id {$listId}");
		}
		foreach ($mvs->merge_fields as $mergeFieldObj)
		{
			$mvCache[$mergeFieldObj->tag] = $mergeFieldObj;
		}
		return new MM_Response($mvCache);
	}


	protected function jsonEncode($object)
	{
		if (function_exists("wp_json_encode"))
		{
			return wp_json_encode($object);
		}
		else
		{
			return json_encode($object);
		}
	}
	
	private function getConfirmOptIn($data)
	{
		return $this->confirmOptIn;
	}
	
	private function setConfirmOptIn($data)
	{
		$this->confirmOptIn = $data;
	}
}
