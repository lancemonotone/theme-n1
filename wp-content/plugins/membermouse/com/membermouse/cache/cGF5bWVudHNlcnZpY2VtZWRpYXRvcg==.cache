/**
 *
 *MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */

/**
 * MM_PaymentServiceMediator is a class that serves as a mediator between MemberMouse and the active payment services
 * It notifies the payment services that they need to perform non-payment specific tasks such as updating product information.
 * The mediator may update multiple payment services as a result of one call, depending on configuration
 */

class MM_PaymentServiceMediator {
	
	private $async      = false; //determines whether events are dispatched in-process or if the are offloaded to another http process
	private $activeOnly = true;  //determines whether inactive services receive notifications also
	
	
	public function __construct($async=true)
	{
	    $this->async = (bool)$async;
	}
	
	/**
	 * Notifies payment services a new product was added
	 * 
	 * @param MM_Product $product The newly added product
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyProductAdded(MM_Product $product)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::PRODUCT_ADDED, $product);
	}
	

	/**
	 * Notifies payment services a product was updated
	 *
	 * @param MM_Product $product The updated product
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyProductUpdated(MM_Product $product)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::PRODUCT_UPDATED,$product);
	}
	

	/**
	 * Notifies payment services a product was removed
	 *
	 * @param MM_Product $product The removed product
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyProductRemoved(MM_Product $product)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::PRODUCT_REMOVED,$product);
	}
	
	
	/**
	 * Notifies payment services a new coupon was added
	 *
	 * @param MM_Coupon $coupon The newly added coupon
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyCouponAdded(MM_Coupon $coupon)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::COUPON_ADDED, $coupon);
	}
	
	
	/**
	 * Notifies payment services a coupon was updated
	 *
	 * @param MM_Coupon $coupon The updated coupon
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyCouponUpdated(MM_Coupon $coupon)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::COUPON_UPDATED, $coupon);
	}
	
	
	/**
	 * Notifies payment services a coupon was removed
	 *
	 * @param MM_Coupon $coupon The removed coupon
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyCouponRemoved(MM_Coupon $coupon)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::COUPON_REMOVED, $coupon);
	}

	
	/**
	 * Notifies services that an event was received, and passes through the event type and associated data
	 * 
	 * @param integer $eventType One of the constants defined in MM_MemberMouseEventListener
	 * @param array $eventData The data attached to the event
	 * @return MM_Response of type success if all the notified services handled the notification without error, false otherwise. This is passed through to the caller. type success is always returned if async is enabled
	 */
	public function notifyServicesOfEvent($eventType, $eventData)
	{
	    $potentialServices = ($this->activeOnly)?MM_PaymentServiceFactory::getAvailablePaymentServices():MM_PaymentServiceFactory::getPaymentServicesArray(false);
	    
	    /* disable async until job queue is in place
	    if ($this->async)
	    {
            foreach ($potentialServices as $potentialService)
            {
                if ($potentialService instanceof MM_MemberMouseEventListener)
                {
                    // if async is enabled, we only care at this point whether there is a configured service that implements the MM_MemberMouseListener interface. 
                    //   We don't want to incur the overhead of launching a separate process if there is nothing for it to do. Once we verify there is a service that is listening, 
                    //   notify the async task manager and exit this method immediately 
                    
                    $task = new MM_PaymentOperationQueueTask($eventType, $eventData);
                    MM_Queue::addTask($task); //TODO: adjust call stack so tha queue failures are translated to MM_Response and handled by the caller?
                    return new MM_Response();                    
                }
            }

             // So if async is enabled but no available payment services implement
             // the MM_MemberMouseEventListener, we should still return an MM_Response().
             
            return new MM_Response();
	    }
	    else 
	    {
	        $overallStatus = new MM_Response();
	        foreach ($potentialServices as $potentialService)
	        {
	            if ($potentialService instanceof MM_MemberMouseEventListener) //only send events to services that implement the listener interface
	            {
	                $overallStatus = ($overallStatus->type == MM_Response::$SUCCESS)?($potentialService->eventReceived($eventType, $eventData)):$overallStatus;
	            }
	        }
	        return $overallStatus;
	    }
	    */
	    $overallStatus = new MM_Response();
	    foreach ($potentialServices as $potentialService)
	    {
	        if ($potentialService instanceof MM_MemberMouseEventListener) //only send events to services that implement the listener interface
	        {
	            $overallStatus = ($overallStatus->type == MM_Response::$SUCCESS)?($potentialService->eventReceived($eventType, $eventData)):$overallStatus;
	        }
	    }
	    return $overallStatus;
	}
	
	
    /**
     * @return boolean
     */
    public function getAsync()
    {
        return $this->async;
    }

    /**
     * @param boolean $async
     */
    public function setAsync($async)
    {
        $this->async = $async;
    }

	
	
}
