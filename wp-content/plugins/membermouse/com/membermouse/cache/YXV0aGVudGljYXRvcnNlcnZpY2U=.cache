/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 */

class MM_AuthenticatorService
{
	public static function clear_connection_data() {
		if ( isset( $_GET['mm-clear-connection-data'] ) ) {
		  // Admins only
		  if ( current_user_can( 'manage_options' ) ) {
		    delete_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );
		    delete_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_EMAIL );
		    delete_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SECRET );
		  }
		}
	}

	/**
	* Assembles a URL for connecting to our Authentication service
	*
	* @param boolean     $stripe_connect    Will add a query string that is used to redirect to Stripe Connect after returning from Auth service
	* @param array       $additional_params
	* @param string|null $return_url
	*
	* @return string
	*/
	public static function get_auth_connect_url( $stripe_connect = false, $payment_method_id = false, $additional_params = [], $return_url = null ) {
		$return_url = is_null( $return_url ) ? admin_url( 'admin.php?page=' . MM_MODULE_ACCOUNT_LOGIN, false ) : $return_url;

		$connect_params = array(
		  'return_url' => urlencode( add_query_arg( 'mm-connect', 'true', $return_url ) ),
		  'nonce' => wp_create_nonce( 'mm-connect' )
		);

		$site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );


		if ( $site_uuid ) {
		  $connect_params['site_uuid'] = $site_uuid;
		}

		if ( true === $stripe_connect && ! empty( $payment_method_id ) ) {
		  $connect_params['stripe_connect'] = 'true';
		  $connect_params['method_id'] = $payment_method_id;
		}

		if ( ! empty( $additional_params ) ) {
		  $connect_params = array_merge($connect_params, $additional_params);
		}

		return add_query_arg( $connect_params, MM_AUTH_SERVICE_URL . '/connect/membermouse' );
	}

	/**
	* Process a Connect
	*
	* @return void
	*/
	public static function process_connect() {


		// Make sure we've entered our Authenticator process
		if ( ! isset( $_GET['mm-connect'] ) || 'true' !== $_GET['mm-connect'] ) {
		  return;
		}

		// Validate the nonce on the WP side of things
		if ( ! isset( $_GET['nonce'] ) || ! wp_verify_nonce( $_GET['nonce'], 'mm-connect' ) ) {
		  return;
		}

		// Make sure the user is authorized
		if ( ! MM_AuthUtils::is_authorized() ) {  
		  return;
		}

		$site_uuid = isset( $_GET['site_uuid'] ) ? sanitize_text_field( $_GET['site_uuid'] ) : '';
		$auth_code = isset( $_GET['auth_code'] ) ? sanitize_text_field( $_GET['auth_code'] ) : '';

		// GET request to obtain token
		$response = wp_remote_get( MM_AUTH_SERVICE_URL . "/api/tokens/{$site_uuid}", array(
		  'sslverify' => false,
		  'headers' => array(
		    'accept' => 'application/json'
		  ),
		  'body' => array(
		    'auth_code' => $auth_code
		  )
		) );

		$body = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( isset( $body['account_email'] ) && ! empty( $body['account_email'] ) ) {
		  $email_saved = update_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_EMAIL, sanitize_text_field( $body['account_email'] ) );
		}

		if ( isset( $body['secret_token'] ) && ! empty( $body['secret_token'] ) ) {
		  $token_saved = update_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SECRET, sanitize_text_field( $body['secret_token'] ) );
		}

		if ( isset( $body['user_uuid'] ) && ! empty( $body['user_uuid'] ) ) {
		  $user_uuid_saved = update_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_USER_UUID, sanitize_text_field( $body['user_uuid'] ) );
		}

		if ( $site_uuid ) {
		  update_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID, $site_uuid );
		}

		if ( isset( $_GET['stripe_connect'] ) && 'true' === $_GET['stripe_connect'] && isset( $_GET['method_id'] ) && ! empty( $_GET['method_id'] ) ) {
		  wp_redirect( MM_StripeConnect::get_stripe_connect_url( $_GET['method_id'] ) );
		  exit;
		}

		$redirect_url = remove_query_arg( array( 'mm-connect', 'nonce', 'site_uuid', 'user_uuid', 'auth_code', 'license_key' ) );

		wp_redirect( $redirect_url );
		exit;
	}


	/**
	* Process a Disconnect
	*
	* @return void
	*/
	public static function process_disconnect() {

		// Make sure we've entered our Authenticator process
		if ( ! isset( $_GET['mm-disconnect'] ) || 'true' !== $_GET['mm-disconnect'] ) {
		  return;
		}

		// Validate the nonce on the WP side of things
		if ( ! isset( $_GET['nonce'] ) || ! wp_verify_nonce( $_GET['nonce'], 'mm-disconnect' ) ) {
		  return;
		}


		// Make sure the user is authorized
		if ( ! MM_AuthUtils::is_authorized() ) {  
		  return;
		}

		$site_email = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_EMAIL );
		$site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );

		do_action('mm_membermouse_com_pre_disconnect', $site_uuid, $site_email);

		// Create token payload
		$payload = array(
		  'email' => $site_email,
		  'site_uuid' => $site_uuid
		);

		// Create JWT
		$jwt = MM_AuthUtils::generate_jwt( $payload );

		// DELETE request to obtain token
		$response = wp_remote_request( MM_AUTH_SERVICE_URL . "/api/disconnect/membermouse", array(
		  'method' => 'DELETE',
		  'sslverify' => false,
		  'headers' => MM_AuthUtils::jwt_header($jwt, MM_AUTH_SERVICE_DOMAIN),
		) );

		$body = json_decode( wp_remote_retrieve_body( $response ), true );

		if ( isset( $body['disconnected'] ) && true === $body['disconnected'] ) {
			delete_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );
			delete_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_EMAIL );
			delete_option( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SECRET );
		}

		wp_redirect( remove_query_arg( array( 'mm-disconnect', 'nonce' ) ) );
		exit;
	}

	public static function mm_disconnect_notice() {

	    $account_email = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_EMAIL );
	    $secret = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SECRET );
	    $site_uuid = MM_OptionUtils::getOption( MM_OptionUtils::$OPTION_KEY_AUTH_ACCOUNT_SITE_UUID );

	    $stripe_service = new MM_StripeService(false);
	    $using_stripe = $stripe_service->getActive();
	    $connection_status = MM_StripeConnect::stripe_connect_status();

	    if ( ! $account_email && ! $secret && ! $site_uuid && $using_stripe && 'connected' === $connection_status ) {
	      ?>

	      <div class="notice notice-error is-dismissible">
	        <p><?php esc_html_e( 'Your MemberMouse.com account and Stripe gateway have been disconnected. Please re-connect the Stripe gateway by clicking the button below in order to start taking payments again.', 'membermouse' ); ?></p>
	        <p><a href="<?php echo MM_ModuleUtils::getUrl(MM_MODULE_PAYMENT_SETTINGS); ?>" class="button button-primary"><?php esc_html_e( 'Re-connect Stripe', 'membermouse' ); ?></a></p>
	      </div>

	      <?php
	    }
	}
}