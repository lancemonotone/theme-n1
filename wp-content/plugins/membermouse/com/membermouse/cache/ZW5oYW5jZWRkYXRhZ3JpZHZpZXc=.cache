/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_EnhancedDatagridView encapsulates the functionality required to upgrade MM datagrids to support bulk operations
 * 
 */

trait MM_EnhancedDatagridView
{
    public static $MM_JSACTION_BULK_ARCHIVE = "bulkArchive";
    public static $MM_JSACTION_BULK_UNARCHIVE = "bulkUnarchive";
    public static $MM_JSACTION_BULK_DELETE  = "bulkDelete";
    
    public $entityTable;
    public $entityIdField = "id";
    public $dependentEntities = [];
    
    public $defaultPageSize = 20;
    public $defaultPageNum = 1;
    
    public function enhancedPerformAction($post)
    {
        switch($post[self::$MM_JSACTION])
        {
            case self::$MM_JSACTION_BULK_ARCHIVE:
                return $this->bulkArchive($post);
                
            case self::$MM_JSACTION_BULK_UNARCHIVE:
                return $this->bulkArchive($post,true);
                
            case self::$MM_JSACTION_BULK_DELETE:
                return $this->bulkDelete($post);
                
            default:
                return $this->performAction($post);
        }
    }
    
    
    public function setupEnhancedDatagrid()
    {
        //load the js grid component
        wp_enqueue_script("membermouse-dexie", plugins_url(MM_PLUGIN_NAME."/lib/dexie/dexie.min.js"), array(), MemberMouse::getPluginVersion(), true);
        wp_enqueue_script("membermouse-enhancedatagrid", plugins_url(MM_PLUGIN_NAME."/resources/js/admin/mm-enhanceddatagrid.js"), array("membermouse-dexie"), MemberMouse::getPluginVersion(), true);
        wp_enqueue_style('mm-enhanced-datagrid', plugins_url(MM_PLUGIN_NAME.'/resources/css/common/mm-enhanced-datagrid.css'), array());	
    }
    
    
    public function getDefaultGridTranslations()
    {
        return [];
    }
    
    
    public function getDefaultGridImages($itemName=null)
    {
        $defaultGridImages = [  'cog'                    => MM_Utils::getIcon('cogs', 'grey', '1.4em', '2px'),
                                'prevPage'               => MM_Utils::getIcon('chevron-circle-left', 'light-blue', '1.4em', '1px'),
                                'nextPage'               => MM_Utils::getIcon('chevron-circle-right', 'light-blue', '1.4em', '1px'),
                                'cacheIcon'              => MM_Utils::getIcon('bolt', 'yellow', '1.8em', '3px'),
                                'cacheIcon-disabled'     => MM_Utils::getIcon('bolt', 'grey', '1.8em', '3px'),
                                'sort-desc'              => MM_Utils::getIcon('caret-down', 'grey', '1.3em', '2px', '', 'margin-left:4px;'),
                                'sort-asc'               => MM_Utils::getIcon('caret-up', 'grey', '1.3em', '2px', '', 'margin-left:4px;'),
                                'clear'                  => "<img style='margin-right:5px;' src='".MM_Utils::getImageUrl("clear")."' />",
                                'red-light'              => MM_Utils::getStatusImage(0),
                                'green-light'            => MM_Utils::getStatusImage(1)
                             ];
        if ($itemName != null)
        {
            $itemName = strtolower(trim($itemName));
            $uc = ucfirst($itemName);
            $defaultGridImages += [ 'edit'             => MM_Utils::getEditIcon(_mmt("Edit {$uc}")),
                                    'delete'           => MM_Utils::getDeleteIcon(_mmt("Delete {$uc}"), 'margin-left:5px;'),
                                    'cant-delete'      => MM_Utils::getDeleteIcon(_mmt("This {$itemName} is currently being used and cannot be deleted"), 'margin-left:5px;','',true),
                                    'hide'             => MM_Utils::getHideIcon(_mmt("Hide this {$itemName} from the list view"), 'margin-left:5px;'),
                                    'unhide'           => MM_Utils::getHideIcon(_mmt("Show this {$itemName} in the list view"),'margin-left:5px;', "", true),
                                    'duplicate'        => MM_Utils::getDuplicateIcon(_mmt("Duplicate {$uc}"), 'margin-left:5px;')
                                  ];
        }
        return $defaultGridImages;
    }
    
    /**
     * Search retrieves the data to be displayed from the database, formats and then returns it
     *
     * @return string JSON-encoded array of pages, keyed by page number, with each page containing $pageSize rows
     */
    public function search($post=null)
    {
        $queryMeta = $post['queryMeta'] ?? null;
        if ($queryMeta !== null)
        {
            $queryMeta = json_decode($queryMeta);
        }
        
        if ($queryMeta == null)
        {
            $queryMeta = (object)["query"=>(object)["conditions"=>[]]]; //shorthand to create the nested object structure used by js
        }
        
        if (!isset($queryMeta->sortCol) && isset($this->defaultSortCol))
        {
            $queryMeta->sortCol = $this->defaultSortCol; //this should match js grid definition
        }
        
        $queryMeta = $this->preprocessSearch($queryMeta) ?? $queryMeta;
        $dataObj = $this->getRawData($queryMeta);
        return $dataObj;
    }
    
    /**
     * This method processes the meta-information from a $queryMeta object and creates an object containing a SQL where clause and other information necessary to
     * return the correct results
     *
     * @param array $queryMeta An array of objects containing meta-information on filtering and sorting criteria
     * @param string $prefix The table alias to add to un-prefixed fields in order to generate valid SQL
     *                     (ie, if Products table is aliased to "p", then $prefix needs to be set to "p", and field "name"
     *                     becomes "p.name"
     * @return stdClass An object containing attributes "pageSize", "pageNum", "prefetchSize", and "whereString", as extracted from the $criteria array
     */
    protected function processQueryMeta($queryMeta,$prefix="")
    {
        $where = [];
        $order = "";
        //setting pageNum or pageSize to -1 means no limit
        
        if (!property_exists($queryMeta, "query") || !property_exists($queryMeta->query, "conditions") || !is_array($queryMeta->query->conditions))
        {
            //TODO: Log that incorrect input was supplied
            $queryMeta = (object)["query"=>(object)["conditions"=>[]]];
        }
        
        $queryMeta->pageNum = $queryMeta->pageNum ?? $this->defaultPageNum;
        $queryMeta->pageSize = $queryMeta->pageSize ?? $this->defaultPageSize;
        $queryMeta->prefetchSize = $queryMeta->prefetchSize ?? $this->getDefaultPrefetchSize($queryMeta->pageSize);
        $queryMeta->limitString = "";
        $queryMeta->orderString = "";
        
        if (!empty($prefix))
        {
            $addPrefix = function($tmpCon) use ($prefix)
            {
                if (is_object($tmpCon) && property_exists($tmpCon,"name") && (strpos($tmpCon->name,".") === false))
                {
                    $tmpCon->name = "{$prefix}.{$tmpCon->name}";
                }
            };
            
            foreach ($queryMeta->query->conditions as $aCondition)
            {
                if (is_array($aCondition))
                {
                    foreach ($aCondition as $v)
                    {
                        $addPrefix($v);
                    }
                }
                else
                {
                    $addPrefix($aCondition);
                }
            }
        }
        
        $queryTransform = function($tmpCon)
        {
            global $wpdb;
            
            if (isset($tmpCon->name) && isset($tmpCon->value) && isset($tmpCon->rel)) //isset is considerably faster than property_exists
            {
                $rel = strtolower($tmpCon->rel);
                switch ($rel)
                {
                    case "neq":
                        return $wpdb->prepare("(%1s != %s)",$tmpCon->name,$tmpCon->value);
                        break;
                    case "gt":
                        return $wpdb->prepare("(%1s > %s)",$tmpCon->name,$tmpCon->value);
                        break;
                    case "gteq":
                        return $wpdb->prepare("(%1s >= %s)",$tmpCon->name,$tmpCon->value);
                        break;
                    case "lt":
                        return $wpdb->prepare("(%1s < %s)",$tmpCon->name,$tmpCon->value);
                        break;
                    case "lteq":
                        return $wpdb->prepare("(%1s <= %s)",$tmpCon->name,$tmpCon->value);
                        break;
                    case "like":
                        $likeVal = "%".$wpdb->esc_like($tmpCon->value)."%";
                        return $wpdb->prepare("(%1s LIKE %s)",$tmpCon->name,$likeVal);
                        break;
                    case "in":
                        //valid values for 'IN' are a single item or a comma-separated list. Non-numeric items need to be quoted
                        $inArray = is_array($tmpCon->value) ? $tmpCon->value : explode(",",$tmpCon->value);
                        $nonNumericPresent = false;
                        foreach ($inArray as $inTerm) //infer column type based on whether values are all numeric
                        {
                            if (!is_numeric($inTerm))
                            {
                                $nonNumericPresent = true;
                                break;
                            }
                        }
                        if ($nonNumericPresent) //column is not numeric, make sure the terms are quoted
                        {
                            foreach ($inArray as &$inTerm)
                            {
                                if (strpos($inTerm,"'") !== 0)
                                {
                                    $inTerm = $wpdb->prepare("%s",$inTerm);
                                }
                            }
                        }
                        $inString = implode(",",$inArray);
                        return $wpdb->prepare("(%1s IN ({$inString}))",$tmpCon->name);
                        break;
                    default:
                        //default relation is "="
                        return $wpdb->prepare("(%1s = %s)",$tmpCon->name,$tmpCon->value);
                        break;
                }
            }
        };
        
        foreach ($queryMeta->query->conditions as $aCondition)
        {
            if (is_array($aCondition))
            {
                //if a condition is an array, this implies an OR relationship between the array members
                $translatedConditions = array_map($queryTransform,$aCondition);
                if ($translatedConditions)
                {
                    $where[] = implode(" OR ",$translatedConditions);
                }
            }
            else
            {
                $where[] = $queryTransform($aCondition);
            }
        }
        
        if ($queryMeta->sortCol ?? false)
        {
            $orderStringComponents = [];
            $multiple = explode(",",$queryMeta->sortCol);
            foreach ($multiple as $sortCondition)
            {
                $sortComponents = explode(" ",$sortCondition);
                if ((count($sortComponents) == 2) && (in_array(strtoupper($sortComponents[1]),['ASC','DESC'])))
                {
                    $orderStringComponents[] = esc_sql($sortCondition);
                }
            }
            $order = implode(",",$orderStringComponents);
        }
        
        $whereString = !empty($where) ? ("WHERE ".implode(" and ",$where)) : "";
        if (!empty($order))
        {
            $queryMeta->orderString = " ORDER BY {$order}";
        }
        
        
        if (($queryMeta->pageNum > 0) && ($queryMeta->pageSize > 0))
        {
            $limitOffset = (($queryMeta->pageNum-1) * $queryMeta->pageSize);
            $numRecords = $queryMeta->pageSize * (1 + $queryMeta->prefetchSize);
            $queryMeta->limitString = " LIMIT {$limitOffset},{$numRecords}";
        }
        
        $queryMeta->whereString = $whereString;
        return $queryMeta;
    }
    
    
    public function bulkArchive($post,$unarchive=false)
    {
        global $wpdb;
        
        $idString = $this->getIDString($post);
        $numItems = isset($post['selected_ids'])?count($post['selected_ids']):0;
        $verbed = $unarchive ? "unarchived" : "archived";
        $verbing = $unarchive ? "unarchiving" : "archiving";
        if ($idString !== false)
        {
            $archiveFlag = $unarchive ? 0 : 1;
            $sql = $wpdb->prepare("UPDATE `{$this->entityTable}` set is_archived = %s WHERE {$this->entityIdField} IN (%1s)",$archiveFlag,$idString);
            $res = $wpdb->query($sql);
            if ($res !== false)
            {
                $numItems = is_numeric($res) ? res : $numItems;
                return new MM_Response(_mmt("Successfully {$verbed} {$numItems} items"));
            }
            else 
            {
                $verbing = $unarchive ? "unarchiving" : "archiving";
                MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Error bulk {$verbing} items in {$this->entityTable}:".$wpdb->last_error);
                return new MM_Response(_mmt("An error was encountered. Please try again"),MM_Response::$ERROR);   
            }
        }
        MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Error bulk {$verbing} items in {$this->entityTable}; Request was malformed or no items were selected");
        return new MM_Response(_mmt("An error occurred while {$verbing} the selected items. Please try again"));
        
    }
    
    
    public function bulkDelete($post)
    {
        global $wpdb;
        
        $idString = $this->getIDString($post);
        $numItems = isset($post['selected_ids'])?count($post['selected_ids']):0;
        if ($idString !== false)
        {
            $sql = $wpdb->prepare("DELETE FROM `{$this->entityTable}` WHERE {$this->entityIdField} IN (%1s)",$idString);
            $res = $wpdb->query($sql);
            if ($res !== false)
            {
                $numItems = is_numeric($res) ? $res : $numItems;
                if (is_array($this->dependentEntities) && (count($this->dependentEntities) > 0))
                {
                    //$dependentEntities contains a list of tables which contain entities that need to be deleted as well. 
                    //For instance, deleting an order would necessitate the deleting of its order items
                    //The key is the table name, and the value is the column name of the column containing the foreign key we will use to delete
                    foreach ($this->dependentEntities as $tableName->$foreignKeyColumn)
                    {
                        $sql = $wpdb->prepare("DELETE FROM `{$tableName}` WHERE {$foreignKeyColumn} IN (%1s)",$idString);
                        $res = $wpdb->query($sql);
                    }
                }
                return new MM_Response(_mmt("Successfully deleted {$numItems} items"));
            }
            else
            {
                MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Error bulk deleting items in {$this->entityTable}:".$wpdb->last_error);
                return new MM_Response(_mmt("An error was encountered. Please try again"),MM_Response::$ERROR);
            }
        }
        MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Error bulk deleting items in {$this->entityTable}; Request was malformed or no items were selected");
        return new MM_Response(_mmt("An error occurred while deleting the selected items. Please try again"));
    }
    
    
    /**
     * The javascript portion of the EnhancedDatagrid will sends ids in an array named 'selected_ids'. 
     * This method translates this array into a comma-separated string suitable for use in a SQL in-clause
     * 
     * @param array $post Represents the $_POST array
     * @return string|boolean A comma-separated string of ids on success, boolean false on failure
     */
    protected function getIDString($post)
    {
        if (isset($post['selected_ids']))
        {
            $idArray = $post['selected_ids'];
            $idString = implode(",",$idArray);
            return $idString;
        }
        else 
        {
            return false;
        }
    }
    
    
    protected function getDefaultPrefetchSize($pageSize)
    {
        if ($pageSize <= 100)
        {
            return 5;
        }
        else if ($pageSize <= 500)
        {
            return 3;
        }
        else
        {
            return 2;
        }
    }
    
}