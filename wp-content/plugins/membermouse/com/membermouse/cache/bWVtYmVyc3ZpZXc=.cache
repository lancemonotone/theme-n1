/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MembersView extends MM_RBACGeneralEmployeeView
{	
	public static $TIME_PER_ORDER = 1.5;
	
	public static $MM_JSACTION_SEARCH = "search";
	public static $MM_JSACTION_RESET_FORM = "resetForm";
	public static $MM_JSACTION_STORE_SEARCH_STATE = "storeSearchState";
	public static $MM_JSACTION_CREATE_MEMBER = "createMember";
	public static $MM_JSACTION_CSV_BATCH_EXPORT = "csvBatchExport";
	
	use MM_EnhancedDatagridView;
	
	protected $defaultSortCol = "u.user_registered DESC";

	public function __construct()
	{
		parent::__construct();
	}
	
 	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_RESET_FORM:
					return $this->generateSearchForm($post);	
					
				case self::$MM_JSACTION_SEARCH:
				    return $this->search($post);
					
				case self::$MM_JSACTION_STORE_SEARCH_STATE:
					return $this->storeSearchState($post);	
					
				case self::$MM_JSACTION_CREATE_MEMBER:
					return $this->createMember($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeMember($post); 
					
				case self::$MM_JSACTION_CSV_BATCH_EXPORT:
				    return $this->csvBatchExport($post);
				    
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}

	private function hasNonEmptyPayloadKey($payload, $key)
	{
		if($payload != null && $payload != false)
		{
			if(is_array($payload) && isset($payload[$key]))
			{
				if(!empty($payload[$key]))
				{
					return true;
				}
			}
		}
		return false;
	}
	
	public function csvBatchExport($post)
	{
	    global $wpdb; 
	    
	    $response = new stdClass();
	    
	    $bundlesJoinSql = "";
	    $bundlesColumnSql = "";
	    $bundlesWhereSql = "";
	    $bundleIds = "";
	    
	    $customFieldJoinSql = "";
	    $customFieldColumnSql = "";
	    $customFieldWhereSql = "";
	    
	    $customFieldJoinSql2 = "";
	    $customFieldColumnSql2 = "";
	    $customFieldWhereSql2 = "";
		
		$payload = (isset($post["payload"]))?$post["payload"]:false;
 
	    if($this->hasNonEmptyPayloadKey($payload,"mm_bundles"))
	    {
	        $bundleIds = join(',' , $payload["mm_bundles"]);
	        $bundlesJoinSql = ",  ".MM_TABLE_APPLIED_BUNDLES." bundles ";
	        $bundlesColumnSql = "";
	        $bundlesWhereSql = " ((bundles.access_type_id=u.ID) ";
	        $bundlesWhereSql .= " AND (bundles.bundle_id IN ( {$bundleIds} )) ";
	        $bundlesWhereSql .= " AND (bundles.access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."') ";
	        $bundlesWhereSql .= " AND (bundles.status = '".MM_Status::$ACTIVE."' OR bundles.status = '".MM_Status::$PENDING_CANCELLATION."')) ";
	    }
	    
	    if($this->hasNonEmptyPayloadKey($payload,"mm_member_custom_field"))
	    { 
	        $customFieldJoinSql = ",  ".MM_TABLE_CUSTOM_FIELD_DATA." cfd ";
	        $customFieldColumnSql = ", cfd.value as custom_field_value ";
	        $customFieldWhereSql = " ((cfd.user_id=u.id) AND (cfd.custom_field_id='{$payload["mm_member_custom_field"]}') AND (cfd.value LIKE '%".$payload["mm_member_custom_field_value"]."%')) ";
	    }
	    
	    if($this->hasNonEmptyPayloadKey($payload,"mm_member_custom_field2"))
	    { 
	        $customFieldJoinSql2 = ",  ".MM_TABLE_CUSTOM_FIELD_DATA." cfd2 ";
	        $customFieldColumnSql2 = ", cfd2.value as custom_field_value2 ";
	        $customFieldWhereSql2 = " ((cfd2.user_id=u.id) AND (cfd2.custom_field_id='{$payload["mm_member_custom_field2"]}') AND (cfd2.value LIKE '%".$payload["mm_member_custom_field2_value"]."%')) ";
	    }
	    
	    $sqlFrom = " FROM ".$wpdb->users." u, ".MM_TABLE_USER_DATA." mmu ".$customFieldJoinSql.$customFieldJoinSql2.$bundlesJoinSql;
	    
	    $filters = "";
	    $newFilter = "";
	    $mmUserDataColumns = array("membership_level_id", "status", "last_name", "phone", "last_login_date", "status_updated");
	    $searchByDate = "user_registered";
	    
	    if($this->hasNonEmptyPayloadKey($payload,"mm_member_search_by_date"))
	    {  
	        $searchByDate = $payload["mm_member_search_by_date"];
	    } 
	    
	    $tableName = (in_array($searchByDate, $mmUserDataColumns)) ? "mmu" : "u";
	    if($this->hasNonEmptyPayloadKey($payload,"mm_from_date"))
	    {   
	        $fromDate = MM_Utils::dateToUTC($payload['mm_from_date'], "Y-m-d H:i", "00:00:00");
	        $newFilter = "{$tableName}.{$searchByDate} >= '".$fromDate."'";
	        $filters = $this->addFilter($filters, $newFilter);
	    }
	    
	    if($this->hasNonEmptyPayloadKey($payload,"mm_to_date"))
	    {    
	        $toDate = MM_Utils::dateToUTC($payload['mm_to_date'], "Y-m-d H:i", "23:59:59");
	        $newFilter = "{$tableName}.{$searchByDate} <= '".$toDate."'";
	        $filters = $this->addFilter($filters, $newFilter);
	    }
	    
	    // Member ID
	    if($this->hasNonEmptyPayloadKey($payload,"mm_member_id"))
	    { 
	        $filters = $this->addFilter($filters, "u.id = '".$payload["mm_member_id"]."'");
	    }
	    
	    // First Name
	    if($this->hasNonEmptyPayloadKey($payload,"mm_first_name"))
	    {  
	        $filters = $this->addFilter($filters, "mmu.first_name LIKE '%".$payload["mm_first_name"]."%'");
	    }
	    
	    // Last Name
	    if($this->hasNonEmptyPayloadKey($payload,"mm_last_name"))
	    {   
	        $filters = $this->addFilter($filters, "mmu.last_name LIKE '%".$payload["mm_last_name"]."%'");
	    }
	    
	    // Email
	    if($this->hasNonEmptyPayloadKey($payload,"mm_email"))
	    {   
	        $filters = $this->addFilter($filters, "u.user_email LIKE '%".$payload["mm_email"]."%'");
	    }
	    
	    global $current_user;
	    $employee = MM_Employee::findByUserId($current_user->ID);
	    
	    // Membership Level IDs
	    $membershipFilterSet = false; 
	    if($this->hasNonEmptyPayloadKey($payload,"mm_memberships"))
	    {    
	        // make sure current employee has access to the requested membership IDs
	        if($employee->isValid())
	        {
	            $filteredList = array();
	            
	            foreach($payload["mm_memberships"] as $id)
	            {
	                if($employee->hasAccess(MM_Employee::$ACCESS_TYPE_MEMBERSHIP, $id))
	                {
	                    $filteredList[] = $id;
	                }
	            }
	            
	            $payload["mm_memberships"] = $filteredList;
	        }
	        
	        if(count($payload["mm_memberships"]) > 0)
	        {
	            $membershipFilterSet = true;
	            $newFilter = "mmu.membership_level_id IN (".join(',' , $payload["mm_memberships"]).")";
	            $filters = $this->addFilter($filters, $newFilter);
	        }
	    }
	    
	    // filter membership IDs to only include those the current employee has access to
	    if(!$membershipFilterSet && $employee->isValid())
	    {
	        $membershipRestrictions = $employee->getAccessRescrictions(MM_Employee::$ACCESS_TYPE_MEMBERSHIP);
	        
	        if(count($membershipRestrictions) > 0)
	        {
	            $newFilter = "mmu.membership_level_id IN (".join(',' , $membershipRestrictions).")";
	            $filters = $this->addFilter($filters, $newFilter);
	        }
	    }
	    
	    // Member Status
	    if($this->hasNonEmptyPayloadKey($payload,"mm_member_status_types"))
	    {     
	        $newFilter = "mmu.status IN (".join(',' , $payload["mm_member_status_types"]).")";
	        
	        if($newFilter != "")
	        {
	            $filters = $this->addFilter($filters, $newFilter);
	        }
	    }
	    
	    // bundles
	    if(!empty($bundlesWhereSql))
	    {
	        $filters = $this->addFilter($filters, $bundlesWhereSql);
	    }
	    
	    // custom fields
	    if(!empty($customFieldWhereSql))
	    {
	        $filters = $this->addFilter($filters, $customFieldWhereSql);
	    }
	    
	    if(!empty($customFieldWhereSql2))
	    {
	        $filters = $this->addFilter($filters, $customFieldWhereSql2);
	    }
	    
	    $sqlWhere = " WHERE u.ID = mmu.wp_user_id";
	    
	    if($filters != "")
	    {
	        $sqlWhere .= " AND ".$filters;
	    } 
	    
	    $sqlResultCount = "select count(distinct u.ID) as total ";
	    $sqlResultCount .= $sqlFrom;
	    $sqlResultCount .= $sqlWhere;
	    
	    $countRow = $wpdb->get_row($sqlResultCount);
	     
	    if(isset($post["command"]) && $post["command"] == "initBatchReceive")
	    { 
	        $response->batchID = MM_Utils::createRandomString(64); 
	        $response->totalRecords = $countRow->total;  
	    } 
	    else 
	    {	        
	        $response->batchID =  (isset($post["batchID"]))?$post["batchID"]:false;  
	    }
		$chunkNumber = (isset($post["payload"]["chunkNumber"]) && is_numeric($post["payload"]["chunkNumber"]))? intval($post["payload"]["chunkNumber"]):0;

	    if($countRow->total > 0)
	    {
	        $sql = "select u.id, '{$countRow->total}' as total, u.user_registered, u.user_email, ";
	        $sql .= "mmu.membership_level_id, mmu.status, mmu.first_name, mmu.last_name, mmu.phone, mmu.last_login_date, mmu.status_updated ";
	         
            $sql .= ", mmu.billing_address1, mmu.billing_address2, mmu.billing_city, mmu.billing_state, mmu.billing_postal_code, mmu.billing_country ";
            $sql .= ", mmu.shipping_address1, mmu.shipping_address2, mmu.shipping_city, mmu.shipping_state, mmu.shipping_postal_code, mmu.shipping_country, mmu.expiration_date ";
         
	        $sql .= " ".$customFieldColumnSql;
	        $sql .= " ".$customFieldColumnSql2;
	    }
	    else
	    {
	        return array();
	    }
	    
	    $sql .= $sqlFrom;
	    $sql .= $sqlWhere;
	    
	    $response->chunkNumber = $chunkNumber; //MM_Session::value("mm-export-batch-num-".$response->batchID);
	    
	    $chunkSize = (intval($post["chunkSize"])>0)?intval($post["chunkSize"]):50;
	    $offset = $chunkNumber*$chunkSize;
	    $rowCount = $chunkSize;
	    $sql .= " limit {$offset},{$rowCount} "; 
	    
	    $batch_size = 50; //larger batch should be more efficient for full result sets
		  
	    $rows = $wpdb->get_results($sql, OBJECT_K); 
	    
	    // Execute additional sub-queries on the result set in batches
	    $i=0;
	    $id_batch = array();
	    foreach ($rows as $id=>$member)
	    {
	        $id_batch[] = $id;
	        if ((++$i) == $batch_size)
	        {
	            $userIds = implode(",",$id_batch);
	            $sql = $this->buildAppliedBundlesSQL($userIds, $bundleIds);
	            $batchRows = $wpdb->get_results($sql, ARRAY_A);
	            foreach ($batchRows as $batchRowNum=>$batchInfo)
	            {
	                $memberId = $batchInfo['access_type_id'];
	                foreach ($batchInfo as $propName=>$propValue)
	                {
	                    $rows[$memberId]->$propName = $propValue;
	                }
	            }
	            $id_batch = array();
	            $i = 0;
	        }
	    }
	    
	    if (!empty($id_batch))
	    {
	        $userIds = implode(",",$id_batch);
	        $sql = $this->buildAppliedBundlesSQL($userIds, $bundleIds);
	        $batchRows = $wpdb->get_results($sql, ARRAY_A);
	        foreach ($batchRows as $batchRowNum=>$batchInfo)
	        {
	            $memberId = $batchInfo['access_type_id'];
	            foreach ($batchInfo as $propName=>$propValue)
	            {
	                $rows[$memberId]->$propName = $propValue;
	            }
	        }
	    }
	    
	    //TODO: edit starts here
	    if ($response->chunkNumber == 0)
	    {
	        $csvHeaders = array
    	    (
    	        'ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Membership Level', 'Bundles', 'Bundle Expirations', 'Membership Expiration', 'Registered', 'Status Changed', 'Status',
    	        'Billing Address', 'Billing Address Line 2', 'Billing City', 'Billing State', 'Billing Zip', 'Billing Country',
    	        'Shipping Address', 'Shipping Address Line 2', 'Shipping City', 'Shipping State', 'Shipping Zip', 'Shipping Country'
    	    );
    	    
    	    $fields = MM_CustomField::getCustomFieldsList();
    	    foreach($fields as $id=>$val)
    	    {
    	        $customField = new MM_CustomField($id);
    	        if($customField->isValid())
    	        {
    	            $csvHeaders[] = $customField->getDisplayName();
    	        }
    	    }
    	    
    	    $csvRows = array($csvHeaders);
	    }
	    else 
	    {
	        $csvRows = array();
	    }
	    
	    //TODO: edit2 starts here
	    $bundleNames = array();
	    foreach($rows as $key=>$item)
	    {
	        $user = new MM_User();
	        $user->setId($item->id);
	        $user->setFirstName($item->first_name);
	        $user->setLastName($item->last_name);
	        $user->setEmail($item->user_email);
	        $user->setPhone($item->phone);
	        $user->setRegistrationDate($item->user_registered);
	        $user->setLastLoginDate($item->last_login_date);
	        $user->setMembershipId($item->membership_level_id);
	        $user->setStatus($item->status);
	        
            $user->setBillingAddress($item->billing_address1);
            $user->setBillingAddress2($item->billing_address2);
            $user->setBillingCity($item->billing_city);
            $user->setBillingState($item->billing_state);
            $user->setBillingZipCode($item->billing_postal_code);
            $user->setBillingCountry($item->billing_country);
            $user->setShippingAddress($item->shipping_address1);
            $user->setShippingAddress2($item->shipping_address2);
            $user->setShippingCity($item->shipping_city);
            $user->setShippingState($item->shipping_state);
            $user->setShippingZipCode($item->shipping_postal_code);
            $user->setShippingCountry($item->shipping_country);
	        
	        $name = $user->getFullName(true);
	        
	        if(empty($name))
	        {
	            $name = MM_NO_DATA;
	        }
	        
	        $phone = $user->getPhone();
	        
	        if(empty($phone))
	        {
	            $phone = MM_NO_DATA;
	        }
	        
	        // status
	        $status = MM_Status::getImage($user->getStatus());
	        
	        // actions
	        $editActionUrl = "href='".MM_ModuleUtils::getUrl(MM_MODULE_MANAGE_MEMBERS, MM_MODULE_MEMBER_DETAILS_GENERAL)."&user_id=".$user->getId()."'";
	        $deleteActionUrl = 'onclick="mmjs.remove(\''.$user->getId().'\', \''.$user->getEmail().'\')"';
	        $actions = MM_Utils::getEditIcon("Edit Member", '', $editActionUrl);
	        
	        if(($user->getStatus() == MM_Status::$ERROR) || ($user->getStatus() == MM_Status::$PENDING_ACTIVATION) || ($user->getStatus() == MM_Status::$PENDING_CANCELLATION))
	        {
	            $actions .= MM_Utils::getDeleteIcon("Delete Member", 'margin-left:5px;', $deleteActionUrl);
	        }
	        else if(!$user->hasActiveSubscriptions())
	        {
	            $actions .= MM_Utils::getDeleteIcon("Delete Member", 'margin-left:5px;', $deleteActionUrl);
	        }
	        else
	        {
	            $actions .= MM_Utils::getDeleteIcon("This member has an active paid membership or bundle which must be canceled before they can be deleted", 'margin-left:5px;', '', true);
	        }
	        
	        // membership level
	        $membershipStr = $user->getMembershipName();
	        
	        if(($user->getStatus() == MM_Status::$PENDING_ACTIVATION) || ($user->getStatus() == MM_Status::$ERROR))
	        {
	            $membershipStr = "<em>".$user->getMembershipName()."</em>";
	        }
	        
	        // bundles
	        if(!empty($item->bundles))
	        {
	            $bundleExpirations = array();
	            $bundles = explode(",", $item->bundles);
	            
	            // iterate over array of bundle IDs, lookup bundle ID name
	            // and replace the ID with the bundle name
	            for($i = 0; $i < count($bundles); $i++)
	            {
	                $bundleId = $bundles[$i];
	                if(isset($bundleNames[$bundleId]))
	                {
	                    $memberAppliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundleId);
	                    $date = $memberAppliedBundle->getExpirationDate();
	                    if(!is_null($date) && !empty($date))
	                    {
	                        $bundleExpirations[$bundleId] = $date;
	                    }
	                }
	                else
	                {
	                    $bundle = new MM_Bundle($bundleId);
	                    
	                    if($bundle->isValid())
	                    {
	                        // cache bundle name for future use while processing remaining rows
	                        $bundleNames[$bundleId] = $bundle->getName();
	                        $memberAppliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundle->getId());
	                        
	                        $date = $memberAppliedBundle->getExpirationDate();
	                        if(!is_null($date) && !empty($date))
	                        {
	                            $bundleExpirations[$bundleId] = $date;
	                        }
	                    }
	                    else
	                    {
	                        $bundleNames[$bundleId] = MM_NO_DATA;
	                    }
	                }
	                
	                $bundles[$i] = $bundleNames[$bundleId];
	            }
	            
	            $bundles = implode(", ", $bundles);
	            $bundleExpirations = implode(",", $bundleExpirations);
	        }
	        else
	        {
	            $bundleExpirations = MM_NO_DATA;
	            $bundles = MM_NO_DATA;
	        }
	        
	        // last login date
	        $userEngagement = MM_NO_DATA;
	        $lastLoginDate = $user->getLastLoginDate();
	        if(!empty($lastLoginDate))
	        {
	            $userEngagement = MM_Utils::getIcon('calendar-o', 'purple', '1.2em', '2px', "Last logged in {$user->getLastLoginDate(true)}", "margin-right:8px;");
	        }
	        else
	        {
	            $userEngagement = MM_Utils::getIcon('calendar-o', 'purple', '1.2em', '2px', "Member hasn't logged in yet", "margin-right:8px;");
	        }
	        
	        $userEngagement .= MM_Utils::getIcon('key', 'yellow', '1.2em', '2px', "Logged in {$user->getLoginCount()} times");
	        $userEngagement .= " <span style='font-family:courier; font-size:12px; position:relative; top:1px; margin-right:8px;'>{$user->getLoginCount()}</span>";
	        $userEngagement .= MM_Utils::getIcon('file-o', 'turq', '1.2em', '2px', "Accessed {$user->getPageAccessCount()} pages");
	        $userEngagement .= " <span style='font-family:courier; font-size:12px; position:relative; top:1px;'>{$user->getPageAccessCount()}</span>";
	        
	        // build datagrid row
	        $row = array();
	        $row[] = array('content' => "<span title='ID [".$user->getId()."]' style='line-height:20px;'>".$name."</span>");
	        $row[] = array('content' => "<a href='".MM_ModuleUtils::getUrl(MM_MODULE_MANAGE_MEMBERS, MM_MODULE_MEMBER_DETAILS_GENERAL)."&user_id={$user->getId()}'>".MM_Utils::abbrevString($user->getEmail())."</a>");
	        $row[] = array('content' => $phone);
	        $row[] = array('content' => $membershipStr);
	        $row[] = array('content' => MM_Utils::abbrevString($bundles, 30));
	        
	        $useCustomField = (isset($post["mm_member_custom_field"])) ? true : false;
	        $useCustomField2 = (isset($post["mm_member_custom_field2"])) ? true : false;
	        
	        if($useCustomField)
	        {
	            if($item->custom_field_value == MM_CustomField::$CHECKBOX_ON)
	            {
	                $customFieldContent = MM_Utils::getCheckIcon();
	            }
	            else if($item->custom_field_value == MM_CustomField::$CHECKBOX_OFF)
	            {
	                $customFieldContent = MM_Utils::getCrossIcon();
	            }
	            else
	            {
	                $customFieldContent = $item->custom_field_value;
	            }
	            
	            $row[] = array('content' => $customFieldContent);
	        }
	        
	        if($useCustomField2)
	        {
	            if($item->custom_field_value2 == MM_CustomField::$CHECKBOX_ON)
	            {
	                $customFieldContent = MM_Utils::getCheckIcon();
	            }
	            else if($item->custom_field_value2 == MM_CustomField::$CHECKBOX_OFF)
	            {
	                $customFieldContent = MM_Utils::getCrossIcon();
	            }
	            else
	            {
	                $customFieldContent = $item->custom_field_value2;
	            }
	            
	            $row[] = array('content' => $customFieldContent);
	        }
	        
	        switch($searchByDate)
	        {
	            case "user_registered":
	                $row[] = array('content' => $user->getRegistrationDate(true));
	                break;
	                
	            case "status_updated":
	                $row[] = array('content' => MM_Utils::dateToLocal($item->status_updated));
	                break;
	        }
	        
	        $row[] = array('content' => $userEngagement);
	        $row[] = array('content' => $status);
	        $row[] = array('content' => $actions);
	        
	        $datagridRows[] = $row;
	        
	        // build CSV row
	        $membershipRegistrationDate= "";
            $membershipLevel = $user->getMembershipLevel();
            if($membershipLevel instanceof MM_MembershipLevel)
            {
                if($membershipLevel->doesExpire())
                {
                    $date = $user->getExpirationDate(true);
                    if(isset($item->expiration_date) &&
                        !is_null($item->expiration_date) &&
                        !empty($item->expiration_date))
                    {
                        $membershipRegistrationDate = $item->expiration_date;
                    }
                    else
                    {
                        $membershipRegistrationDate = $membershipLevel->getExpirationDate($user->getRegistrationDate());
                    }
                }
                else
                {
                    $membershipRegistrationDate = "N/A";
                }
            }
            
            $csvRow = array();
            
            $csvRow[] = $user->getId();
            $csvRow[] = $user->getFirstName();
            $csvRow[] = $user->getLastName();
            $csvRow[] = $user->getEmail();
            $csvRow[] = $user->getPhone();
            $csvRow[] = $user->getMembershipName();
            $csvRow[] = ($bundles == MM_NO_DATA) ? "" : $bundles;
            $csvRow[] = ($bundles == MM_NO_DATA) ? "" : $bundleExpirations;
            $csvRow[] = $membershipRegistrationDate;
            $csvRow[] = $user->getRegistrationDate(true);
            $csvRow[] = MM_Utils::dateToLocal($item->status_updated);
            $csvRow[] = $user->getStatusName();
            $csvRow[] = $user->getBillingAddress();
            $csvRow[] = $user->getBillingAddress2();
            $csvRow[] = $user->getBillingCity();
            $csvRow[] = $user->getBillingState();
            $csvRow[] = $user->getBillingZipCode();
            $csvRow[] = $user->getBillingCountryName();
            $csvRow[] = $user->getShippingAddress();
            $csvRow[] = $user->getShippingAddress2();
            $csvRow[] = $user->getShippingCity();
            $csvRow[] = $user->getShippingState();
            $csvRow[] = $user->getShippingZipCode();
            $csvRow[] = $user->getShippingCountryName();
            
            $fields = MM_CustomField::getCustomFieldsList();
            foreach($fields as $id=>$val)
            {
                $customField = new MM_CustomField($id);
                if($customField->isValid())
                {
                    $csvRow[] = stripslashes($user->getCustomDataByFieldId($customField->getId())->getValue());
                }
            }
            
            $csvRows[] = $csvRow;
	    }
	    
	    // store CSV in session
	    $fh = fopen('php://temp', 'rw'); # don't create a file, attempt
	    # to use memory instead
	    
	    # write out the headers
	    //fputcsv($fh, array_keys(current($data)));
	    
	    # write out the data
	    foreach ( $csvRows as $row ) {
	        fputcsv($fh, $row);
	    }
	    rewind($fh);
	    $csv = stream_get_contents($fh);
	    fclose($fh);
        
        //TODO:edit3 
	    
	    $response->payload = $csv;
	    
	    return $response;
	}
	
 	public function oldSearch($post, MM_DataGrid $dg, $doGenerateCsv=false)
	{
		global $wpdb;
		
		$bundlesJoinSql = "";
		$bundlesColumnSql = "";
		$bundlesWhereSql = "";
		$bundleIds = "";
		
		$customFieldJoinSql = "";
		$customFieldColumnSql = "";
		$customFieldWhereSql = "";
		
		$customFieldJoinSql2 = "";
		$customFieldColumnSql2 = "";
		$customFieldWhereSql2 = "";
		
		if(!empty($post["mm_bundles"]))
		{
			$bundleIds = join(',' , $post["mm_bundles"]);
			$bundlesJoinSql = ",  ".MM_TABLE_APPLIED_BUNDLES." bundles ";
			$bundlesColumnSql = "";
			$bundlesWhereSql = " ((bundles.access_type_id=u.ID) ";
			$bundlesWhereSql .= " AND (bundles.bundle_id IN ( {$bundleIds} )) ";
			$bundlesWhereSql .= " AND (bundles.access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."') ";
			$bundlesWhereSql .= " AND (bundles.status = '".MM_Status::$ACTIVE."' OR bundles.status = '".MM_Status::$PENDING_CANCELLATION."')) ";
		}
		
		if(!empty($post["mm_member_custom_field"]))
		{
			$customFieldJoinSql = ",  ".MM_TABLE_CUSTOM_FIELD_DATA." cfd ";
			$customFieldColumnSql = ", cfd.value as custom_field_value ";
			$customFieldWhereSql = " ((cfd.user_id=u.id) AND (cfd.custom_field_id='{$post["mm_member_custom_field"]}') AND (cfd.value LIKE '%".$post["mm_member_custom_field_value"]."%')) ";
		}
		
		if(!empty($post["mm_member_custom_field2"]))
		{
			$customFieldJoinSql2 = ",  ".MM_TABLE_CUSTOM_FIELD_DATA." cfd2 ";
			$customFieldColumnSql2 = ", cfd2.value as custom_field_value2 ";
			$customFieldWhereSql2 = " ((cfd2.user_id=u.id) AND (cfd2.custom_field_id='{$post["mm_member_custom_field2"]}') AND (cfd2.value LIKE '%".$post["mm_member_custom_field2_value"]."%')) ";
		}
		
		$sqlFrom = " FROM ".$wpdb->users." u, ".MM_TABLE_USER_DATA." mmu ".$customFieldJoinSql.$customFieldJoinSql2.$bundlesJoinSql;
		
		$filters = "";
		$newFilter = "";
		$mmUserDataColumns = array("membership_level_id", "status", "last_name", "phone", "last_login_date", "status_updated");
		$searchByDate = "user_registered";
		
		if(!empty($post["mm_member_search_by_date"]))
		{
			$searchByDate = $post["mm_member_search_by_date"];
		}
		  
		if(empty($dg->sortBy))
		{
			$dg->sortBy = $searchByDate;
		}
		
		$tableName = (in_array($searchByDate, $mmUserDataColumns)) ? "mmu" : "u";     
		if(!empty($post['mm_from_date'])) 
		{
			$fromDate = MM_Utils::dateToUTC($post['mm_from_date'], "Y-m-d H:i", "00:00:00");
			$newFilter = "{$tableName}.{$searchByDate} >= '".$fromDate."'";
			$filters = $this->addFilter($filters, $newFilter);
		}
		
		if(!empty($post['mm_to_date']))
		{
		    $toDate = MM_Utils::dateToUTC($post['mm_to_date'], "Y-m-d H:i", "23:59:59");
		    $newFilter = "{$tableName}.{$searchByDate} <= '".$toDate."'";
		    $filters = $this->addFilter($filters, $newFilter);
		}
		
		if(!empty($post['mm_notes']))
		{
		    $filters = $this->addFilter($filters, "mmu.notes LIKE '%".$post["mm_notes"]."%'");
		}
		
		// Member ID
		if(!empty($post['mm_member_id'])) 
		{
			$filters = $this->addFilter($filters, "u.id = '".$post["mm_member_id"]."'");
		}
		
		// First Name
		if(!empty($post['mm_first_name'])) 
		{
			$filters = $this->addFilter($filters, "mmu.first_name LIKE '%".$post["mm_first_name"]."%'");
		}
		
		// Last Name
		if(!empty($post['mm_last_name'])) 
		{
			$filters = $this->addFilter($filters, "mmu.last_name LIKE '%".$post["mm_last_name"]."%'");
		}
		
		// Email
		if(!empty($post['mm_email'])) 
		{
			$filters = $this->addFilter($filters, "u.user_email LIKE '%".$post["mm_email"]."%'");
		}
		
		global $current_user;
		$employee = MM_Employee::findByUserId($current_user->ID);
		
		// Membership Level IDs
		$membershipFilterSet = false;
		if(!empty($post['mm_memberships'])) 
		{
			// make sure current employee has access to the requested membership IDs
			if($employee->isValid())
			{
				$filteredList = array();
				
				foreach($post["mm_memberships"] as $id)
				{
					if($employee->hasAccess(MM_Employee::$ACCESS_TYPE_MEMBERSHIP, $id))
					{
						$filteredList[] = $id;
					}
				}
				
				$post["mm_memberships"] = $filteredList;
			}
			
			if(count($post["mm_memberships"]) > 0)
			{
				$membershipFilterSet = true;
				$newFilter = "mmu.membership_level_id IN (".join(',' , $post["mm_memberships"]).")";
				$filters = $this->addFilter($filters, $newFilter);
			}
		}
		
		// filter membership IDs to only include those the current employee has access to
		if(!$membershipFilterSet && $employee->isValid())
		{
			$membershipRestrictions = $employee->getAccessRescrictions(MM_Employee::$ACCESS_TYPE_MEMBERSHIP);
				
			if(count($membershipRestrictions) > 0)
			{
				$newFilter = "mmu.membership_level_id IN (".join(',' , $membershipRestrictions).")";
				$filters = $this->addFilter($filters, $newFilter);
			}
		}
		
		// Member Status
		if(!empty($post['mm_member_status_types'])) 
		{
			$newFilter = "mmu.status IN (".join(',' , $post["mm_member_status_types"]).")";
			
			if($newFilter != "") 
			{
				$filters = $this->addFilter($filters, $newFilter);
			}
		}
		
		// bundles
		if(!empty($bundlesWhereSql))
		{
			$filters = $this->addFilter($filters, $bundlesWhereSql);
		}
		
		// custom fields
		if(!empty($customFieldWhereSql))
		{
			$filters = $this->addFilter($filters, $customFieldWhereSql);
		}
		
		if(!empty($customFieldWhereSql2))
		{
			$filters = $this->addFilter($filters, $customFieldWhereSql2);
		}
		
		$sqlWhere = " WHERE u.ID = mmu.wp_user_id";
		
		if($filters != "") 
		{
			$sqlWhere .= " AND ".$filters;
		}

		$sortTableName = (in_array($dg->sortBy, $mmUserDataColumns)) ? "mmu" : "u";
		if(isset($dg->sortBy) && !is_null($dg->sortBy) && !empty($dg->sortBy)) 
		{
			$sqlGroupBy = " ORDER BY {$sortTableName}.{$dg->sortBy} {$dg->sortDir} ";
		}
		
		$sqlResultCount = "select count(distinct u.ID) as total ";
		$sqlResultCount .= $sqlFrom;
		$sqlResultCount .= $sqlWhere;
		
		$countRow = $wpdb->get_row($sqlResultCount);
		
		if($countRow->total > 0) 
		{
			$sql = "select u.id, '{$countRow->total}' as total, u.user_registered, u.user_email, ";
			$sql .= "mmu.membership_level_id, mmu.status, mmu.first_name, mmu.last_name, mmu.phone, mmu.last_login_date, mmu.status_updated ";
			if($doGenerateCsv)
			{
				$sql .= ", mmu.billing_address1, mmu.billing_city, mmu.billing_state, mmu.billing_postal_code, mmu.billing_country ";
				$sql .= ", mmu.shipping_address1, mmu.shipping_city, mmu.shipping_state, mmu.shipping_postal_code, mmu.shipping_country, mmu.expiration_date, mmu.notes  ";
			}
			$sql .= " ".$customFieldColumnSql;
			$sql .= " ".$customFieldColumnSql2;
		}
		else 
		{
			return array();
		}
		
		$sql .= $sqlFrom;
		$sql .= $sqlWhere;
		$sql .= $sqlGroupBy;
		
		if(!$doGenerateCsv)
		{
			$sql .= $dg->getLimitSql();
			$batch_size = $dg->resultSize;
		}
		else 
		{
			$batch_size = 50; //larger batch should be more efficient for full result sets	
		}
		
		$rows = $wpdb->get_results($sql, OBJECT_K);
		
		// Execute additional sub-queries on the result set in batches
		$i=0;
		$id_batch = array();
		foreach ($rows as $id=>$member)
		{
			$id_batch[] = $id;
			if ((++$i) == $batch_size)
			{
			    $userIds = implode(",",$id_batch);
			    $sql = $this->buildAppliedBundlesSQL($userIds, $bundleIds);
			    $batchRows = $wpdb->get_results($sql, ARRAY_A);
			    foreach ($batchRows as $batchRowNum=>$batchInfo)
			    {
			        $memberId = $batchInfo['access_type_id'];
			        foreach ($batchInfo as $propName=>$propValue)
			        {
			            $rows[$memberId]->$propName = $propValue;
			        }
			    }
			    $id_batch = array();
			    $i = 0;
			}
		}
		
		if (!empty($id_batch))
		{
			$userIds = implode(",",$id_batch);
			$sql = $this->buildAppliedBundlesSQL($userIds, $bundleIds);
			$batchRows = $wpdb->get_results($sql, ARRAY_A);
			foreach ($batchRows as $batchRowNum=>$batchInfo)
			{
				$memberId = $batchInfo['access_type_id'];
				foreach ($batchInfo as $propName=>$propValue)
				{
					$rows[$memberId]->$propName = $propValue;
				}
			}
		}
		
		return array_values($rows);
	}
	
	/**
	 * This method creates the SQL to execute to get the bundles applied to a particular set of users. 
	 * If the $bundleIds parameter is set, it will also limit the results to a specific group of bundles.
	 * @param String $userIds comma-delimiated list of user IDs 
	 * @param String $bundleIds comma-deliminated list of bundle IDs
	 */
	private function buildAppliedBundlesSQL($userIds, $bundleIds)
	{
		$sql = "SELECT access_type_id, group_concat(bundle_id) AS bundles FROM ".MM_TABLE_APPLIED_BUNDLES;
		$sql .= " WHERE (access_type = '".MM_AppliedBundle::$ACCESS_TYPE_USER."') AND (access_type_id IN ({$userIds})) ";
		$sql .= " AND (status = '".MM_Status::$ACTIVE."' OR status = '".MM_Status::$PENDING_CANCELLATION."') ";
		
		if(!empty($bundleIds))
		{
			$sql .= " AND (bundle_id IN ({$bundleIds})) ";
		}
		
		$sql .= " GROUP BY access_type_id;";
		return $sql;
	}
	
	private function addFilter($filters, $newFilter) 
	{
		if($filters == "") {
			$filters = " ".$newFilter;
		}
		else if($newFilter != "") {
			$filters .= " AND ".$newFilter;
		}
		
		return $filters;
	}
	
	private function storeSearchState($post) 
	{
		if(isset($post["mm_show_search"])) 
		{
			if(isset($post["mm_admin_id"]))
			{
				$optionName = MM_OptionUtils::$OPTION_KEY_SHOW_MBRS_SEARCH."-".$post["mm_admin_id"];
				MM_OptionUtils::setOption($optionName, $post["mm_show_search"]);
				return new MM_Response();
			}
			else
			{
				return new MM_Response("Unable to store search state. Couldn't find current user ID.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Unable to store search state. Missing current state value.", MM_Response::$ERROR);
		}
	}
	
	public function createMember($post) 
	{
		if(isset($post["mm_new_membership"]) && isset($post["mm_new_email"]))
		{
			$membership = new MM_MembershipLevel($post["mm_new_membership"]);
			if(!$membership->isValid())
			{
				return new MM_Response("Error creating member. Membership level with ID '{$post["mm_new_membership"]}' is invalid.", MM_Response::$ERROR);
			}
			
			$user = MM_User::findByEmail($post["mm_new_email"]);
			
			if(!$user->isValid())
			{
				$user = new MM_User();
				$user->setStatus(MM_Status::$PENDING_ACTIVATION);
				$user->setStatusMessage("Customer account created by administrator using the Create Member tool but not completed.");
			}
			
			$user->setEmail($post["mm_new_email"]);
			
			if(isset($post["mm_new_first_name"]))
			{
				$user->setFirstName($post["mm_new_first_name"]);
			}
			
			if(isset($post["mm_new_last_name"]))
			{
				$user->setLastName($post["mm_new_last_name"]);
			}
			
			if(isset($post["mm_new_phone"]))
			{
				$user->setPhone($post["mm_new_phone"]);
			}
			
			if(isset($post["mm_new_password"]))
			{
				$user->setPassword($post["mm_new_password"]);
			}
			
			$result = $user->commitData();
			
			if(MM_Response::isSuccess($result))
			{
				return MM_AccessControlEngine::assignMembershipToUser($user, $membership);
			}
			else
			{
				return $result;
			}
		}
		else
		{
			return new MM_Response("Error creating member. Membership level and email address are required.", MM_Response::$ERROR);
		}
	}
	
	private function removeMember($post) 
	{
		$user = new MM_User($post["id"]);
		
		if($user->isValid()) 
		{
			$result = $user->delete();
			
			return $result;
		}
		
		return new MM_Response("Unable to delete member. No ID specified.", MM_Response::$ERROR);
	}
	
	public function generateSearchForm($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/members.form.php", $post);
	}
	
	public function generateDataGrid($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/members.datagrid.php", $post);
	}
	
	
	public function preprocessSearch($queryMeta)
	{
	    //convert sort by "name" to sort by last_name,first_name
	    $sortComponents = explode(" ",strtolower($queryMeta->sortCol ?? ""));
	    $sortCol = $sortComponents[0] ?? "";
	    if (!empty($sortCol))
	    {
	        if ($sortCol == "name")
	        {
	            $sortDir = (count($sortComponents) == 2) ? " {$sortComponents[1]}" : "";
	            $queryMeta->sortCol = "mud.last_name{$sortDir},mud.first_name{$sortDir}";
	        }
	    }
	    
	    //TODO: check if this triggers
	    if (isset($queryMeta->query->conditions))
	    {
	        foreach ($queryMeta->query->conditions as $aCondition)
	        {
	            if (isset($aCondition->name))
	            {
	                switch ($aCondition->name)
	                {
	                    case "u.user_registered":
	                    case "mud.status_updated":
	                        $aCondition->value = MM_utils::dateToUTC($aCondition->value,"Y-m-d H:i:s");
	                        break;
	                    default:
	                        break;
	                }
	            }
	        }
	    }
	    
	}
	
	
	/**
	 * Query the database and return the unprocessed results in object format
	 */
	protected function getRawData($criteria=array())
	{
	    global $wpdb;
	    
	    $userTable = $wpdb->users;
	    $userDataTable = MM_TABLE_USER_DATA;
	    $membershipLevelTable = MM_TABLE_MEMBERSHIP_LEVELS;
	    $appliedBundlesTable = MM_TABLE_APPLIED_BUNDLES;
	    $bundlesTable = MM_TABLE_BUNDLES;
	    $customFieldDataTable = MM_TABLE_CUSTOM_FIELD_DATA;
	    $activityLogTable = MM_TABLE_EVENT_LOG;
	    $orderItemAccessTable = MM_TABLE_ORDER_ITEM_ACCESS;
	    $orderItemsTable = MM_TABLE_ORDER_ITEMS;
	    
	    $dataset = $this->processQueryMeta($criteria);
	    $whereString = $dataset->whereString;
	    $orderString = $dataset->orderString;
	    $limitString = $dataset->limitString;
	    
	    $userAccessType = MM_AppliedBundle::$ACCESS_TYPE_USER;
	    $alPageAccessType = MM_ActivityLog::$EVENT_TYPE_PAGE_ACCESS;
	    $bundleAccessType = MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE;
	    
	    $bundleActiveString = "(".MM_Status::$ACTIVE.",".MM_Status::$PENDING_CANCELLATION.",".MM_STATUS::$OVERDUE.")";
	    
	    $cs = "<mm_col_sep>";
	    $gs = "<mm_group_sep>";

        $sql = "SELECT u.ID, u.user_email, u.user_registered ";
	   	    
	    $sqlFrom =  "FROM {$userDataTable} mud ".
	   	    "INNER JOIN {$userTable} u ON (mud.wp_user_id = u.ID) ".
	   	    "LEFT JOIN {$membershipLevelTable} ml ON (mud.membership_level_id = ml.id) ";
	    
	    if (($criteria->query->bundles ?? false) && is_array($criteria->query->bundles))
	    {
	        $bundleIds = implode(",",$criteria->query->bundles);
	        $sqlFrom .= $wpdb->prepare("INNER JOIN (SELECT ab.access_type_id AS user_id FROM {$appliedBundlesTable} ab WHERE (ab.access_type='{$userAccessType}') AND (ab.bundle_id IN (%1s)) GROUP BY ab.access_type_id) AS xb ".
	                     "ON (mud.wp_user_id = xb.user_id) ",$bundleIds);
	    }
	    
	    if (($criteria->query->customFields ?? false) && is_array($criteria->query->customFields))
	    {
	        $cfCnt = 0;
	        foreach ($criteria->query->customFields as $cfQuery)
	        {
	            if (isset($cfQuery->custom_field_id) && isset($cfQuery->value))
	            {
	                $cfCnt++;
	                $cfLikeVal = "%".$wpdb->esc_like($cfQuery->value)."%";
	                $a = "cfd{$cfCnt}"; // inner table alias
	                $b = "xcf{$cfCnt}"; //outer table alias
	                $sqlFrom .= $wpdb->prepare("INNER JOIN (SELECT {$a}.user_id FROM {$customFieldDataTable} {$a} WHERE (({$a}.custom_field_id = %s) ".
	   	                                       "AND (LOWER({$a}.value) LIKE %s)) GROUP BY {$a}.user_id) {$b} ON ({$b}.user_id = u.ID) ",$cfQuery->custom_field_id,$cfLikeVal);
	                if (isset($cfQuery->column))
	                {
	                    $cfTbl = "ecf{$cfCnt}"; //construct unique alias for each custom field value subquery in the SELECT clause too
	                    $tSql = $wpdb->prepare(",(SELECT GROUP_CONCAT({$cfTbl}.value) FROM {$customFieldDataTable} {$cfTbl} WHERE ({$cfTbl}.user_id = u.ID) ".
	   	                    "AND ({$cfTbl}.custom_field_id = %s)) AS %s ", $cfQuery->custom_field_id, $cfQuery->column);
	                    $sql .= $tSql;
	                }
	            }
	        }
	    }
	    
	    $sqlResultCount = "select count(*) as total {$sqlFrom} {$whereString}";
	    $dataset->total = $wpdb->get_var($sqlResultCount);
	    
	    $sqlQuery = "{$sql} {$sqlFrom} {$whereString}{$orderString}{$limitString}";
	    $sqlQuery = trim($sqlQuery);
	    $rows = $wpdb->get_results($sqlQuery,OBJECT_K);
	    
	    if (count($rows) > 0)
	    {
	        //get supplemental data
	        $sSQL = "SELECT mud.wp_user_id as id, mud.last_name, mud.first_name, CONCAT(mud.last_name,', ',mud.first_name) as name, mud.phone, mud.last_login_date, ".
	   	        "mud.status, mud.status_updated, ml.id as membership_level_id, ml.name as membership_level_name, ml.is_free as membership_is_free, ".
	   	        "(SELECT GROUP_CONCAT(CONCAT_WS('{$cs}',sb.id,sb.name) SEPARATOR '{$gs}') AS bundle_info FROM {$appliedBundlesTable} sab INNER JOIN ".
	   	        "{$bundlesTable} sb ON (sab.bundle_id = sb.id) WHERE sab.access_type='{$userAccessType}' AND sab.access_type_id=mud.wp_user_id AND sab.status IN {$bundleActiveString}) AS bundles, ".
	   	        "(SELECT COUNT(DISTINCT al.url) as patotal FROM {$activityLogTable} al WHERE al.event_type='{$alPageAccessType}' AND al.user_id=mud.wp_user_id) AS pages_accessed, ".
	   	        "(SELECT COUNT(*) AS total FROM {$activityLogTable} lcal WHERE lcal.event_type='login' AND lcal.user_id=mud.wp_user_id) as login_count, ".
	   	        "(SELECT COUNT(DISTINCT zb.id) FROM {$appliedBundlesTable} zab INNER JOIN {$bundlesTable} zb ON ((zab.access_type='{$userAccessType}') ".
	   	        "AND (zab.bundle_id = zb.id)) INNER JOIN {$orderItemAccessTable} zoia ON ((zoia.access_type='{$bundleAccessType}') and (zab.bundle_id = zoia.access_type_id)) ".
	   	        "INNER JOIN {$orderItemsTable} zoi ON (zoia.order_item_id = zoi.id) WHERE zab.access_type_id=mud.wp_user_id AND zoia.user_id=mud.wp_user_id AND ".
	   	        "zb.is_free=0 AND zab.imported=0 AND zab.status NOT IN (6,7,2,4,9) AND zoi.status NOT IN (3,6)) as num_active_bundle_subscriptions ";
	        
	        $sSQLFrom =  "FROM {$userDataTable} mud LEFT JOIN {$membershipLevelTable} ml ON (mud.membership_level_id = ml.id) ";
	       
	        $batchSize = 50;
	        $userIds = array_keys($rows);	        
	        
	        //split the user ids into batches, and retrieve supplemental data for each batch. This reduces query complexity and prevents join buffer exhaustion on dbs running on smaller systems
	        foreach (array_chunk($userIds,$batchSize) as $batch)
	        {
	            $idString = implode(",",$batch);
	            $sSQLWhere = "WHERE mud.wp_user_id IN ({$idString}) ";
	            $sQuery = "{$sSQL} {$sSQLFrom} {$sSQLWhere}";
	            $sData = $wpdb->get_results($sQuery,OBJECT_K);
	            foreach ($sData as $k=>$v)
	            {
	                $rows[$k] = (object) array_merge((array) $rows[$k], (array) $v); //merge the supplemental data into the main user object in $rows. Both arrays are keyed by user id
	            }
	        }
	        
    	    //post-process data
    	    foreach($rows as $row)
    	    {
    	        $row->user_registered = MM_Utils::dateToLocal($row->user_registered,"Y-m-d H:i");
    	        $row->status_updated = MM_Utils::dateToLocal($row->status_updated,"Y-m-d H:i");
    	        $row->last_login_date = MM_Utils::dateToLocal($row->last_login_date,"Y-m-d H:i");
    	        //if there are applied bundles that are non-free, non-imported, and linked to an order item that is not pending activation, errored, cancelled, pending cancellation or paused..... and if the user's membership is non-free and not in cancelled or paused status
    	        $row->has_active_subscriptions = (intval($row->num_active_bundle_subscriptions) > 0) || ((intval($row->membership_is_free) != 1) && !in_array($row->status,[MM_Status::$CANCELED,MM_Status::$PAUSED,MM_Status::$PENDING_CANCELLATION]));
    	        $bundleArray = [];
    	        if (!empty($row->bundles))
    	        {
    	            $bundleArray = [];
    	            $splitBundles = explode($gs,$row->bundles);
    	            foreach ($splitBundles as $aSplitBundle)
    	            {
    	                $splitBundleCols = explode($cs,$aSplitBundle);
    	                if (count($splitBundleCols) == 2)
    	                {
    	                    $bundleArray[] = (object)["id" => $splitBundleCols[0],"name" => $splitBundleCols[1]]; //order needs to match the params to group_concat in the select
    	                }
    	            }
    	        }
    	        $row->bundles = $bundleArray;
    	    }
	    }
	    
	    $pageCounter = ($dataset->pageNum == -1) ? 1 : $dataset->pageNum; //TODO: implement -1 as a marker for unpaginated
	    $dataset->data[$pageCounter] = [];
	    $prefetchSize = ($dataset->prefetchSize < 0)?0:$dataset->prefetchSize;
	    $pfCount = -1;
	    
	    foreach (array_chunk($rows, $dataset->pageSize) as $k=>$page)
	    {
	        if ($pfCount >= $prefetchSize)
	        {
	            break;
	        }
	        $pageCounter = $dataset->pageNum + $k; //by default array_chunk will use numeric keys starting wih 0
	        $dataset->data[$pageCounter] = $page;
	        $pfCount++;
	    }
	    
	    return $dataset;
	}
 }
